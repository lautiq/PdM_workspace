
TPF_PdM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a0  080051a0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a8  080051a8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080051b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000088  08005234  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08005234  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc33  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002486  00000000  00000000  0002dce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00030170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  00030ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172e7  00000000  00000000  000316e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010443  00000000  00000000  000489cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088eef  00000000  00000000  00058e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1d01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000308c  00000000  00000000  000e1d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004928 	.word	0x08004928

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08004928 	.word	0x08004928

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f001 f889 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f865 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f927 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8fb 	bl	8000790 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800059a:	f000 f8cb 	bl	8000734 <MX_I2C1_Init>

	  /* USER CODE BEGIN 2 */

btn1.pin = GPIO_PIN_9; //D8
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <main+0xbc>)
 80005a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a4:	825a      	strh	r2, [r3, #18]
btn2.pin = GPIO_PIN_7; //D9
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <main+0xc0>)
 80005a8:	2280      	movs	r2, #128	; 0x80
 80005aa:	825a      	strh	r2, [r3, #18]
btn3.pin = GPIO_PIN_6; //D10
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <main+0xc4>)
 80005ae:	2240      	movs	r2, #64	; 0x40
 80005b0:	825a      	strh	r2, [r3, #18]
btn1.port = GPIOA;
 80005b2:	4b23      	ldr	r3, [pc, #140]	; (8000640 <main+0xbc>)
 80005b4:	4a25      	ldr	r2, [pc, #148]	; (800064c <main+0xc8>)
 80005b6:	615a      	str	r2, [r3, #20]
btn2.port = GPIOC;
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <main+0xc0>)
 80005ba:	4a25      	ldr	r2, [pc, #148]	; (8000650 <main+0xcc>)
 80005bc:	615a      	str	r2, [r3, #20]
btn3.port = GPIOB;
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <main+0xc4>)
 80005c0:	4a24      	ldr	r2, [pc, #144]	; (8000654 <main+0xd0>)
 80005c2:	615a      	str	r2, [r3, #20]

debounceFSM_init(&btn1);
 80005c4:	481e      	ldr	r0, [pc, #120]	; (8000640 <main+0xbc>)
 80005c6:	f000 ff4f 	bl	8001468 <debounceFSM_init>
debounceFSM_init(&btn2);
 80005ca:	481e      	ldr	r0, [pc, #120]	; (8000644 <main+0xc0>)
 80005cc:	f000 ff4c 	bl	8001468 <debounceFSM_init>
debounceFSM_init(&btn3);
 80005d0:	481d      	ldr	r0, [pc, #116]	; (8000648 <main+0xc4>)
 80005d2:	f000 ff49 	bl	8001468 <debounceFSM_init>
chronosFSM_init();
 80005d6:	f000 fd75 	bl	80010c4 <chronosFSM_init>

//Iniciamos en el primer estado:
oledInit();
 80005da:	f000 fb37 	bl	8000c4c <oledInit>
cleanScreen(Black);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fb9c 	bl	8000d1c <cleanScreen>
oledSetCursor(10, 20);
 80005e4:	2114      	movs	r1, #20
 80005e6:	200a      	movs	r0, #10
 80005e8:	f000 fcea 	bl	8000fc0 <oledSetCursor>
oledWriteString("CHRONOMETER APP!", White);
 80005ec:	2101      	movs	r1, #1
 80005ee:	481a      	ldr	r0, [pc, #104]	; (8000658 <main+0xd4>)
 80005f0:	f000 fcc2 	bl	8000f78 <oledWriteString>
updateScreen();
 80005f4:	f000 fbb6 	bl	8000d64 <updateScreen>
HAL_Delay(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fc:	f001 f8c2 	bl	8001784 <HAL_Delay>
{
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  //update debounce FSM
	  debounceFSM_update(&btn1);
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <main+0xbc>)
 8000602:	f000 ff51 	bl	80014a8 <debounceFSM_update>
	  debounceFSM_update(&btn2);
 8000606:	480f      	ldr	r0, [pc, #60]	; (8000644 <main+0xc0>)
 8000608:	f000 ff4e 	bl	80014a8 <debounceFSM_update>
	  debounceFSM_update(&btn3);
 800060c:	480e      	ldr	r0, [pc, #56]	; (8000648 <main+0xc4>)
 800060e:	f000 ff4b 	bl	80014a8 <debounceFSM_update>

    // Obtener estados de los botones
    bool_t btn1Pressed = readButton(&btn1);
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <main+0xbc>)
 8000614:	f000 ffb4 	bl	8001580 <readButton>
 8000618:	4603      	mov	r3, r0
 800061a:	71fb      	strb	r3, [r7, #7]
    bool_t btn2Pressed = readButton(&btn2);
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <main+0xc0>)
 800061e:	f000 ffaf 	bl	8001580 <readButton>
 8000622:	4603      	mov	r3, r0
 8000624:	71bb      	strb	r3, [r7, #6]
    bool_t btn3Pressed = readButton(&btn3);
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <main+0xc4>)
 8000628:	f000 ffaa 	bl	8001580 <readButton>
 800062c:	4603      	mov	r3, r0
 800062e:	717b      	strb	r3, [r7, #5]


	  //update chronometer:
	  chronosFSM_update(btn1Pressed, btn2Pressed, btn3Pressed);
 8000630:	797a      	ldrb	r2, [r7, #5]
 8000632:	79b9      	ldrb	r1, [r7, #6]
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fd6c 	bl	8001114 <chronosFSM_update>
{
 800063c:	e7e0      	b.n	8000600 <main+0x7c>
 800063e:	bf00      	nop
 8000640:	2000013c 	.word	0x2000013c
 8000644:	20000154 	.word	0x20000154
 8000648:	2000016c 	.word	0x2000016c
 800064c:	40020000 	.word	0x40020000
 8000650:	40020800 	.word	0x40020800
 8000654:	40020400 	.word	0x40020400
 8000658:	08004940 	.word	0x08004940

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fcd2 	bl	8004014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a28      	ldr	r2, [pc, #160]	; (800072c <SystemClock_Config+0xd0>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd4>)
 80006aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d0:	2310      	movs	r3, #16
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006da:	2304      	movs	r3, #4
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006de:	2307      	movs	r3, #7
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 f840 	bl	800276c <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006f2:	f000 f90d 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f002 faa2 	bl	8002c5c <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071e:	f000 f8f7 	bl	8000910 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_I2C1_Init+0x50>)
 800073a:	4a13      	ldr	r2, [pc, #76]	; (8000788 <MX_I2C1_Init+0x54>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_I2C1_Init+0x50>)
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_I2C1_Init+0x58>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_I2C1_Init+0x50>)
 8000752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_I2C1_Init+0x50>)
 8000772:	f001 fb9f 	bl	8001eb4 <HAL_I2C_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800077c:	f000 f8c8 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000a4 	.word	0x200000a4
 8000788:	40005400 	.word	0x40005400
 800078c:	000186a0 	.word	0x000186a0

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c8:	f002 fc68 	bl	800309c <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f89d 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000f8 	.word	0x200000f8
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b40      	ldr	r3, [pc, #256]	; (8000900 <MX_GPIO_Init+0x11c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a3f      	ldr	r2, [pc, #252]	; (8000900 <MX_GPIO_Init+0x11c>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <MX_GPIO_Init+0x11c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b39      	ldr	r3, [pc, #228]	; (8000900 <MX_GPIO_Init+0x11c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a38      	ldr	r2, [pc, #224]	; (8000900 <MX_GPIO_Init+0x11c>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b36      	ldr	r3, [pc, #216]	; (8000900 <MX_GPIO_Init+0x11c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b32      	ldr	r3, [pc, #200]	; (8000900 <MX_GPIO_Init+0x11c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a31      	ldr	r2, [pc, #196]	; (8000900 <MX_GPIO_Init+0x11c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <MX_GPIO_Init+0x11c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <MX_GPIO_Init+0x11c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a2a      	ldr	r2, [pc, #168]	; (8000900 <MX_GPIO_Init+0x11c>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <MX_GPIO_Init+0x11c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	4825      	ldr	r0, [pc, #148]	; (8000904 <MX_GPIO_Init+0x120>)
 8000870:	f001 faec 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	481f      	ldr	r0, [pc, #124]	; (8000908 <MX_GPIO_Init+0x124>)
 800088c:	f001 f942 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000890:	2320      	movs	r3, #32
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4817      	ldr	r0, [pc, #92]	; (8000904 <MX_GPIO_Init+0x120>)
 80008a8:	f001 f934 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 -> BTN 2 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_GPIO_Init+0x124>)
 80008c0:	f001 f928 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 -> BTN 1 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <MX_GPIO_Init+0x120>)
 80008da:	f001 f91b 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 -> BTN 3*/
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008de:	2340      	movs	r3, #64	; 0x40
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <MX_GPIO_Init+0x128>)
 80008f2:	f001 f90f 	bl	8001b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020800 	.word	0x40020800
 800090c:	40020400 	.word	0x40020400

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095a:	2007      	movs	r0, #7
 800095c:	f001 f806 	bl	800196c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_I2C_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12c      	bne.n	80009e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_I2C_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_I2C_MspInit+0x88>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_I2C_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b0:	2312      	movs	r3, #18
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009bc:	2304      	movs	r3, #4
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480c      	ldr	r0, [pc, #48]	; (80009f8 <HAL_I2C_MspInit+0x8c>)
 80009c8:	f001 f8a4 	bl	8001b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_I2C_MspInit+0x88>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_I2C_MspInit+0x88>)
 80009d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_I2C_MspInit+0x88>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40005400 	.word	0x40005400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020400 	.word	0x40020400

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <HAL_UART_MspInit+0x94>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d133      	bne.n	8000a86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_UART_MspInit+0x98>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a56:	230c      	movs	r3, #12
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a66:	2307      	movs	r3, #7
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a72:	f001 f84f 	bl	8001b14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2026      	movs	r0, #38	; 0x26
 8000a7c:	f000 ff81 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a80:	2026      	movs	r0, #38	; 0x26
 8000a82:	f000 ff9a 	bl	80019ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 fe2c 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART2_IRQHandler+0x10>)
 8000af6:	f002 fb4f 	bl	8003198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000f8 	.word	0x200000f8

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f003 fa44 	bl	8003fc0 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20018000 	.word	0x20018000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	20000184 	.word	0x20000184
 8000b6c:	20000640 	.word	0x20000640

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9a:	490e      	ldr	r1, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb0:	4c0b      	ldr	r4, [pc, #44]	; (8000be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bbe:	f7ff ffd7 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f003 fa03 	bl	8003fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc6:	f7ff fcdd 	bl	8000584 <main>
  bx  lr    
 8000bca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000bd8:	080051b0 	.word	0x080051b0
  ldr r2, =_sbss
 8000bdc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000be0:	20000640 	.word	0x20000640

08000be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC_IRQHandler>
	...

08000be8 <WriteCommand>:
/**
 * @brief Writes a command to the SSD1306 controller via the I2C bus.
 * @param byte Command to send.
 */
static void WriteCommand(uint8_t byte)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	//HAL function information: HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);

	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, SSD1306_COMMAND_STREAM, 1, &byte, 1, HAL_MAX_DELAY);
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	2200      	movs	r2, #0
 8000c04:	2178      	movs	r1, #120	; 0x78
 8000c06:	4803      	ldr	r0, [pc, #12]	; (8000c14 <WriteCommand+0x2c>)
 8000c08:	f001 fa98 	bl	800213c <HAL_I2C_Mem_Write>

}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000a4 	.word	0x200000a4

08000c18 <WriteData>:
 * @brief Writes data to the SSD1306 controller via the I2C bus.
 * @param buffer Pointer to the data buffer.
 * @param buff_size Size of the data buffer.
 */
static void WriteData(uint8_t* buffer, size_t buff_size)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af04      	add	r7, sp, #16
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, SSD1306_DATA_STREAM, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2a:	9202      	str	r2, [sp, #8]
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	2240      	movs	r2, #64	; 0x40
 8000c36:	2178      	movs	r1, #120	; 0x78
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <WriteData+0x30>)
 8000c3a:	f001 fa7f 	bl	800213c <HAL_I2C_Mem_Write>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000a4 	.word	0x200000a4

08000c4c <oledInit>:

/**
 * @brief Initializes the SSD1306 OLED display.
 */
void oledInit()
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	//HAL_Delay(100);

	//Init OLED

	//Display off
	WriteCommand(SSD1306_DISPLAY_OFF);	//0xAE
 8000c50:	20ae      	movs	r0, #174	; 0xae
 8000c52:	f7ff ffc9 	bl	8000be8 <WriteCommand>

	WriteCommand(SSD1306_MEMORY_ADDR_MODE); //0x20 set memory addressing mode
 8000c56:	2020      	movs	r0, #32
 8000c58:	f7ff ffc6 	bl	8000be8 <WriteCommand>
	WriteCommand(0x00); // 00b Horizontal addressing Mode, 01b Vertical addressing mode, 10b page addressing mode.
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ffc3 	bl	8000be8 <WriteCommand>

	WriteCommand(0xB0); // 0xB0 Set page Start Address for page addressing mode 0-7.
 8000c62:	20b0      	movs	r0, #176	; 0xb0
 8000c64:	f7ff ffc0 	bl	8000be8 <WriteCommand>

	WriteCommand(SSD1306_COM_SCAN_DIR_OP); //0xC8 Set COM Output Scan Direction
 8000c68:	20c8      	movs	r0, #200	; 0xc8
 8000c6a:	f7ff ffbd 	bl	8000be8 <WriteCommand>

	WriteCommand(0x00); //0x0 set low column address
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff ffba 	bl	8000be8 <WriteCommand>
	WriteCommand(0x10); //0x10 set high column address
 8000c74:	2010      	movs	r0, #16
 8000c76:	f7ff ffb7 	bl	8000be8 <WriteCommand>

	WriteCommand(SSD1306_SET_START_LINE); // 0x40 set start line address
 8000c7a:	2040      	movs	r0, #64	; 0x40
 8000c7c:	f7ff ffb4 	bl	8000be8 <WriteCommand>

	//SetContrast(0xFF);
	WriteCommand(SSD1306_SET_CONTRAST);
 8000c80:	2081      	movs	r0, #129	; 0x81
 8000c82:	f7ff ffb1 	bl	8000be8 <WriteCommand>
	WriteCommand(0xFF);
 8000c86:	20ff      	movs	r0, #255	; 0xff
 8000c88:	f7ff ffae 	bl	8000be8 <WriteCommand>

	WriteCommand(SSD1306_SEG_REMAP_OP); //0xA1 set segment re-map 0 to 127
 8000c8c:	20a1      	movs	r0, #161	; 0xa1
 8000c8e:	f7ff ffab 	bl	8000be8 <WriteCommand>

	WriteCommand(SSD1306_DIS_NORMAL); //0xA6 set normal color
 8000c92:	20a6      	movs	r0, #166	; 0xa6
 8000c94:	f7ff ffa8 	bl	8000be8 <WriteCommand>



	WriteCommand(SSD1306_SET_MUX_RATIO); //0xA8 set multiplex ratio to 1-64
 8000c98:	20a8      	movs	r0, #168	; 0xa8
 8000c9a:	f7ff ffa5 	bl	8000be8 <WriteCommand>
	WriteCommand(0x3F); // Set multiplex ratio for 128px high
 8000c9e:	203f      	movs	r0, #63	; 0x3f
 8000ca0:	f7ff ffa2 	bl	8000be8 <WriteCommand>

	WriteCommand(SSD1306_DIS_ENT_DISP_ON); //0xA4 Output follows RAM content.
 8000ca4:	20a4      	movs	r0, #164	; 0xa4
 8000ca6:	f7ff ff9f 	bl	8000be8 <WriteCommand>

	WriteCommand(SSD1306_DISPLAY_OFFSET); //0xD3 display offset
 8000caa:	20d3      	movs	r0, #211	; 0xd3
 8000cac:	f7ff ff9c 	bl	8000be8 <WriteCommand>
	WriteCommand(0x00);					//Not offset
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ff99 	bl	8000be8 <WriteCommand>

	WriteCommand(SSD1306_SET_OSC_FREQ); //0xD5 set display clock divide ratio/oscilator freq
 8000cb6:	20d5      	movs	r0, #213	; 0xd5
 8000cb8:	f7ff ff96 	bl	8000be8 <WriteCommand>
	WriteCommand(0xF0);		//Set divide ratio.
 8000cbc:	20f0      	movs	r0, #240	; 0xf0
 8000cbe:	f7ff ff93 	bl	8000be8 <WriteCommand>

	WriteCommand(SSD1306_SET_PRECHARGE);	//0xD9 Set pre-charged period
 8000cc2:	20d9      	movs	r0, #217	; 0xd9
 8000cc4:	f7ff ff90 	bl	8000be8 <WriteCommand>
	WriteCommand(0x22);	//Set period.
 8000cc8:	2022      	movs	r0, #34	; 0x22
 8000cca:	f7ff ff8d 	bl	8000be8 <WriteCommand>

	WriteCommand(SSD1306_COM_PIN_CONF); //0xDA set com pins hardware config
 8000cce:	20da      	movs	r0, #218	; 0xda
 8000cd0:	f7ff ff8a 	bl	8000be8 <WriteCommand>
	WriteCommand(0x12);	//64px height
 8000cd4:	2012      	movs	r0, #18
 8000cd6:	f7ff ff87 	bl	8000be8 <WriteCommand>

    WriteCommand(SSD1306_VCOM_DESELECT); // set vcomh
 8000cda:	20db      	movs	r0, #219	; 0xdb
 8000cdc:	f7ff ff84 	bl	8000be8 <WriteCommand>
    WriteCommand(0x20); //0x20,0.77xVcc
 8000ce0:	2020      	movs	r0, #32
 8000ce2:	f7ff ff81 	bl	8000be8 <WriteCommand>

    WriteCommand(SSD1306_SET_CHAR_REG); //DC-DC ENABLE
 8000ce6:	208d      	movs	r0, #141	; 0x8d
 8000ce8:	f7ff ff7e 	bl	8000be8 <WriteCommand>
    WriteCommand(0x14);
 8000cec:	2014      	movs	r0, #20
 8000cee:	f7ff ff7b 	bl	8000be8 <WriteCommand>
//Turn on display
    WriteCommand(SSD1306_DISPLAY_ON);//0xAF
 8000cf2:	20af      	movs	r0, #175	; 0xaf
 8000cf4:	f7ff ff78 	bl	8000be8 <WriteCommand>
//Clear screen
cleanScreen(Black);
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 f80f 	bl	8000d1c <cleanScreen>
//Update filling color
updateScreen();
 8000cfe:	f000 f831 	bl	8000d64 <updateScreen>

//Set default values in coordinates(0;0)
SSD1306.CurrentX = 0;
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <oledInit+0xcc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	801a      	strh	r2, [r3, #0]
SSD1306.CurrentY = 0;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <oledInit+0xcc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	805a      	strh	r2, [r3, #2]

//Change control parameter in structure.
SSD1306.Initialized = 1;
 8000d0e:	4b02      	ldr	r3, [pc, #8]	; (8000d18 <oledInit+0xcc>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	711a      	strb	r2, [r3, #4]

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000588 	.word	0x20000588

08000d1c <cleanScreen>:
/**
 * @brief Fills the screen buffer with a specific color.
 * @param color Color to fill the buffer.
 */
void cleanScreen(SSD1306_COLOR color)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
	uint32_t index;

	for (index = 0; index < sizeof(SSD1306_Buffer); index++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	e00d      	b.n	8000d48 <cleanScreen+0x2c>
	{
		SSD1306_Buffer[index] = (color == Black) ? 0x00 : 0xFF; //if we fill the buffer with 0x00 we set all bits on 0 (px off = white)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <cleanScreen+0x1a>
 8000d32:	2100      	movs	r1, #0
 8000d34:	e000      	b.n	8000d38 <cleanScreen+0x1c>
 8000d36:	21ff      	movs	r1, #255	; 0xff
 8000d38:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <cleanScreen+0x44>)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	460a      	mov	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < sizeof(SSD1306_Buffer); index++)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d4e:	d3ed      	bcc.n	8000d2c <cleanScreen+0x10>
																//If we fill the buffer with 0xFF we set all bits on 1 (pixels on = black)
	}
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000188 	.word	0x20000188

08000d64 <updateScreen>:

/**
 * @brief Updates the screen with the content of the buffer.
 */
void updateScreen()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	//must write data to each page of RAM. Screen height is 128px, according to data sheet thats equivalent to 16 pages. (128/8);
	uint8_t index;
	for(index = 0; index < SSD1306_HEIGHT/8; index++ )
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	71fb      	strb	r3, [r7, #7]
 8000d6e:	e016      	b.n	8000d9e <updateScreen+0x3a>
	{
		WriteCommand(0xB0 + index); //Set the curren RAM page address.
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	3b50      	subs	r3, #80	; 0x50
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff36 	bl	8000be8 <WriteCommand>
		WriteCommand(0x00);			//Set column address to 0 (No X offset)
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff ff33 	bl	8000be8 <WriteCommand>
		WriteCommand(0x10);			//Set higher nibble of column address to 0
 8000d82:	2010      	movs	r0, #16
 8000d84:	f7ff ff30 	bl	8000be8 <WriteCommand>
		WriteData(&SSD1306_Buffer[SSD1306_WIDTH*index],SSD1306_WIDTH);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	01db      	lsls	r3, r3, #7
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <updateScreen+0x4c>)
 8000d8e:	4413      	add	r3, r2
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff40 	bl	8000c18 <WriteData>
	for(index = 0; index < SSD1306_HEIGHT/8; index++ )
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b07      	cmp	r3, #7
 8000da2:	d9e5      	bls.n	8000d70 <updateScreen+0xc>

	}

}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000188 	.word	0x20000188

08000db4 <setPixel>:
 * @param x Horizontal coordinate of the pixel.
 * @param y Vertical coordinate of the pixel.
 * @param color Color of the pixel.
 */
void setPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	71bb      	strb	r3, [r7, #6]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	717b      	strb	r3, [r7, #5]
	//Check if coordinates (x,y) are inside limits.
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db3d      	blt.n	8000e4a <setPixel+0x96>
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	2b3f      	cmp	r3, #63	; 0x3f
 8000dd2:	d83a      	bhi.n	8000e4a <setPixel+0x96>
		return;
	}

	//We have 8 pixeles in evert byte of the buffer, it means that every byte represents 8 vertical pixels on the screen.
	//(y/8) gives us the number of the column. *WIDHT gives the position on the buffer. x gives us the horizontal coordinate. (we move exactly to the coord(x,y).
	if(color == White)
 8000dd4:	797b      	ldrb	r3, [r7, #5]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d11a      	bne.n	8000e10 <setPixel+0x5c>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8); // (y/8) divides "y" by 8 since each byte stores 8 vertical pixels.
 8000dda:	79fa      	ldrb	r2, [r7, #7]
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	08db      	lsrs	r3, r3, #3
 8000de0:	b2d8      	uxtb	r0, r3
 8000de2:	4603      	mov	r3, r0
 8000de4:	01db      	lsls	r3, r3, #7
 8000de6:	4413      	add	r3, r2
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <setPixel+0xa4>)
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	b25a      	sxtb	r2, r3
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	2101      	movs	r1, #1
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b259      	sxtb	r1, r3
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	4603      	mov	r3, r0
 8000e04:	01db      	lsls	r3, r3, #7
 8000e06:	4413      	add	r3, r2
 8000e08:	b2c9      	uxtb	r1, r1
 8000e0a:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <setPixel+0xa4>)
 8000e0c:	54d1      	strb	r1, [r2, r3]
 8000e0e:	e01d      	b.n	8000e4c <setPixel+0x98>
																	//It uses the residue (y&8) to determinate which bit inside the byte corresponds to the pixel in "y".
																	//|= turns the bit in 1, turns it on.
	}else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8)); //(1<< (y&8)) creates a mask with a bit in the correct position.
 8000e10:	79fa      	ldrb	r2, [r7, #7]
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	b2d8      	uxtb	r0, r3
 8000e18:	4603      	mov	r3, r0
 8000e1a:	01db      	lsls	r3, r3, #7
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <setPixel+0xa4>)
 8000e20:	5cd3      	ldrb	r3, [r2, r3]
 8000e22:	b25a      	sxtb	r2, r3
 8000e24:	79bb      	ldrb	r3, [r7, #6]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	4013      	ands	r3, r2
 8000e38:	b259      	sxtb	r1, r3
 8000e3a:	79fa      	ldrb	r2, [r7, #7]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	01db      	lsls	r3, r3, #7
 8000e40:	4413      	add	r3, r2
 8000e42:	b2c9      	uxtb	r1, r1
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <setPixel+0xa4>)
 8000e46:	54d1      	strb	r1, [r2, r3]
 8000e48:	e000      	b.n	8000e4c <setPixel+0x98>
		return;
 8000e4a:	bf00      	nop
																		// &= turns of the bit on the byte.
	}
}
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000188 	.word	0x20000188

08000e5c <WriteChar>:
 * @param character Character to write.
 * @param color Color of the character.
 * @return The written character or 0 if it couldn't be written.
 */
char WriteChar(char character, SSD1306_COLOR color)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	460a      	mov	r2, r1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	71bb      	strb	r3, [r7, #6]
	uint32_t i,b,j;

	//Check if it's valid:
	if(character < 32 || character > 126)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b1f      	cmp	r3, #31
 8000e70:	d902      	bls.n	8000e78 <WriteChar+0x1c>
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b7e      	cmp	r3, #126	; 0x7e
 8000e76:	d901      	bls.n	8000e7c <WriteChar+0x20>
	{
		return 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e074      	b.n	8000f66 <WriteChar+0x10a>
	}
	//Check space in current line:
	if(SSD1306_WIDTH < (SSD1306.CurrentX + Font_7x10.FontWidht) || SSD1306_HEIGHT < (SSD1306.CurrentY + Font_7x10.FontHeight) )
 8000e7c:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <WriteChar+0x114>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <WriteChar+0x118>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	2b80      	cmp	r3, #128	; 0x80
 8000e8a:	dc07      	bgt.n	8000e9c <WriteChar+0x40>
 8000e8c:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <WriteChar+0x114>)
 8000e8e:	885b      	ldrh	r3, [r3, #2]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <WriteChar+0x118>)
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	4413      	add	r3, r2
 8000e98:	2b40      	cmp	r3, #64	; 0x40
 8000e9a:	dd01      	ble.n	8000ea0 <WriteChar+0x44>
	{
		return 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	e062      	b.n	8000f66 <WriteChar+0x10a>
	}

//Lets write:
	for(i = 0; i < Font_7x10.FontHeight; i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	e04f      	b.n	8000f46 <WriteChar+0xea>
	{
		b = Font_7x10.data[(character - 32) * Font_7x10.FontHeight + i];
 8000ea6:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <WriteChar+0x118>)
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	3b20      	subs	r3, #32
 8000eae:	4931      	ldr	r1, [pc, #196]	; (8000f74 <WriteChar+0x118>)
 8000eb0:	7849      	ldrb	r1, [r1, #1]
 8000eb2:	fb01 f303 	mul.w	r3, r1, r3
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	440b      	add	r3, r1
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font_7x10.FontWidht; j++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	e034      	b.n	8000f34 <WriteChar+0xd8>
		{
			if ((b<<j) & 0x8000)
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d012      	beq.n	8000f00 <WriteChar+0xa4>
			{
				setPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <WriteChar+0x114>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b2d8      	uxtb	r0, r3
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <WriteChar+0x114>)
 8000eea:	885b      	ldrh	r3, [r3, #2]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	79ba      	ldrb	r2, [r7, #6]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff ff5b 	bl	8000db4 <setPixel>
 8000efe:	e016      	b.n	8000f2e <WriteChar+0xd2>
			} else
			{
				setPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <WriteChar+0x114>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b2d8      	uxtb	r0, r3
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <WriteChar+0x114>)
 8000f10:	885b      	ldrh	r3, [r3, #2]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	b2d9      	uxtb	r1, r3
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	f7ff ff43 	bl	8000db4 <setPixel>
		for(j=0; j<Font_7x10.FontWidht; j++)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	3301      	adds	r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <WriteChar+0x118>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d3c4      	bcc.n	8000eca <WriteChar+0x6e>
	for(i = 0; i < Font_7x10.FontHeight; i++)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <WriteChar+0x118>)
 8000f48:	785b      	ldrb	r3, [r3, #1]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d3a9      	bcc.n	8000ea6 <WriteChar+0x4a>
			}
		}
	}

//Move the cursor:
	SSD1306.CurrentX += Font_7x10.FontWidht;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <WriteChar+0x114>)
 8000f54:	881a      	ldrh	r2, [r3, #0]
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <WriteChar+0x118>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <WriteChar+0x114>)
 8000f62:	801a      	strh	r2, [r3, #0]

//Return written char for validation
	return character;
 8000f64:	79fb      	ldrb	r3, [r7, #7]

}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000588 	.word	0x20000588
 8000f74:	20000004 	.word	0x20000004

08000f78 <oledWriteString>:
 * @param string String of characters to write.
 * @param color Color of the string.
 * @return The first character that couldn't be written or the last character if all were written successfully.
 */
char oledWriteString(char* string, SSD1306_COLOR color)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
	while(*string)
 8000f84:	e012      	b.n	8000fac <oledWriteString+0x34>
	{
		if(WriteChar(*string, color) != *string)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff64 	bl	8000e5c <WriteChar>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d002      	beq.n	8000fa6 <oledWriteString+0x2e>
		{
			return *string; //Char could not be written.
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	e008      	b.n	8000fb8 <oledWriteString+0x40>
		}

		string++;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
	while(*string)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e8      	bne.n	8000f86 <oledWriteString+0xe>
	}
	return *string;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <oledSetCursor>:
/**
 * @brief Sets the cursor position on the screen.
 * @param x Horizontal cursor coordinate.
 * @param y Vertical cursor coordinate.
 */
void oledSetCursor(uint8_t x, uint8_t y){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460a      	mov	r2, r1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <oledSetCursor+0x2c>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <oledSetCursor+0x2c>)
 8000fde:	805a      	strh	r2, [r3, #2]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	20000588 	.word	0x20000588

08000ff0 <calculateElapsedTime>:

SSD1306_t ssd1306;


// Función para calcular y llenar la estructura chronosTime_t
void calculateElapsedTime(uint32_t timeMs, chronosTime_t *time) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
    time->hours = timeMs / 3600000;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a17      	ldr	r2, [pc, #92]	; (800105c <calculateElapsedTime+0x6c>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0d5b      	lsrs	r3, r3, #21
 8001004:	b2da      	uxtb	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	701a      	strb	r2, [r3, #0]
    time->minutes = (timeMs / 60000) % 60;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <calculateElapsedTime+0x70>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0b99      	lsrs	r1, r3, #14
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <calculateElapsedTime+0x74>)
 8001016:	fba3 2301 	umull	r2, r3, r3, r1
 800101a:	095a      	lsrs	r2, r3, #5
 800101c:	4613      	mov	r3, r2
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	1aca      	subs	r2, r1, r3
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	705a      	strb	r2, [r3, #1]
    time->seconds = (timeMs / 1000) % 60;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <calculateElapsedTime+0x78>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	0999      	lsrs	r1, r3, #6
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <calculateElapsedTime+0x74>)
 8001038:	fba3 2301 	umull	r2, r3, r3, r1
 800103c:	095a      	lsrs	r2, r3, #5
 800103e:	4613      	mov	r3, r2
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	1aca      	subs	r2, r1, r3
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	709a      	strb	r2, [r3, #2]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	95217cb1 	.word	0x95217cb1
 8001060:	45e7b273 	.word	0x45e7b273
 8001064:	88888889 	.word	0x88888889
 8001068:	10624dd3 	.word	0x10624dd3

0800106c <displayTimeOnScreen>:

// Mostrar el tiempo en pantalla
void displayTimeOnScreen(uint64_t time) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af02      	add	r7, sp, #8
 8001072:	e9c7 0100 	strd	r0, r1, [r7]
    chronosTime_t timeStruct;
    calculateElapsedTime(time, &timeStruct);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	f107 021c 	add.w	r2, r7, #28
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffb6 	bl	8000ff0 <calculateElapsedTime>

    char timeStr[20];
    snprintf(timeStr, sizeof(timeStr), "%02u:%02u:%02u", timeStruct.hours, timeStruct.minutes, timeStruct.seconds);
 8001084:	7f3b      	ldrb	r3, [r7, #28]
 8001086:	4619      	mov	r1, r3
 8001088:	7f7b      	ldrb	r3, [r7, #29]
 800108a:	7fba      	ldrb	r2, [r7, #30]
 800108c:	f107 0008 	add.w	r0, r7, #8
 8001090:	9201      	str	r2, [sp, #4]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	460b      	mov	r3, r1
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <displayTimeOnScreen+0x54>)
 8001098:	2114      	movs	r1, #20
 800109a:	f002 ffc3 	bl	8004024 <sniprintf>
    oledSetCursor(20, 40);
 800109e:	2128      	movs	r1, #40	; 0x28
 80010a0:	2014      	movs	r0, #20
 80010a2:	f7ff ff8d 	bl	8000fc0 <oledSetCursor>
    oledWriteString(timeStr, White);
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2101      	movs	r1, #1
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff63 	bl	8000f78 <oledWriteString>
    updateScreen();
 80010b2:	f7ff fe57 	bl	8000d64 <updateScreen>
}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	08004954 	.word	0x08004954

080010c4 <chronosFSM_init>:

void chronosFSM_init()
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

	currentState = CHRONOS_STATE_INIT;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <chronosFSM_init+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
	startTime = 0;
 80010ce:	490e      	ldr	r1, [pc, #56]	; (8001108 <chronosFSM_init+0x44>)
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c1 2300 	strd	r2, r3, [r1]
	pausedTime = 0;
 80010dc:	490b      	ldr	r1, [pc, #44]	; (800110c <chronosFSM_init+0x48>)
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	e9c1 2300 	strd	r2, r3, [r1]
	elapsedTime = 0;
 80010ea:	4909      	ldr	r1, [pc, #36]	; (8001110 <chronosFSM_init+0x4c>)
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000058e 	.word	0x2000058e
 8001108:	20000590 	.word	0x20000590
 800110c:	20000598 	.word	0x20000598
 8001110:	200005a0 	.word	0x200005a0

08001114 <chronosFSM_update>:

void chronosFSM_update(bool_t btn1Pressed, bool_t btn2Pressed, bool_t btn3Pressed) {
 8001114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001118:	b08c      	sub	sp, #48	; 0x30
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001122:	460b      	mov	r3, r1
 8001124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001128:	4613      	mov	r3, r2
 800112a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    uint64_t currentTime = HAL_GetTick();
 800112e:	f000 fb1d 	bl	800176c <HAL_GetTick>
 8001132:	4603      	mov	r3, r0
 8001134:	2200      	movs	r2, #0
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800113e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    switch (currentState) {
 8001142:	4bb8      	ldr	r3, [pc, #736]	; (8001424 <chronosFSM_update+0x310>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b04      	cmp	r3, #4
 8001148:	f200 8166 	bhi.w	8001418 <chronosFSM_update+0x304>
 800114c:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <chronosFSM_update+0x40>)
 800114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001152:	bf00      	nop
 8001154:	08001169 	.word	0x08001169
 8001158:	080011cf 	.word	0x080011cf
 800115c:	0800127d 	.word	0x0800127d
 8001160:	080012e9 	.word	0x080012e9
 8001164:	08001397 	.word	0x08001397
        case CHRONOS_STATE_INIT:
            cleanScreen(Black);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fdd7 	bl	8000d1c <cleanScreen>
            oledSetCursor(20, 0);
 800116e:	2100      	movs	r1, #0
 8001170:	2014      	movs	r0, #20
 8001172:	f7ff ff25 	bl	8000fc0 <oledSetCursor>
            oledWriteString("INSTRUCTIONS", White);
 8001176:	2101      	movs	r1, #1
 8001178:	48ab      	ldr	r0, [pc, #684]	; (8001428 <chronosFSM_update+0x314>)
 800117a:	f7ff fefd 	bl	8000f78 <oledWriteString>
            oledSetCursor(0,15);
 800117e:	210f      	movs	r1, #15
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff ff1d 	bl	8000fc0 <oledSetCursor>
            oledWriteString("BTN1: START", White);
 8001186:	2101      	movs	r1, #1
 8001188:	48a8      	ldr	r0, [pc, #672]	; (800142c <chronosFSM_update+0x318>)
 800118a:	f7ff fef5 	bl	8000f78 <oledWriteString>
            oledSetCursor(0,30);
 800118e:	211e      	movs	r1, #30
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff ff15 	bl	8000fc0 <oledSetCursor>
            oledWriteString("BTN2: PAUSE/RESUME", White);
 8001196:	2101      	movs	r1, #1
 8001198:	48a5      	ldr	r0, [pc, #660]	; (8001430 <chronosFSM_update+0x31c>)
 800119a:	f7ff feed 	bl	8000f78 <oledWriteString>
            oledSetCursor(0,45);
 800119e:	212d      	movs	r1, #45	; 0x2d
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ff0d 	bl	8000fc0 <oledSetCursor>
            oledWriteString("BTN3: STOP", White);
 80011a6:	2101      	movs	r1, #1
 80011a8:	48a2      	ldr	r0, [pc, #648]	; (8001434 <chronosFSM_update+0x320>)
 80011aa:	f7ff fee5 	bl	8000f78 <oledWriteString>
           updateScreen();
 80011ae:	f7ff fdd9 	bl	8000d64 <updateScreen>

            if (btn1Pressed) {
 80011b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 812d 	beq.w	8001416 <chronosFSM_update+0x302>
                currentState = CHRONOS_STATE_START;
 80011bc:	4b99      	ldr	r3, [pc, #612]	; (8001424 <chronosFSM_update+0x310>)
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
                startTime = currentTime;
 80011c2:	499d      	ldr	r1, [pc, #628]	; (8001438 <chronosFSM_update+0x324>)
 80011c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011c8:	e9c1 2300 	strd	r2, r3, [r1]
            }
            break;
 80011cc:	e123      	b.n	8001416 <chronosFSM_update+0x302>

        case CHRONOS_STATE_START:
            cleanScreen(Black);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fda4 	bl	8000d1c <cleanScreen>
            oledSetCursor(20, 0);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2014      	movs	r0, #20
 80011d8:	f7ff fef2 	bl	8000fc0 <oledSetCursor>
            oledWriteString("STARTED!", White);
 80011dc:	2101      	movs	r1, #1
 80011de:	4897      	ldr	r0, [pc, #604]	; (800143c <chronosFSM_update+0x328>)
 80011e0:	f7ff feca 	bl	8000f78 <oledWriteString>

            if (btn2Pressed) {
 80011e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <chronosFSM_update+0xea>
                currentState = CHRONOS_STATE_PAUSE;
 80011ec:	4b8d      	ldr	r3, [pc, #564]	; (8001424 <chronosFSM_update+0x310>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]
                pausedTime = elapsedTime;
 80011f2:	4b93      	ldr	r3, [pc, #588]	; (8001440 <chronosFSM_update+0x32c>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	4992      	ldr	r1, [pc, #584]	; (8001444 <chronosFSM_update+0x330>)
 80011fa:	e9c1 2300 	strd	r2, r3, [r1]
            }
            if (btn3Pressed) {
 80011fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <chronosFSM_update+0xf8>
                currentState = CHRONOS_STATE_STOP;
 8001206:	4b87      	ldr	r3, [pc, #540]	; (8001424 <chronosFSM_update+0x310>)
 8001208:	2204      	movs	r2, #4
 800120a:	701a      	strb	r2, [r3, #0]
            }
            if(!commingFromPause) {
 800120c:	4b8e      	ldr	r3, [pc, #568]	; (8001448 <chronosFSM_update+0x334>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f083 0301 	eor.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00f      	beq.n	800123a <chronosFSM_update+0x126>
                elapsedTime = currentTime - startTime;
 800121a:	4b87      	ldr	r3, [pc, #540]	; (8001438 <chronosFSM_update+0x324>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001224:	1a84      	subs	r4, r0, r2
 8001226:	61bc      	str	r4, [r7, #24]
 8001228:	eb61 0303 	sbc.w	r3, r1, r3
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	4b84      	ldr	r3, [pc, #528]	; (8001440 <chronosFSM_update+0x32c>)
 8001230:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001234:	e9c3 1200 	strd	r1, r2, [r3]
 8001238:	e00e      	b.n	8001258 <chronosFSM_update+0x144>
            } else {
                elapsedTime = currentTime - pausedAtTime;
 800123a:	4b84      	ldr	r3, [pc, #528]	; (800144c <chronosFSM_update+0x338>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001244:	1a84      	subs	r4, r0, r2
 8001246:	613c      	str	r4, [r7, #16]
 8001248:	eb61 0303 	sbc.w	r3, r1, r3
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <chronosFSM_update+0x32c>)
 8001250:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001254:	e9c3 1200 	strd	r1, r2, [r3]
            }
            oledSetCursor(0, 20);
 8001258:	2114      	movs	r1, #20
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff feb0 	bl	8000fc0 <oledSetCursor>
            oledWriteString("TIME:", White);
 8001260:	2101      	movs	r1, #1
 8001262:	487b      	ldr	r0, [pc, #492]	; (8001450 <chronosFSM_update+0x33c>)
 8001264:	f7ff fe88 	bl	8000f78 <oledWriteString>
            displayTimeOnScreen(elapsedTime);
 8001268:	4b75      	ldr	r3, [pc, #468]	; (8001440 <chronosFSM_update+0x32c>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fefb 	bl	800106c <displayTimeOnScreen>
            updateScreen();
 8001276:	f7ff fd75 	bl	8000d64 <updateScreen>
            break;
 800127a:	e0cd      	b.n	8001418 <chronosFSM_update+0x304>

        case CHRONOS_STATE_PAUSE:
            cleanScreen(Black);
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fd4d 	bl	8000d1c <cleanScreen>
            oledSetCursor(20, 0);
 8001282:	2100      	movs	r1, #0
 8001284:	2014      	movs	r0, #20
 8001286:	f7ff fe9b 	bl	8000fc0 <oledSetCursor>
            oledWriteString("PAUSED!", White);
 800128a:	2101      	movs	r1, #1
 800128c:	4871      	ldr	r0, [pc, #452]	; (8001454 <chronosFSM_update+0x340>)
 800128e:	f7ff fe73 	bl	8000f78 <oledWriteString>

            if (btn2Pressed) {
 8001292:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00a      	beq.n	80012b0 <chronosFSM_update+0x19c>
                currentState = CHRONOS_STATE_RESUME;
 800129a:	4b62      	ldr	r3, [pc, #392]	; (8001424 <chronosFSM_update+0x310>)
 800129c:	2203      	movs	r2, #3
 800129e:	701a      	strb	r2, [r3, #0]
                pausedAtTime = currentTime;  // Guarda el tiempo en el que se pauso.
 80012a0:	496a      	ldr	r1, [pc, #424]	; (800144c <chronosFSM_update+0x338>)
 80012a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012a6:	e9c1 2300 	strd	r2, r3, [r1]
                commingFromPause = true;
 80012aa:	4b67      	ldr	r3, [pc, #412]	; (8001448 <chronosFSM_update+0x334>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
            }
            if (btn3Pressed) {
 80012b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <chronosFSM_update+0x1b0>
                currentState = CHRONOS_STATE_STOP;
 80012b8:	4b5a      	ldr	r3, [pc, #360]	; (8001424 <chronosFSM_update+0x310>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	701a      	strb	r2, [r3, #0]
                stopFromPause = true;
 80012be:	4b66      	ldr	r3, [pc, #408]	; (8001458 <chronosFSM_update+0x344>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]

            }

            // Mostrar el tiempo que se detuvo en el estado de start (pausedTime)
            oledSetCursor(0, 20);
 80012c4:	2114      	movs	r1, #20
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fe7a 	bl	8000fc0 <oledSetCursor>
            oledWriteString("TIME:", White);
 80012cc:	2101      	movs	r1, #1
 80012ce:	4860      	ldr	r0, [pc, #384]	; (8001450 <chronosFSM_update+0x33c>)
 80012d0:	f7ff fe52 	bl	8000f78 <oledWriteString>
            displayTimeOnScreen(pausedTime);
 80012d4:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <chronosFSM_update+0x330>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fec5 	bl	800106c <displayTimeOnScreen>
           updateScreen();
 80012e2:	f7ff fd3f 	bl	8000d64 <updateScreen>
            break;
 80012e6:	e097      	b.n	8001418 <chronosFSM_update+0x304>

        case CHRONOS_STATE_RESUME:
            cleanScreen(Black);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fd17 	bl	8000d1c <cleanScreen>
            oledSetCursor(20, 0);
 80012ee:	2100      	movs	r1, #0
 80012f0:	2014      	movs	r0, #20
 80012f2:	f7ff fe65 	bl	8000fc0 <oledSetCursor>
            oledWriteString("RE-START!", White);
 80012f6:	2101      	movs	r1, #1
 80012f8:	4858      	ldr	r0, [pc, #352]	; (800145c <chronosFSM_update+0x348>)
 80012fa:	f7ff fe3d 	bl	8000f78 <oledWriteString>

            if (btn2Pressed) {
 80012fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001302:	2b00      	cmp	r3, #0
 8001304:	d019      	beq.n	800133a <chronosFSM_update+0x226>
                currentState = CHRONOS_STATE_PAUSE;
 8001306:	4b47      	ldr	r3, [pc, #284]	; (8001424 <chronosFSM_update+0x310>)
 8001308:	2202      	movs	r2, #2
 800130a:	701a      	strb	r2, [r3, #0]
                pausedTime += currentTime - pausedAtTime;  // Agregar el tiempo en pausa al tiempo pausado
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <chronosFSM_update+0x338>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001316:	ebb0 0802 	subs.w	r8, r0, r2
 800131a:	eb61 0903 	sbc.w	r9, r1, r3
 800131e:	4b49      	ldr	r3, [pc, #292]	; (8001444 <chronosFSM_update+0x330>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	eb18 0102 	adds.w	r1, r8, r2
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	eb49 0303 	adc.w	r3, r9, r3
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b44      	ldr	r3, [pc, #272]	; (8001444 <chronosFSM_update+0x330>)
 8001332:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001336:	e9c3 1200 	strd	r1, r2, [r3]
            }
            if (btn3Pressed) {
 800133a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <chronosFSM_update+0x23a>
                currentState = CHRONOS_STATE_STOP;
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <chronosFSM_update+0x310>)
 8001344:	2204      	movs	r2, #4
 8001346:	701a      	strb	r2, [r3, #0]
                stopFromPause = false;
 8001348:	4b43      	ldr	r3, [pc, #268]	; (8001458 <chronosFSM_update+0x344>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
            }

            elapsedTime = currentTime - startTime - pausedTime;  // Calcular tiempo total restando tiempo pausado
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <chronosFSM_update+0x324>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001358:	1a84      	subs	r4, r0, r2
 800135a:	eb61 0503 	sbc.w	r5, r1, r3
 800135e:	4b39      	ldr	r3, [pc, #228]	; (8001444 <chronosFSM_update+0x330>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	ebb4 0a02 	subs.w	sl, r4, r2
 8001368:	eb65 0b03 	sbc.w	fp, r5, r3
 800136c:	4b34      	ldr	r3, [pc, #208]	; (8001440 <chronosFSM_update+0x32c>)
 800136e:	e9c3 ab00 	strd	sl, fp, [r3]
            oledSetCursor(0, 20);
 8001372:	2114      	movs	r1, #20
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fe23 	bl	8000fc0 <oledSetCursor>
            oledWriteString("TIME:", White);
 800137a:	2101      	movs	r1, #1
 800137c:	4834      	ldr	r0, [pc, #208]	; (8001450 <chronosFSM_update+0x33c>)
 800137e:	f7ff fdfb 	bl	8000f78 <oledWriteString>
            displayTimeOnScreen(elapsedTime);
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <chronosFSM_update+0x32c>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fe6e 	bl	800106c <displayTimeOnScreen>
           updateScreen();
 8001390:	f7ff fce8 	bl	8000d64 <updateScreen>
            break;
 8001394:	e040      	b.n	8001418 <chronosFSM_update+0x304>

        case CHRONOS_STATE_STOP:
            cleanScreen(Black);
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff fcc0 	bl	8000d1c <cleanScreen>
            oledSetCursor(0, 0);
 800139c:	2100      	movs	r1, #0
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fe0e 	bl	8000fc0 <oledSetCursor>
            oledWriteString("STOPPED!", White);
 80013a4:	2101      	movs	r1, #1
 80013a6:	482e      	ldr	r0, [pc, #184]	; (8001460 <chronosFSM_update+0x34c>)
 80013a8:	f7ff fde6 	bl	8000f78 <oledWriteString>

            oledSetCursor(0, 20);
 80013ac:	2114      	movs	r1, #20
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fe06 	bl	8000fc0 <oledSetCursor>
            oledWriteString("FINAL TIME:", White);
 80013b4:	2101      	movs	r1, #1
 80013b6:	482b      	ldr	r0, [pc, #172]	; (8001464 <chronosFSM_update+0x350>)
 80013b8:	f7ff fdde 	bl	8000f78 <oledWriteString>
            if(stopFromPause){
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <chronosFSM_update+0x344>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d007      	beq.n	80013d4 <chronosFSM_update+0x2c0>
            	displayTimeOnScreen(pausedTime);
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <chronosFSM_update+0x330>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fe4d 	bl	800106c <displayTimeOnScreen>
 80013d2:	e00d      	b.n	80013f0 <chronosFSM_update+0x2dc>
            }else if(!stopFromPause){
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <chronosFSM_update+0x344>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f083 0301 	eor.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <chronosFSM_update+0x2dc>
            	displayTimeOnScreen(elapsedTime);
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <chronosFSM_update+0x32c>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fe3e 	bl	800106c <displayTimeOnScreen>
            }


            if (btn1Pressed) {
 80013f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <chronosFSM_update+0x2fc>
                chronosFSM_init();
 80013f8:	f7ff fe64 	bl	80010c4 <chronosFSM_init>
                pausedAtTime = 0;  // Reiniciar el tiempo pausado
 80013fc:	4913      	ldr	r1, [pc, #76]	; (800144c <chronosFSM_update+0x338>)
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
                commingFromPause = false;  // Reiniciar la bandera de pausa
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <chronosFSM_update+0x334>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
            }
            updateScreen();
 8001410:	f7ff fca8 	bl	8000d64 <updateScreen>
            break;
 8001414:	e000      	b.n	8001418 <chronosFSM_update+0x304>
            break;
 8001416:	bf00      	nop
    }

}
 8001418:	bf00      	nop
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001422:	bf00      	nop
 8001424:	2000058e 	.word	0x2000058e
 8001428:	08004964 	.word	0x08004964
 800142c:	08004974 	.word	0x08004974
 8001430:	08004980 	.word	0x08004980
 8001434:	08004994 	.word	0x08004994
 8001438:	20000590 	.word	0x20000590
 800143c:	080049a0 	.word	0x080049a0
 8001440:	200005a0 	.word	0x200005a0
 8001444:	20000598 	.word	0x20000598
 8001448:	200005b0 	.word	0x200005b0
 800144c:	200005a8 	.word	0x200005a8
 8001450:	080049ac 	.word	0x080049ac
 8001454:	080049b4 	.word	0x080049b4
 8001458:	200005b1 	.word	0x200005b1
 800145c:	080049bc 	.word	0x080049bc
 8001460:	080049c8 	.word	0x080049c8
 8001464:	080049d4 	.word	0x080049d4

08001468 <debounceFSM_init>:
 *         bloqueado en este estado hasta que se reinicie.
 *
 * @retval None
 */
void debounceFSM_init(debounceButton_t *button)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	GPIO_PinState buttonState = HAL_GPIO_ReadPin(button->port, button->pin);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	8a5b      	ldrh	r3, [r3, #18]
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f000 fcce 	bl	8001e1c <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	73fb      	strb	r3, [r7, #15]
	if(buttonState == GPIO_PIN_RESET)
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <debounceFSM_init+0x26>
	{
		error_Handler();
 800148a:	f000 f88a 	bl	80015a2 <error_Handler>
	}

	button->currentState = BUTTON_UP;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
	delayInit(&(button->debounceDelay), DEBOUNCE_TIME_MS);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3304      	adds	r3, #4
 8001498:	2128      	movs	r1, #40	; 0x28
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f887 	bl	80015ae <delayInit>
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <debounceFSM_update>:
 *         de estado necesarias de acuerdo a la técnica de anti-rebote implementada.
 *
 * @retval None
 */
void debounceFSM_update(debounceButton_t *button)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	GPIO_PinState buttonState = HAL_GPIO_ReadPin(button->port,button->pin);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	8a5b      	ldrh	r3, [r3, #18]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4610      	mov	r0, r2
 80014bc:	f000 fcae 	bl	8001e1c <HAL_GPIO_ReadPin>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]

	switch(button->currentState){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d849      	bhi.n	8001560 <debounceFSM_update+0xb8>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <debounceFSM_update+0x2c>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	080014ff 	.word	0x080014ff
 80014dc:	08001523 	.word	0x08001523
 80014e0:	0800153d 	.word	0x0800153d
	case BUTTON_UP:
		if (buttonState == GPIO_PIN_RESET)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d13e      	bne.n	8001568 <debounceFSM_update+0xc0>
		{
			button->currentState = BUTTON_FALLING;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
			delayWrite(&(button->debounceDelay), DEBOUNCE_TIME_MS);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3304      	adds	r3, #4
 80014f4:	2128      	movs	r1, #40	; 0x28
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f894 	bl	8001624 <delayWrite>
		}
	break;
 80014fc:	e034      	b.n	8001568 <debounceFSM_update+0xc0>

	case BUTTON_FALLING:
		if(delayRead(&(button->debounceDelay)))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3304      	adds	r3, #4
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f864 	bl	80015d0 <delayRead>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d02e      	beq.n	800156c <debounceFSM_update+0xc4>
		{
			button->currentState = BUTTON_DOWN;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2202      	movs	r2, #2
 8001512:	701a      	strb	r2, [r3, #0]
			button->pressedFlag = true;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	741a      	strb	r2, [r3, #16]
			button->isPressed = true;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	745a      	strb	r2, [r3, #17]
		}
	break;
 8001520:	e024      	b.n	800156c <debounceFSM_update+0xc4>

	case BUTTON_DOWN:
		if(buttonState == GPIO_PIN_SET)
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d123      	bne.n	8001570 <debounceFSM_update+0xc8>
		{
			button->currentState = BUTTON_RAISING;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2203      	movs	r2, #3
 800152c:	701a      	strb	r2, [r3, #0]
			delayWrite(&(button->debounceDelay), DEBOUNCE_TIME_MS);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3304      	adds	r3, #4
 8001532:	2128      	movs	r1, #40	; 0x28
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f875 	bl	8001624 <delayWrite>
		}
	break;
 800153a:	e019      	b.n	8001570 <debounceFSM_update+0xc8>

	case BUTTON_RAISING:
		if(delayRead(&(button->debounceDelay)))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3304      	adds	r3, #4
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f845 	bl	80015d0 <delayRead>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <debounceFSM_update+0xcc>
		{
			button->currentState = BUTTON_UP;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
			button->pressedFlag= false;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	741a      	strb	r2, [r3, #16]
			button->isPressed = true;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	745a      	strb	r2, [r3, #17]
		}
	break;
 800155e:	e009      	b.n	8001574 <debounceFSM_update+0xcc>

	default:
		button->currentState = BUTTON_UP;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
	break;
 8001566:	e006      	b.n	8001576 <debounceFSM_update+0xce>
	break;
 8001568:	bf00      	nop
 800156a:	e004      	b.n	8001576 <debounceFSM_update+0xce>
	break;
 800156c:	bf00      	nop
 800156e:	e002      	b.n	8001576 <debounceFSM_update+0xce>
	break;
 8001570:	bf00      	nop
 8001572:	e000      	b.n	8001576 <debounceFSM_update+0xce>
	break;
 8001574:	bf00      	nop

	}
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop

08001580 <readButton>:
 *         contrario, se devuelve `FALSE`.
 *
 * @return `TRUE` si el botón fue presionado, `FALSE` en caso contrario.
 */
bool_t readButton(debounceButton_t *button)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	bool_t isButtonPressed = button->pressedFlag;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7c1b      	ldrb	r3, [r3, #16]
 800158c:	73fb      	strb	r3, [r7, #15]
	button->pressedFlag = false;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	741a      	strb	r2, [r3, #16]
	return isButtonPressed;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <error_Handler>:
 *         de la MEF. Se recomienda agregar aquí el código de manejo de errores
 *         adecuado para el proyecto.
 * @retval None
 */
void error_Handler()
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LED_Toggle(LED_BUILTIN);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f002 fcf0 	bl	8003f8c <BSP_LED_Toggle>
  while (1)
 80015ac:	e7fe      	b.n	80015ac <error_Handler+0xa>

080015ae <delayInit>:
#include "API_delay.h"



void delayInit(delay_t *delay, tick_t duration)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
	if(delay == NULL || duration <= 0)
	{

	}

	delay->duration = duration;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	721a      	strb	r2, [r3, #8]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <delayRead>:


bool_t delayRead(delay_t *delay)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	if(!delay->running)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7a1b      	ldrb	r3, [r3, #8]
 80015dc:	f083 0301 	eor.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <delayRead+0x2a>
	{
		delay->startTime = HAL_GetTick();  	//Obtengo marca de tiempo
 80015e6:	f000 f8c1 	bl	800176c <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	601a      	str	r2, [r3, #0]
		delay->running = true;				//cambio estado de running.
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	721a      	strb	r2, [r3, #8]
		} else
		{
			return false;		//no se cumple retardo, sigo contando (run permanece en 1).
		}
	}
	return false; //agregado para solucionar: Warning: control reaches end of non-void function[-Wreturn-type] (tiene que haber retorno en todos los caminos posibles).
 80015f6:	2300      	movs	r3, #0
 80015f8:	e010      	b.n	800161c <delayRead+0x4c>
		tick_t tiempoActual = HAL_GetTick();
 80015fa:	f000 f8b7 	bl	800176c <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]
		if(tiempoActual - (delay->startTime) >= (delay->duration))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	1ad2      	subs	r2, r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	d304      	bcc.n	800161a <delayRead+0x4a>
			delay->running = false;  //se cumplio el retardo, cambio running.
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	721a      	strb	r2, [r3, #8]
			return true;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <delayRead+0x4c>
			return false;		//no se cumple retardo, sigo contando (run permanece en 1).
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <delayWrite>:

void delayWrite(delay_t *delay, tick_t duration)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	if(delay == NULL || duration <= 0)
	{

	}

	delay->duration = duration;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	605a      	str	r2, [r3, #4]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_UART_RxCpltCallback>:
	HAL_UART_Receive(&uartHandle, pstring, size, HAL_MAX_DELAY);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    if (huart == &uartHandle)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <HAL_UART_RxCpltCallback+0x54>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d11c      	bne.n	800168a <HAL_UART_RxCpltCallback+0x4a>
    {
        // Aquí procesa el byte recibido, por ejemplo, almacenándolo en el buffer
        if (rxBufferSize < RX_BUFFER_SIZE) // Asegurarse de no exceder el tamaño del buffer
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_UART_RxCpltCallback+0x58>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	2b31      	cmp	r3, #49	; 0x31
 8001656:	d80e      	bhi.n	8001676 <HAL_UART_RxCpltCallback+0x36>
        {
        	rxBuffer[rxBufferSize] = uartHandle.Instance->DR;
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_UART_RxCpltCallback+0x54>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6859      	ldr	r1, [r3, #4]
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_UART_RxCpltCallback+0x58>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	b2c9      	uxtb	r1, r1
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_UART_RxCpltCallback+0x5c>)
 8001668:	5499      	strb	r1, [r3, r2]
        	  rxBufferSize++;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_UART_RxCpltCallback+0x58>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_UART_RxCpltCallback+0x58>)
 8001674:	801a      	strh	r2, [r3, #0]
        }

        // Inicia una nueva recepción para el siguiente byte
        HAL_UART_Receive_IT(&uartHandle, &rxBuffer[rxBufferSize], 1);
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_UART_RxCpltCallback+0x58>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_UART_RxCpltCallback+0x5c>)
 800167e:	4413      	add	r3, r2
 8001680:	2201      	movs	r2, #1
 8001682:	4619      	mov	r1, r3
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <HAL_UART_RxCpltCallback+0x54>)
 8001686:	f001 fd56 	bl	8003136 <HAL_UART_Receive_IT>
    }
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200005b4 	.word	0x200005b4
 8001698:	2000062a 	.word	0x2000062a
 800169c:	200005f8 	.word	0x200005f8

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_Init+0x40>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_Init+0x40>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_Init+0x40>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 f94f 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff f922 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f967 	bl	80019d6 <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 f92f 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	20000010 	.word	0x20000010
 8001740:	2000000c 	.word	0x2000000c

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000010 	.word	0x20000010
 8001768:	2000062c 	.word	0x2000062c

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000062c 	.word	0x2000062c

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000010 	.word	0x20000010

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <__NVIC_EnableIRQ+0x38>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f7ff ff8e 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff29 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001994:	f7ff ff3e 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff8e 	bl	80018c0 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5d 	bl	800186c <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff31 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ffa2 	bl	8001928 <SysTick_Config>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff feb6 	bl	800176c <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d008      	beq.n	8001a20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e052      	b.n	8001ac6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0216 	bic.w	r2, r2, #22
 8001a2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d103      	bne.n	8001a50 <HAL_DMA_Abort+0x62>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0208 	bic.w	r2, r2, #8
 8001a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a70:	e013      	b.n	8001a9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a72:	f7ff fe7b 	bl	800176c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d90c      	bls.n	8001a9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e015      	b.n	8001ac6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e4      	bne.n	8001a72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	223f      	movs	r2, #63	; 0x3f
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d004      	beq.n	8001aec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e00c      	b.n	8001b06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2205      	movs	r2, #5
 8001af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e159      	b.n	8001de4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 8148 	bne.w	8001dde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d005      	beq.n	8001b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d130      	bne.n	8001bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 0201 	and.w	r2, r3, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d017      	beq.n	8001c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d123      	bne.n	8001c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	69b9      	ldr	r1, [r7, #24]
 8001c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a2 	beq.w	8001dde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b57      	ldr	r3, [pc, #348]	; (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a56      	ldr	r2, [pc, #344]	; (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb6:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_GPIO_Init+0x2ec>)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a49      	ldr	r2, [pc, #292]	; (8001e04 <HAL_GPIO_Init+0x2f0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x202>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a48      	ldr	r2, [pc, #288]	; (8001e08 <HAL_GPIO_Init+0x2f4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x1fe>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a47      	ldr	r2, [pc, #284]	; (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x1fa>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a46      	ldr	r2, [pc, #280]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x1f6>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a45      	ldr	r2, [pc, #276]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x1f2>
 8001d02:	2304      	movs	r3, #4
 8001d04:	e008      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x204>
 8001d16:	2300      	movs	r3, #0
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d28:	4935      	ldr	r1, [pc, #212]	; (8001e00 <HAL_GPIO_Init+0x2ec>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d36:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5a:	4a2f      	ldr	r2, [pc, #188]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d84:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dae:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd8:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f67f aea2 	bls.w	8001b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40013800 	.word	0x40013800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40020c00 	.word	0x40020c00
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40013c00 	.word	0x40013c00

08001e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e001      	b.n	8001e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e68:	e003      	b.n	8001e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e90:	887a      	ldrh	r2, [r7, #2]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	041a      	lsls	r2, r3, #16
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	619a      	str	r2, [r3, #24]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e12b      	b.n	800211e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fd46 	bl	800096c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f18:	f001 f898 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8001f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4a81      	ldr	r2, [pc, #516]	; (8002128 <HAL_I2C_Init+0x274>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d807      	bhi.n	8001f38 <HAL_I2C_Init+0x84>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a80      	ldr	r2, [pc, #512]	; (800212c <HAL_I2C_Init+0x278>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	bf94      	ite	ls
 8001f30:	2301      	movls	r3, #1
 8001f32:	2300      	movhi	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	e006      	b.n	8001f46 <HAL_I2C_Init+0x92>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4a7d      	ldr	r2, [pc, #500]	; (8002130 <HAL_I2C_Init+0x27c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	bf94      	ite	ls
 8001f40:	2301      	movls	r3, #1
 8001f42:	2300      	movhi	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0e7      	b.n	800211e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4a78      	ldr	r2, [pc, #480]	; (8002134 <HAL_I2C_Init+0x280>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0c9b      	lsrs	r3, r3, #18
 8001f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a6a      	ldr	r2, [pc, #424]	; (8002128 <HAL_I2C_Init+0x274>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d802      	bhi.n	8001f88 <HAL_I2C_Init+0xd4>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3301      	adds	r3, #1
 8001f86:	e009      	b.n	8001f9c <HAL_I2C_Init+0xe8>
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4a69      	ldr	r2, [pc, #420]	; (8002138 <HAL_I2C_Init+0x284>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	495c      	ldr	r1, [pc, #368]	; (8002128 <HAL_I2C_Init+0x274>)
 8001fb8:	428b      	cmp	r3, r1
 8001fba:	d819      	bhi.n	8001ff0 <HAL_I2C_Init+0x13c>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1e59      	subs	r1, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fca:	1c59      	adds	r1, r3, #1
 8001fcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fd0:	400b      	ands	r3, r1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_I2C_Init+0x138>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1e59      	subs	r1, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fea:	e051      	b.n	8002090 <HAL_I2C_Init+0x1dc>
 8001fec:	2304      	movs	r3, #4
 8001fee:	e04f      	b.n	8002090 <HAL_I2C_Init+0x1dc>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d111      	bne.n	800201c <HAL_I2C_Init+0x168>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e58      	subs	r0, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	440b      	add	r3, r1
 8002006:	fbb0 f3f3 	udiv	r3, r0, r3
 800200a:	3301      	adds	r3, #1
 800200c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	e012      	b.n	8002042 <HAL_I2C_Init+0x18e>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e58      	subs	r0, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	0099      	lsls	r1, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Init+0x196>
 8002046:	2301      	movs	r3, #1
 8002048:	e022      	b.n	8002090 <HAL_I2C_Init+0x1dc>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10e      	bne.n	8002070 <HAL_I2C_Init+0x1bc>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1e58      	subs	r0, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	440b      	add	r3, r1
 8002060:	fbb0 f3f3 	udiv	r3, r0, r3
 8002064:	3301      	adds	r3, #1
 8002066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206e:	e00f      	b.n	8002090 <HAL_I2C_Init+0x1dc>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1e58      	subs	r0, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	0099      	lsls	r1, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	fbb0 f3f3 	udiv	r3, r0, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	6809      	ldr	r1, [r1, #0]
 8002094:	4313      	orrs	r3, r2
 8002096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6911      	ldr	r1, [r2, #16]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68d2      	ldr	r2, [r2, #12]
 80020ca:	4311      	orrs	r1, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	000186a0 	.word	0x000186a0
 800212c:	001e847f 	.word	0x001e847f
 8002130:	003d08ff 	.word	0x003d08ff
 8002134:	431bde83 	.word	0x431bde83
 8002138:	10624dd3 	.word	0x10624dd3

0800213c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	461a      	mov	r2, r3
 800214a:	4603      	mov	r3, r0
 800214c:	817b      	strh	r3, [r7, #10]
 800214e:	460b      	mov	r3, r1
 8002150:	813b      	strh	r3, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002156:	f7ff fb09 	bl	800176c <HAL_GetTick>
 800215a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b20      	cmp	r3, #32
 8002166:	f040 80d9 	bne.w	800231c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2319      	movs	r3, #25
 8002170:	2201      	movs	r2, #1
 8002172:	496d      	ldr	r1, [pc, #436]	; (8002328 <HAL_I2C_Mem_Write+0x1ec>)
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f971 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002180:	2302      	movs	r3, #2
 8002182:	e0cc      	b.n	800231e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Mem_Write+0x56>
 800218e:	2302      	movs	r3, #2
 8002190:	e0c5      	b.n	800231e <HAL_I2C_Mem_Write+0x1e2>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d007      	beq.n	80021b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2221      	movs	r2, #33	; 0x21
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2240      	movs	r2, #64	; 0x40
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a3a      	ldr	r2, [r7, #32]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a4d      	ldr	r2, [pc, #308]	; (800232c <HAL_I2C_Mem_Write+0x1f0>)
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021fa:	88f8      	ldrh	r0, [r7, #6]
 80021fc:	893a      	ldrh	r2, [r7, #8]
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4603      	mov	r3, r0
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f890 	bl	8002330 <I2C_RequestMemoryWrite>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d052      	beq.n	80022bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e081      	b.n	800231e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f9f2 	bl	8002608 <I2C_WaitOnTXEFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00d      	beq.n	8002246 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	2b04      	cmp	r3, #4
 8002230:	d107      	bne.n	8002242 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002240:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e06b      	b.n	800231e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b04      	cmp	r3, #4
 8002282:	d11b      	bne.n	80022bc <HAL_I2C_Mem_Write+0x180>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	d017      	beq.n	80022bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1aa      	bne.n	800221a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f9de 	bl	800268a <I2C_WaitOnBTFFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d107      	bne.n	80022ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e016      	b.n	800231e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	00100002 	.word	0x00100002
 800232c:	ffff0000 	.word	0xffff0000

08002330 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	817b      	strh	r3, [r7, #10]
 8002342:	460b      	mov	r3, r1
 8002344:	813b      	strh	r3, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2200      	movs	r2, #0
 8002362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 f878 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00d      	beq.n	800238e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002380:	d103      	bne.n	800238a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e05f      	b.n	800244e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800238e:	897b      	ldrh	r3, [r7, #10]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800239c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	492d      	ldr	r1, [pc, #180]	; (8002458 <I2C_RequestMemoryWrite+0x128>)
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f8b0 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e04c      	b.n	800244e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	6a39      	ldr	r1, [r7, #32]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f91a 	bl	8002608 <I2C_WaitOnTXEFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d107      	bne.n	80023f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e02b      	b.n	800244e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023fc:	893b      	ldrh	r3, [r7, #8]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	611a      	str	r2, [r3, #16]
 8002406:	e021      	b.n	800244c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002408:	893b      	ldrh	r3, [r7, #8]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b29b      	uxth	r3, r3
 800240e:	b2da      	uxtb	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f8f4 	bl	8002608 <I2C_WaitOnTXEFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2b04      	cmp	r3, #4
 800242c:	d107      	bne.n	800243e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e005      	b.n	800244e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002442:	893b      	ldrh	r3, [r7, #8]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	00010002 	.word	0x00010002

0800245c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	e025      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d021      	beq.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7ff f979 	bl	800176c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d116      	bne.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e023      	b.n	8002502 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d10d      	bne.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	e00c      	b.n	80024fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d0b6      	beq.n	800246e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002518:	e051      	b.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002528:	d123      	bne.n	8002572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002538:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002542:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f043 0204 	orr.w	r2, r3, #4
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e046      	b.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d021      	beq.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257a:	f7ff f8f7 	bl	800176c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d116      	bne.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e020      	b.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10c      	bne.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4013      	ands	r3, r2
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf14      	ite	ne
 80025da:	2301      	movne	r3, #1
 80025dc:	2300      	moveq	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	e00b      	b.n	80025fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d18d      	bne.n	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002614:	e02d      	b.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f878 	bl	800270c <I2C_IsAcknowledgeFailed>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e02d      	b.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d021      	beq.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262e:	f7ff f89d 	bl	800176c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d116      	bne.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f043 0220 	orr.w	r2, r3, #32
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e007      	b.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d1ca      	bne.n	8002616 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002696:	e02d      	b.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f837 	bl	800270c <I2C_IsAcknowledgeFailed>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e02d      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d021      	beq.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b0:	f7ff f85c 	bl	800176c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d302      	bcc.n	80026c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d1ca      	bne.n	8002698 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002722:	d11b      	bne.n	800275c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800272c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0204 	orr.w	r2, r3, #4
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e267      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d075      	beq.n	8002876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278a:	4b88      	ldr	r3, [pc, #544]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d00c      	beq.n	80027b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002796:	4b85      	ldr	r3, [pc, #532]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d112      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a2:	4b82      	ldr	r3, [pc, #520]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ae:	d10b      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	4b7e      	ldr	r3, [pc, #504]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d05b      	beq.n	8002874 <HAL_RCC_OscConfig+0x108>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d157      	bne.n	8002874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e242      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d0:	d106      	bne.n	80027e0 <HAL_RCC_OscConfig+0x74>
 80027d2:	4b76      	ldr	r3, [pc, #472]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a75      	ldr	r2, [pc, #468]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xb0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x98>
 80027ea:	4b70      	ldr	r3, [pc, #448]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6f      	ldr	r2, [pc, #444]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a6c      	ldr	r2, [pc, #432]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xb0>
 8002804:	4b69      	ldr	r3, [pc, #420]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a68      	ldr	r2, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a65      	ldr	r2, [pc, #404]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe ffa2 	bl	800176c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe ff9e 	bl	800176c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e207      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xc0>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe ff8e 	bl	800176c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe ff8a 	bl	800176c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1f3      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b51      	ldr	r3, [pc, #324]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0xe8>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d063      	beq.n	800294a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x152>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1c7      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4937      	ldr	r1, [pc, #220]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <HAL_RCC_OscConfig+0x244>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe ff43 	bl	800176c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe ff3f 	bl	800176c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1a8      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4925      	ldr	r1, [pc, #148]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x244>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe ff22 	bl	800176c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe ff1e 	bl	800176c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e187      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d036      	beq.n	80029c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_RCC_OscConfig+0x248>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe ff02 	bl	800176c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe fefe 	bl	800176c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e167      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_OscConfig+0x240>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x200>
 800298a:	e01b      	b.n	80029c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_OscConfig+0x248>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7fe feeb 	bl	800176c <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	e00e      	b.n	80029b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299a:	f7fe fee7 	bl	800176c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d907      	bls.n	80029b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e150      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	42470000 	.word	0x42470000
 80029b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ea      	bne.n	800299a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8097 	beq.w	8002b00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b81      	ldr	r3, [pc, #516]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b7d      	ldr	r3, [pc, #500]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a7c      	ldr	r2, [pc, #496]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b7a      	ldr	r3, [pc, #488]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b77      	ldr	r3, [pc, #476]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d118      	bne.n	8002a40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0e:	4b74      	ldr	r3, [pc, #464]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a73      	ldr	r2, [pc, #460]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fea7 	bl	800176c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe fea3 	bl	800176c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e10c      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2ea>
 8002a48:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	4a63      	ldr	r2, [pc, #396]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	; 0x70
 8002a54:	e01c      	b.n	8002a90 <HAL_RCC_OscConfig+0x324>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x30c>
 8002a5e:	4b5f      	ldr	r3, [pc, #380]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a5e      	ldr	r2, [pc, #376]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6a:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a5b      	ldr	r2, [pc, #364]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0x324>
 8002a78:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a57      	ldr	r2, [pc, #348]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	4b55      	ldr	r3, [pc, #340]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a54      	ldr	r2, [pc, #336]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fe68 	bl	800176c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fe64 	bl	800176c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0cb      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ee      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x334>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fe52 	bl	800176c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe fe4e 	bl	800176c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0b5      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1ee      	bne.n	8002acc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af4:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	4a38      	ldr	r2, [pc, #224]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80a1 	beq.w	8002c4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d05c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d141      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe fe22 	bl	800176c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fe1e 	bl	800176c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e087      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	3b01      	subs	r3, #1
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	491b      	ldr	r1, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fdf7 	bl	800176c <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe fdf3 	bl	800176c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e05c      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x416>
 8002ba0:	e054      	b.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fde0 	bl	800176c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe fddc 	bl	800176c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e045      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x444>
 8002bce:	e03d      	b.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e038      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40007000 	.word	0x40007000
 8002be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_RCC_OscConfig+0x4ec>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d028      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d121      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d11a      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c18:	4013      	ands	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	3b01      	subs	r3, #1
 8002c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800

08002c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0cc      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d90c      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b8      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a58      	ldr	r2, [pc, #352]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	494d      	ldr	r1, [pc, #308]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d044      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d119      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e07f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e067      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4934      	ldr	r1, [pc, #208]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fd0e 	bl	800176c <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fe fd0a 	bl	800176c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e04f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d20c      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e032      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4916      	ldr	r1, [pc, #88]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	490e      	ldr	r1, [pc, #56]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002de2:	f000 f821 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	490a      	ldr	r1, [pc, #40]	; (8002e1c <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	5ccb      	ldrb	r3, [r1, r3]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fc6e 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	080049e0 	.word	0x080049e0
 8002e20:	20000000 	.word	0x20000000
 8002e24:	2000000c 	.word	0x2000000c

08002e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b094      	sub	sp, #80	; 0x50
 8002e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	647b      	str	r3, [r7, #68]	; 0x44
 8002e34:	2300      	movs	r3, #0
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e38:	2300      	movs	r3, #0
 8002e3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e40:	4b79      	ldr	r3, [pc, #484]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d00d      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x40>
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	f200 80e1 	bhi.w	8003014 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x34>
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d003      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5a:	e0db      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b73      	ldr	r3, [pc, #460]	; (800302c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e60:	e0db      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e62:	4b73      	ldr	r3, [pc, #460]	; (8003030 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e66:	e0d8      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e68:	4b6f      	ldr	r3, [pc, #444]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e72:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	2200      	movs	r2, #0
 8002e86:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
 8002e92:	2300      	movs	r3, #0
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
 8002e96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	f04f 0000 	mov.w	r0, #0
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	0159      	lsls	r1, r3, #5
 8002ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eac:	0150      	lsls	r0, r2, #5
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	1a51      	subs	r1, r2, r1
 8002eb6:	6139      	str	r1, [r7, #16]
 8002eb8:	4629      	mov	r1, r5
 8002eba:	eb63 0301 	sbc.w	r3, r3, r1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ecc:	4659      	mov	r1, fp
 8002ece:	018b      	lsls	r3, r1, #6
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	018a      	lsls	r2, r1, #6
 8002eda:	4651      	mov	r1, sl
 8002edc:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efa:	4690      	mov	r8, r2
 8002efc:	4699      	mov	r9, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	eb18 0303 	adds.w	r3, r8, r3
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	462b      	mov	r3, r5
 8002f08:	eb49 0303 	adc.w	r3, r9, r3
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	024b      	lsls	r3, r1, #9
 8002f1e:	4621      	mov	r1, r4
 8002f20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f24:	4621      	mov	r1, r4
 8002f26:	024a      	lsls	r2, r1, #9
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2e:	2200      	movs	r2, #0
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f38:	f7fd f9a2 	bl	8000280 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f44:	e058      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f46:	4b38      	ldr	r3, [pc, #224]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	099b      	lsrs	r3, r3, #6
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	4611      	mov	r1, r2
 8002f52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f56:	623b      	str	r3, [r7, #32]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	0159      	lsls	r1, r3, #5
 8002f6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f72:	0150      	lsls	r0, r2, #5
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4641      	mov	r1, r8
 8002f7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f7e:	4649      	mov	r1, r9
 8002f80:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f98:	ebb2 040a 	subs.w	r4, r2, sl
 8002f9c:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	00eb      	lsls	r3, r5, #3
 8002faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fae:	00e2      	lsls	r2, r4, #3
 8002fb0:	4614      	mov	r4, r2
 8002fb2:	461d      	mov	r5, r3
 8002fb4:	4643      	mov	r3, r8
 8002fb6:	18e3      	adds	r3, r4, r3
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	464b      	mov	r3, r9
 8002fbc:	eb45 0303 	adc.w	r3, r5, r3
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fce:	4629      	mov	r1, r5
 8002fd0:	028b      	lsls	r3, r1, #10
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd8:	4621      	mov	r1, r4
 8002fda:	028a      	lsls	r2, r1, #10
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	61fa      	str	r2, [r7, #28]
 8002fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fec:	f7fd f948 	bl	8000280 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	3301      	adds	r3, #1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800300a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003012:	e002      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetSysClockFreq+0x204>)
 8003016:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800301c:	4618      	mov	r0, r3
 800301e:	3750      	adds	r7, #80	; 0x50
 8003020:	46bd      	mov	sp, r7
 8003022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	00f42400 	.word	0x00f42400
 8003030:	007a1200 	.word	0x007a1200

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003050:	f7ff fff0 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0a9b      	lsrs	r3, r3, #10
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4903      	ldr	r1, [pc, #12]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	080049f0 	.word	0x080049f0

08003074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003078:	f7ff ffdc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0b5b      	lsrs	r3, r3, #13
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	080049f0 	.word	0x080049f0

0800309c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e03f      	b.n	800312e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd fc9a 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2224      	movs	r2, #36	; 0x24
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fcdf 	bl	8003aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	4613      	mov	r3, r2
 8003142:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b20      	cmp	r3, #32
 800314e:	d11d      	bne.n	800318c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_UART_Receive_IT+0x26>
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e016      	b.n	800318e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_UART_Receive_IT+0x38>
 800316a:	2302      	movs	r3, #2
 800316c:	e00f      	b.n	800318e <HAL_UART_Receive_IT+0x58>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	461a      	mov	r2, r3
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fab6 	bl	80036f4 <UART_Start_Receive_IT>
 8003188:	4603      	mov	r3, r0
 800318a:	e000      	b.n	800318e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b0ba      	sub	sp, #232	; 0xe8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_UART_IRQHandler+0x66>
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fb99 	bl	800392e <UART_Receive_IT>
      return;
 80031fc:	e256      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80de 	beq.w	80033c4 <HAL_UART_IRQHandler+0x22c>
 8003208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003218:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80d1 	beq.w	80033c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_UART_IRQHandler+0xae>
 800322e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0xd2>
 8003252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f043 0202 	orr.w	r2, r3, #2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
 8003276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d011      	beq.n	80032be <HAL_UART_IRQHandler+0x126>
 800329a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f043 0208 	orr.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 81ed 	beq.w	80036a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_UART_IRQHandler+0x14e>
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fb24 	bl	800392e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_UART_IRQHandler+0x17a>
 800330a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04f      	beq.n	80033b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fa2c 	bl	8003770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d141      	bne.n	80033aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800333c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3314      	adds	r3, #20
 800334e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003352:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800335e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800336a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1d9      	bne.n	8003326 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	2b00      	cmp	r3, #0
 8003378:	d013      	beq.n	80033a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	4a7d      	ldr	r2, [pc, #500]	; (8003574 <HAL_UART_IRQHandler+0x3dc>)
 8003380:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fba1 	bl	8001ace <HAL_DMA_Abort_IT>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800339c:	4610      	mov	r0, r2
 800339e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	e00e      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f990 	bl	80036c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	e00a      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f98c 	bl	80036c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e006      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f988 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033be:	e170      	b.n	80036a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	bf00      	nop
    return;
 80033c2:	e16e      	b.n	80036a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 814a 	bne.w	8003662 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8143 	beq.w	8003662 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 813c 	beq.w	8003662 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	f040 80b4 	bne.w	8003578 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800341c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8140 	beq.w	80036a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800342a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800342e:	429a      	cmp	r2, r3
 8003430:	f080 8139 	bcs.w	80036a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003446:	f000 8088 	beq.w	800355a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003468:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800347a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003482:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800348e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1d9      	bne.n	800344a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3314      	adds	r3, #20
 800349c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3314      	adds	r3, #20
 80034b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e1      	bne.n	8003496 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3314      	adds	r3, #20
 80034f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e3      	bne.n	80034d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352a:	f023 0310 	bic.w	r3, r3, #16
 800352e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800353c:	65ba      	str	r2, [r7, #88]	; 0x58
 800353e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800354a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e3      	bne.n	8003518 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fa4a 	bl	80019ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003562:	b29b      	uxth	r3, r3
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	b29b      	uxth	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8b6 	bl	80036dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003570:	e099      	b.n	80036a6 <HAL_UART_IRQHandler+0x50e>
 8003572:	bf00      	nop
 8003574:	08003837 	.word	0x08003837
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003580:	b29b      	uxth	r3, r3
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 808b 	beq.w	80036aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8086 	beq.w	80036aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035c2:	647a      	str	r2, [r7, #68]	; 0x44
 80035c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e3      	bne.n	800359e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3314      	adds	r3, #20
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	623b      	str	r3, [r7, #32]
   return(result);
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3314      	adds	r3, #20
 80035f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035fa:	633a      	str	r2, [r7, #48]	; 0x30
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e3      	bne.n	80035d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	60fb      	str	r3, [r7, #12]
   return(result);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0310 	bic.w	r3, r3, #16
 8003632:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	330c      	adds	r3, #12
 800363c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003640:	61fa      	str	r2, [r7, #28]
 8003642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	69b9      	ldr	r1, [r7, #24]
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	617b      	str	r3, [r7, #20]
   return(result);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e3      	bne.n	800361c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f83e 	bl	80036dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003660:	e023      	b.n	80036aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_UART_IRQHandler+0x4ea>
 800366e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8ef 	bl	800385e <UART_Transmit_IT>
    return;
 8003680:	e014      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00e      	beq.n	80036ac <HAL_UART_IRQHandler+0x514>
 800368e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f92f 	bl	80038fe <UART_EndTransmit_IT>
    return;
 80036a0:	e004      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
    return;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
      return;
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
      return;
 80036aa:	bf00      	nop
  }
}
 80036ac:	37e8      	adds	r7, #232	; 0xe8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop

080036b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2222      	movs	r2, #34	; 0x22
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003740:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0220 	orr.w	r2, r2, #32
 8003760:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b095      	sub	sp, #84	; 0x54
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	330c      	adds	r3, #12
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800378e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003798:	643a      	str	r2, [r7, #64]	; 0x40
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800379e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e5      	bne.n	8003778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3314      	adds	r3, #20
 80037b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3314      	adds	r3, #20
 80037ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e5      	bne.n	80037ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d119      	bne.n	800381c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f023 0310 	bic.w	r3, r3, #16
 80037fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	330c      	adds	r3, #12
 8003806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003808:	61ba      	str	r2, [r7, #24]
 800380a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6979      	ldr	r1, [r7, #20]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	613b      	str	r3, [r7, #16]
   return(result);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e5      	bne.n	80037e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
}
 800382a:	bf00      	nop
 800382c:	3754      	adds	r7, #84	; 0x54
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff ff39 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b21      	cmp	r3, #33	; 0x21
 8003870:	d13e      	bne.n	80038f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387a:	d114      	bne.n	80038a6 <UART_Transmit_IT+0x48>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d110      	bne.n	80038a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003898:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	1c9a      	adds	r2, r3, #2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	621a      	str	r2, [r3, #32]
 80038a4:	e008      	b.n	80038b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	1c59      	adds	r1, r3, #1
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6211      	str	r1, [r2, #32]
 80038b0:	781a      	ldrb	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4619      	mov	r1, r3
 80038c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff fec8 	bl	80036b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b08c      	sub	sp, #48	; 0x30
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b22      	cmp	r3, #34	; 0x22
 8003940:	f040 80ab 	bne.w	8003a9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394c:	d117      	bne.n	800397e <UART_Receive_IT+0x50>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d113      	bne.n	800397e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	b29b      	uxth	r3, r3
 8003968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396c:	b29a      	uxth	r2, r3
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	1c9a      	adds	r2, r3, #2
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
 800397c:	e026      	b.n	80039cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003990:	d007      	beq.n	80039a2 <UART_Receive_IT+0x74>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <UART_Receive_IT+0x82>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e008      	b.n	80039c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4619      	mov	r1, r3
 80039da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d15a      	bne.n	8003a96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0220 	bic.w	r2, r2, #32
 80039ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d135      	bne.n	8003a8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	613b      	str	r3, [r7, #16]
   return(result);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f023 0310 	bic.w	r3, r3, #16
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	623a      	str	r2, [r7, #32]
 8003a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	69f9      	ldr	r1, [r7, #28]
 8003a4c:	6a3a      	ldr	r2, [r7, #32]
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e5      	bne.n	8003a26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d10a      	bne.n	8003a7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a82:	4619      	mov	r1, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fe29 	bl	80036dc <HAL_UARTEx_RxEventCallback>
 8003a8a:	e002      	b.n	8003a92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7fd fdd7 	bl	8001640 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e002      	b.n	8003a9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
  }
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3730      	adds	r7, #48	; 0x30
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b0c0      	sub	sp, #256	; 0x100
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac0:	68d9      	ldr	r1, [r3, #12]
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	ea40 0301 	orr.w	r3, r0, r1
 8003acc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003afc:	f021 010c 	bic.w	r1, r1, #12
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1e:	6999      	ldr	r1, [r3, #24]
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	ea40 0301 	orr.w	r3, r0, r1
 8003b2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b8f      	ldr	r3, [pc, #572]	; (8003d70 <UART_SetConfig+0x2cc>)
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d005      	beq.n	8003b44 <UART_SetConfig+0xa0>
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b8d      	ldr	r3, [pc, #564]	; (8003d74 <UART_SetConfig+0x2d0>)
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d104      	bne.n	8003b4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b44:	f7ff fa96 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8003b48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b4c:	e003      	b.n	8003b56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b4e:	f7ff fa7d 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8003b52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b60:	f040 810c 	bne.w	8003d7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b76:	4622      	mov	r2, r4
 8003b78:	462b      	mov	r3, r5
 8003b7a:	1891      	adds	r1, r2, r2
 8003b7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b7e:	415b      	adcs	r3, r3
 8003b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b86:	4621      	mov	r1, r4
 8003b88:	eb12 0801 	adds.w	r8, r2, r1
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	eb43 0901 	adc.w	r9, r3, r1
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ba6:	4690      	mov	r8, r2
 8003ba8:	4699      	mov	r9, r3
 8003baa:	4623      	mov	r3, r4
 8003bac:	eb18 0303 	adds.w	r3, r8, r3
 8003bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bb4:	462b      	mov	r3, r5
 8003bb6:	eb49 0303 	adc.w	r3, r9, r3
 8003bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	18db      	adds	r3, r3, r3
 8003bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003bd8:	4613      	mov	r3, r2
 8003bda:	eb42 0303 	adc.w	r3, r2, r3
 8003bde:	657b      	str	r3, [r7, #84]	; 0x54
 8003be0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003be4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003be8:	f7fc fb4a 	bl	8000280 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <UART_SetConfig+0x2d4>)
 8003bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	011c      	lsls	r4, r3, #4
 8003bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	1891      	adds	r1, r2, r2
 8003c12:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c14:	415b      	adcs	r3, r3
 8003c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c22:	4649      	mov	r1, r9
 8003c24:	eb43 0b01 	adc.w	fp, r3, r1
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c3c:	4692      	mov	sl, r2
 8003c3e:	469b      	mov	fp, r3
 8003c40:	4643      	mov	r3, r8
 8003c42:	eb1a 0303 	adds.w	r3, sl, r3
 8003c46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	18db      	adds	r3, r3, r3
 8003c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c6e:	4613      	mov	r3, r2
 8003c70:	eb42 0303 	adc.w	r3, r2, r3
 8003c74:	647b      	str	r3, [r7, #68]	; 0x44
 8003c76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c7e:	f7fc faff 	bl	8000280 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <UART_SetConfig+0x2d4>)
 8003c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2264      	movs	r2, #100	; 0x64
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	1acb      	subs	r3, r1, r3
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <UART_SetConfig+0x2d4>)
 8003ca0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cac:	441c      	add	r4, r3
 8003cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	1891      	adds	r1, r2, r2
 8003cc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cc8:	415b      	adcs	r3, r3
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ccc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	1851      	adds	r1, r2, r1
 8003cd4:	6339      	str	r1, [r7, #48]	; 0x30
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	414b      	adcs	r3, r1
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ce8:	4659      	mov	r1, fp
 8003cea:	00cb      	lsls	r3, r1, #3
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	00ca      	lsls	r2, r1, #3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d04:	464b      	mov	r3, r9
 8003d06:	460a      	mov	r2, r1
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d24:	460b      	mov	r3, r1
 8003d26:	18db      	adds	r3, r3, r3
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	eb42 0303 	adc.w	r3, r2, r3
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d3a:	f7fc faa1 	bl	8000280 <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <UART_SetConfig+0x2d4>)
 8003d44:	fba3 1302 	umull	r1, r3, r3, r2
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	2164      	movs	r1, #100	; 0x64
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	3332      	adds	r3, #50	; 0x32
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <UART_SetConfig+0x2d4>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	f003 0207 	and.w	r2, r3, #7
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4422      	add	r2, r4
 8003d6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d6c:	e105      	b.n	8003f7a <UART_SetConfig+0x4d6>
 8003d6e:	bf00      	nop
 8003d70:	40011000 	.word	0x40011000
 8003d74:	40011400 	.word	0x40011400
 8003d78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d8e:	4642      	mov	r2, r8
 8003d90:	464b      	mov	r3, r9
 8003d92:	1891      	adds	r1, r2, r2
 8003d94:	6239      	str	r1, [r7, #32]
 8003d96:	415b      	adcs	r3, r3
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d9e:	4641      	mov	r1, r8
 8003da0:	1854      	adds	r4, r2, r1
 8003da2:	4649      	mov	r1, r9
 8003da4:	eb43 0501 	adc.w	r5, r3, r1
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	00eb      	lsls	r3, r5, #3
 8003db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db6:	00e2      	lsls	r2, r4, #3
 8003db8:	4614      	mov	r4, r2
 8003dba:	461d      	mov	r5, r3
 8003dbc:	4643      	mov	r3, r8
 8003dbe:	18e3      	adds	r3, r4, r3
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	eb45 0303 	adc.w	r3, r5, r3
 8003dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dea:	4629      	mov	r1, r5
 8003dec:	008b      	lsls	r3, r1, #2
 8003dee:	4621      	mov	r1, r4
 8003df0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df4:	4621      	mov	r1, r4
 8003df6:	008a      	lsls	r2, r1, #2
 8003df8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dfc:	f7fc fa40 	bl	8000280 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4b60      	ldr	r3, [pc, #384]	; (8003f88 <UART_SetConfig+0x4e4>)
 8003e06:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	011c      	lsls	r4, r3, #4
 8003e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e20:	4642      	mov	r2, r8
 8003e22:	464b      	mov	r3, r9
 8003e24:	1891      	adds	r1, r2, r2
 8003e26:	61b9      	str	r1, [r7, #24]
 8003e28:	415b      	adcs	r3, r3
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e30:	4641      	mov	r1, r8
 8003e32:	1851      	adds	r1, r2, r1
 8003e34:	6139      	str	r1, [r7, #16]
 8003e36:	4649      	mov	r1, r9
 8003e38:	414b      	adcs	r3, r1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e48:	4659      	mov	r1, fp
 8003e4a:	00cb      	lsls	r3, r1, #3
 8003e4c:	4651      	mov	r1, sl
 8003e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e52:	4651      	mov	r1, sl
 8003e54:	00ca      	lsls	r2, r1, #3
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e64:	464b      	mov	r3, r9
 8003e66:	460a      	mov	r2, r1
 8003e68:	eb42 0303 	adc.w	r3, r2, r3
 8003e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e88:	4649      	mov	r1, r9
 8003e8a:	008b      	lsls	r3, r1, #2
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e92:	4641      	mov	r1, r8
 8003e94:	008a      	lsls	r2, r1, #2
 8003e96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e9a:	f7fc f9f1 	bl	8000280 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <UART_SetConfig+0x4e4>)
 8003ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	2164      	movs	r1, #100	; 0x64
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	3332      	adds	r3, #50	; 0x32
 8003eb6:	4a34      	ldr	r2, [pc, #208]	; (8003f88 <UART_SetConfig+0x4e4>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec2:	441c      	add	r4, r3
 8003ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ec8:	2200      	movs	r2, #0
 8003eca:	673b      	str	r3, [r7, #112]	; 0x70
 8003ecc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ece:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ed2:	4642      	mov	r2, r8
 8003ed4:	464b      	mov	r3, r9
 8003ed6:	1891      	adds	r1, r2, r2
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	415b      	adcs	r3, r3
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	1851      	adds	r1, r2, r1
 8003ee6:	6039      	str	r1, [r7, #0]
 8003ee8:	4649      	mov	r1, r9
 8003eea:	414b      	adcs	r3, r1
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003efa:	4659      	mov	r1, fp
 8003efc:	00cb      	lsls	r3, r1, #3
 8003efe:	4651      	mov	r1, sl
 8003f00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f04:	4651      	mov	r1, sl
 8003f06:	00ca      	lsls	r2, r1, #3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4642      	mov	r2, r8
 8003f10:	189b      	adds	r3, r3, r2
 8003f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f14:	464b      	mov	r3, r9
 8003f16:	460a      	mov	r2, r1
 8003f18:	eb42 0303 	adc.w	r3, r2, r3
 8003f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	663b      	str	r3, [r7, #96]	; 0x60
 8003f28:	667a      	str	r2, [r7, #100]	; 0x64
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f36:	4649      	mov	r1, r9
 8003f38:	008b      	lsls	r3, r1, #2
 8003f3a:	4641      	mov	r1, r8
 8003f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f40:	4641      	mov	r1, r8
 8003f42:	008a      	lsls	r2, r1, #2
 8003f44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f48:	f7fc f99a 	bl	8000280 <__aeabi_uldivmod>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <UART_SetConfig+0x4e4>)
 8003f52:	fba3 1302 	umull	r1, r3, r3, r2
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	2164      	movs	r1, #100	; 0x64
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	3332      	adds	r3, #50	; 0x32
 8003f64:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <UART_SetConfig+0x4e4>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4422      	add	r2, r4
 8003f78:	609a      	str	r2, [r3, #8]
}
 8003f7a:	bf00      	nop
 8003f7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f86:	bf00      	nop
 8003f88:	51eb851f 	.word	0x51eb851f

08003f8c <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <BSP_LED_Toggle+0x2c>)
 8003f9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <BSP_LED_Toggle+0x30>)
 8003fa2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f7fd ff68 	bl	8001e7e <HAL_GPIO_TogglePin>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000014 	.word	0x20000014
 8003fbc:	08005164 	.word	0x08005164

08003fc0 <__errno>:
 8003fc0:	4b01      	ldr	r3, [pc, #4]	; (8003fc8 <__errno+0x8>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000020 	.word	0x20000020

08003fcc <__libc_init_array>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4d0d      	ldr	r5, [pc, #52]	; (8004004 <__libc_init_array+0x38>)
 8003fd0:	4c0d      	ldr	r4, [pc, #52]	; (8004008 <__libc_init_array+0x3c>)
 8003fd2:	1b64      	subs	r4, r4, r5
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	2600      	movs	r6, #0
 8003fd8:	42a6      	cmp	r6, r4
 8003fda:	d109      	bne.n	8003ff0 <__libc_init_array+0x24>
 8003fdc:	4d0b      	ldr	r5, [pc, #44]	; (800400c <__libc_init_array+0x40>)
 8003fde:	4c0c      	ldr	r4, [pc, #48]	; (8004010 <__libc_init_array+0x44>)
 8003fe0:	f000 fca2 	bl	8004928 <_init>
 8003fe4:	1b64      	subs	r4, r4, r5
 8003fe6:	10a4      	asrs	r4, r4, #2
 8003fe8:	2600      	movs	r6, #0
 8003fea:	42a6      	cmp	r6, r4
 8003fec:	d105      	bne.n	8003ffa <__libc_init_array+0x2e>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff4:	4798      	blx	r3
 8003ff6:	3601      	adds	r6, #1
 8003ff8:	e7ee      	b.n	8003fd8 <__libc_init_array+0xc>
 8003ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffe:	4798      	blx	r3
 8004000:	3601      	adds	r6, #1
 8004002:	e7f2      	b.n	8003fea <__libc_init_array+0x1e>
 8004004:	080051a8 	.word	0x080051a8
 8004008:	080051a8 	.word	0x080051a8
 800400c:	080051a8 	.word	0x080051a8
 8004010:	080051ac 	.word	0x080051ac

08004014 <memset>:
 8004014:	4402      	add	r2, r0
 8004016:	4603      	mov	r3, r0
 8004018:	4293      	cmp	r3, r2
 800401a:	d100      	bne.n	800401e <memset+0xa>
 800401c:	4770      	bx	lr
 800401e:	f803 1b01 	strb.w	r1, [r3], #1
 8004022:	e7f9      	b.n	8004018 <memset+0x4>

08004024 <sniprintf>:
 8004024:	b40c      	push	{r2, r3}
 8004026:	b530      	push	{r4, r5, lr}
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <sniprintf+0x64>)
 800402a:	1e0c      	subs	r4, r1, #0
 800402c:	681d      	ldr	r5, [r3, #0]
 800402e:	b09d      	sub	sp, #116	; 0x74
 8004030:	da08      	bge.n	8004044 <sniprintf+0x20>
 8004032:	238b      	movs	r3, #139	; 0x8b
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	f04f 30ff 	mov.w	r0, #4294967295
 800403a:	b01d      	add	sp, #116	; 0x74
 800403c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004040:	b002      	add	sp, #8
 8004042:	4770      	bx	lr
 8004044:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004048:	f8ad 3014 	strh.w	r3, [sp, #20]
 800404c:	bf14      	ite	ne
 800404e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004052:	4623      	moveq	r3, r4
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	9307      	str	r3, [sp, #28]
 8004058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800405c:	9002      	str	r0, [sp, #8]
 800405e:	9006      	str	r0, [sp, #24]
 8004060:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004064:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004066:	ab21      	add	r3, sp, #132	; 0x84
 8004068:	a902      	add	r1, sp, #8
 800406a:	4628      	mov	r0, r5
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	f000 f869 	bl	8004144 <_svfiprintf_r>
 8004072:	1c43      	adds	r3, r0, #1
 8004074:	bfbc      	itt	lt
 8004076:	238b      	movlt	r3, #139	; 0x8b
 8004078:	602b      	strlt	r3, [r5, #0]
 800407a:	2c00      	cmp	r4, #0
 800407c:	d0dd      	beq.n	800403a <sniprintf+0x16>
 800407e:	9b02      	ldr	r3, [sp, #8]
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	e7d9      	b.n	800403a <sniprintf+0x16>
 8004086:	bf00      	nop
 8004088:	20000020 	.word	0x20000020

0800408c <__ssputs_r>:
 800408c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	688e      	ldr	r6, [r1, #8]
 8004092:	429e      	cmp	r6, r3
 8004094:	4682      	mov	sl, r0
 8004096:	460c      	mov	r4, r1
 8004098:	4690      	mov	r8, r2
 800409a:	461f      	mov	r7, r3
 800409c:	d838      	bhi.n	8004110 <__ssputs_r+0x84>
 800409e:	898a      	ldrh	r2, [r1, #12]
 80040a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040a4:	d032      	beq.n	800410c <__ssputs_r+0x80>
 80040a6:	6825      	ldr	r5, [r4, #0]
 80040a8:	6909      	ldr	r1, [r1, #16]
 80040aa:	eba5 0901 	sub.w	r9, r5, r1
 80040ae:	6965      	ldr	r5, [r4, #20]
 80040b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040b8:	3301      	adds	r3, #1
 80040ba:	444b      	add	r3, r9
 80040bc:	106d      	asrs	r5, r5, #1
 80040be:	429d      	cmp	r5, r3
 80040c0:	bf38      	it	cc
 80040c2:	461d      	movcc	r5, r3
 80040c4:	0553      	lsls	r3, r2, #21
 80040c6:	d531      	bpl.n	800412c <__ssputs_r+0xa0>
 80040c8:	4629      	mov	r1, r5
 80040ca:	f000 fb63 	bl	8004794 <_malloc_r>
 80040ce:	4606      	mov	r6, r0
 80040d0:	b950      	cbnz	r0, 80040e8 <__ssputs_r+0x5c>
 80040d2:	230c      	movs	r3, #12
 80040d4:	f8ca 3000 	str.w	r3, [sl]
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040de:	81a3      	strh	r3, [r4, #12]
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295
 80040e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e8:	6921      	ldr	r1, [r4, #16]
 80040ea:	464a      	mov	r2, r9
 80040ec:	f000 fabe 	bl	800466c <memcpy>
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	6126      	str	r6, [r4, #16]
 80040fe:	6165      	str	r5, [r4, #20]
 8004100:	444e      	add	r6, r9
 8004102:	eba5 0509 	sub.w	r5, r5, r9
 8004106:	6026      	str	r6, [r4, #0]
 8004108:	60a5      	str	r5, [r4, #8]
 800410a:	463e      	mov	r6, r7
 800410c:	42be      	cmp	r6, r7
 800410e:	d900      	bls.n	8004112 <__ssputs_r+0x86>
 8004110:	463e      	mov	r6, r7
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	4632      	mov	r2, r6
 8004116:	4641      	mov	r1, r8
 8004118:	f000 fab6 	bl	8004688 <memmove>
 800411c:	68a3      	ldr	r3, [r4, #8]
 800411e:	1b9b      	subs	r3, r3, r6
 8004120:	60a3      	str	r3, [r4, #8]
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	4433      	add	r3, r6
 8004126:	6023      	str	r3, [r4, #0]
 8004128:	2000      	movs	r0, #0
 800412a:	e7db      	b.n	80040e4 <__ssputs_r+0x58>
 800412c:	462a      	mov	r2, r5
 800412e:	f000 fba5 	bl	800487c <_realloc_r>
 8004132:	4606      	mov	r6, r0
 8004134:	2800      	cmp	r0, #0
 8004136:	d1e1      	bne.n	80040fc <__ssputs_r+0x70>
 8004138:	6921      	ldr	r1, [r4, #16]
 800413a:	4650      	mov	r0, sl
 800413c:	f000 fabe 	bl	80046bc <_free_r>
 8004140:	e7c7      	b.n	80040d2 <__ssputs_r+0x46>
	...

08004144 <_svfiprintf_r>:
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	4698      	mov	r8, r3
 800414a:	898b      	ldrh	r3, [r1, #12]
 800414c:	061b      	lsls	r3, r3, #24
 800414e:	b09d      	sub	sp, #116	; 0x74
 8004150:	4607      	mov	r7, r0
 8004152:	460d      	mov	r5, r1
 8004154:	4614      	mov	r4, r2
 8004156:	d50e      	bpl.n	8004176 <_svfiprintf_r+0x32>
 8004158:	690b      	ldr	r3, [r1, #16]
 800415a:	b963      	cbnz	r3, 8004176 <_svfiprintf_r+0x32>
 800415c:	2140      	movs	r1, #64	; 0x40
 800415e:	f000 fb19 	bl	8004794 <_malloc_r>
 8004162:	6028      	str	r0, [r5, #0]
 8004164:	6128      	str	r0, [r5, #16]
 8004166:	b920      	cbnz	r0, 8004172 <_svfiprintf_r+0x2e>
 8004168:	230c      	movs	r3, #12
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	f04f 30ff 	mov.w	r0, #4294967295
 8004170:	e0d1      	b.n	8004316 <_svfiprintf_r+0x1d2>
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	616b      	str	r3, [r5, #20]
 8004176:	2300      	movs	r3, #0
 8004178:	9309      	str	r3, [sp, #36]	; 0x24
 800417a:	2320      	movs	r3, #32
 800417c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004180:	f8cd 800c 	str.w	r8, [sp, #12]
 8004184:	2330      	movs	r3, #48	; 0x30
 8004186:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004330 <_svfiprintf_r+0x1ec>
 800418a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800418e:	f04f 0901 	mov.w	r9, #1
 8004192:	4623      	mov	r3, r4
 8004194:	469a      	mov	sl, r3
 8004196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800419a:	b10a      	cbz	r2, 80041a0 <_svfiprintf_r+0x5c>
 800419c:	2a25      	cmp	r2, #37	; 0x25
 800419e:	d1f9      	bne.n	8004194 <_svfiprintf_r+0x50>
 80041a0:	ebba 0b04 	subs.w	fp, sl, r4
 80041a4:	d00b      	beq.n	80041be <_svfiprintf_r+0x7a>
 80041a6:	465b      	mov	r3, fp
 80041a8:	4622      	mov	r2, r4
 80041aa:	4629      	mov	r1, r5
 80041ac:	4638      	mov	r0, r7
 80041ae:	f7ff ff6d 	bl	800408c <__ssputs_r>
 80041b2:	3001      	adds	r0, #1
 80041b4:	f000 80aa 	beq.w	800430c <_svfiprintf_r+0x1c8>
 80041b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041ba:	445a      	add	r2, fp
 80041bc:	9209      	str	r2, [sp, #36]	; 0x24
 80041be:	f89a 3000 	ldrb.w	r3, [sl]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80a2 	beq.w	800430c <_svfiprintf_r+0x1c8>
 80041c8:	2300      	movs	r3, #0
 80041ca:	f04f 32ff 	mov.w	r2, #4294967295
 80041ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041d2:	f10a 0a01 	add.w	sl, sl, #1
 80041d6:	9304      	str	r3, [sp, #16]
 80041d8:	9307      	str	r3, [sp, #28]
 80041da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041de:	931a      	str	r3, [sp, #104]	; 0x68
 80041e0:	4654      	mov	r4, sl
 80041e2:	2205      	movs	r2, #5
 80041e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041e8:	4851      	ldr	r0, [pc, #324]	; (8004330 <_svfiprintf_r+0x1ec>)
 80041ea:	f7fb fff9 	bl	80001e0 <memchr>
 80041ee:	9a04      	ldr	r2, [sp, #16]
 80041f0:	b9d8      	cbnz	r0, 800422a <_svfiprintf_r+0xe6>
 80041f2:	06d0      	lsls	r0, r2, #27
 80041f4:	bf44      	itt	mi
 80041f6:	2320      	movmi	r3, #32
 80041f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041fc:	0711      	lsls	r1, r2, #28
 80041fe:	bf44      	itt	mi
 8004200:	232b      	movmi	r3, #43	; 0x2b
 8004202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004206:	f89a 3000 	ldrb.w	r3, [sl]
 800420a:	2b2a      	cmp	r3, #42	; 0x2a
 800420c:	d015      	beq.n	800423a <_svfiprintf_r+0xf6>
 800420e:	9a07      	ldr	r2, [sp, #28]
 8004210:	4654      	mov	r4, sl
 8004212:	2000      	movs	r0, #0
 8004214:	f04f 0c0a 	mov.w	ip, #10
 8004218:	4621      	mov	r1, r4
 800421a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800421e:	3b30      	subs	r3, #48	; 0x30
 8004220:	2b09      	cmp	r3, #9
 8004222:	d94e      	bls.n	80042c2 <_svfiprintf_r+0x17e>
 8004224:	b1b0      	cbz	r0, 8004254 <_svfiprintf_r+0x110>
 8004226:	9207      	str	r2, [sp, #28]
 8004228:	e014      	b.n	8004254 <_svfiprintf_r+0x110>
 800422a:	eba0 0308 	sub.w	r3, r0, r8
 800422e:	fa09 f303 	lsl.w	r3, r9, r3
 8004232:	4313      	orrs	r3, r2
 8004234:	9304      	str	r3, [sp, #16]
 8004236:	46a2      	mov	sl, r4
 8004238:	e7d2      	b.n	80041e0 <_svfiprintf_r+0x9c>
 800423a:	9b03      	ldr	r3, [sp, #12]
 800423c:	1d19      	adds	r1, r3, #4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	9103      	str	r1, [sp, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	bfbb      	ittet	lt
 8004246:	425b      	neglt	r3, r3
 8004248:	f042 0202 	orrlt.w	r2, r2, #2
 800424c:	9307      	strge	r3, [sp, #28]
 800424e:	9307      	strlt	r3, [sp, #28]
 8004250:	bfb8      	it	lt
 8004252:	9204      	strlt	r2, [sp, #16]
 8004254:	7823      	ldrb	r3, [r4, #0]
 8004256:	2b2e      	cmp	r3, #46	; 0x2e
 8004258:	d10c      	bne.n	8004274 <_svfiprintf_r+0x130>
 800425a:	7863      	ldrb	r3, [r4, #1]
 800425c:	2b2a      	cmp	r3, #42	; 0x2a
 800425e:	d135      	bne.n	80042cc <_svfiprintf_r+0x188>
 8004260:	9b03      	ldr	r3, [sp, #12]
 8004262:	1d1a      	adds	r2, r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	9203      	str	r2, [sp, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	bfb8      	it	lt
 800426c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004270:	3402      	adds	r4, #2
 8004272:	9305      	str	r3, [sp, #20]
 8004274:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004340 <_svfiprintf_r+0x1fc>
 8004278:	7821      	ldrb	r1, [r4, #0]
 800427a:	2203      	movs	r2, #3
 800427c:	4650      	mov	r0, sl
 800427e:	f7fb ffaf 	bl	80001e0 <memchr>
 8004282:	b140      	cbz	r0, 8004296 <_svfiprintf_r+0x152>
 8004284:	2340      	movs	r3, #64	; 0x40
 8004286:	eba0 000a 	sub.w	r0, r0, sl
 800428a:	fa03 f000 	lsl.w	r0, r3, r0
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	4303      	orrs	r3, r0
 8004292:	3401      	adds	r4, #1
 8004294:	9304      	str	r3, [sp, #16]
 8004296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800429a:	4826      	ldr	r0, [pc, #152]	; (8004334 <_svfiprintf_r+0x1f0>)
 800429c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042a0:	2206      	movs	r2, #6
 80042a2:	f7fb ff9d 	bl	80001e0 <memchr>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d038      	beq.n	800431c <_svfiprintf_r+0x1d8>
 80042aa:	4b23      	ldr	r3, [pc, #140]	; (8004338 <_svfiprintf_r+0x1f4>)
 80042ac:	bb1b      	cbnz	r3, 80042f6 <_svfiprintf_r+0x1b2>
 80042ae:	9b03      	ldr	r3, [sp, #12]
 80042b0:	3307      	adds	r3, #7
 80042b2:	f023 0307 	bic.w	r3, r3, #7
 80042b6:	3308      	adds	r3, #8
 80042b8:	9303      	str	r3, [sp, #12]
 80042ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042bc:	4433      	add	r3, r6
 80042be:	9309      	str	r3, [sp, #36]	; 0x24
 80042c0:	e767      	b.n	8004192 <_svfiprintf_r+0x4e>
 80042c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80042c6:	460c      	mov	r4, r1
 80042c8:	2001      	movs	r0, #1
 80042ca:	e7a5      	b.n	8004218 <_svfiprintf_r+0xd4>
 80042cc:	2300      	movs	r3, #0
 80042ce:	3401      	adds	r4, #1
 80042d0:	9305      	str	r3, [sp, #20]
 80042d2:	4619      	mov	r1, r3
 80042d4:	f04f 0c0a 	mov.w	ip, #10
 80042d8:	4620      	mov	r0, r4
 80042da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042de:	3a30      	subs	r2, #48	; 0x30
 80042e0:	2a09      	cmp	r2, #9
 80042e2:	d903      	bls.n	80042ec <_svfiprintf_r+0x1a8>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0c5      	beq.n	8004274 <_svfiprintf_r+0x130>
 80042e8:	9105      	str	r1, [sp, #20]
 80042ea:	e7c3      	b.n	8004274 <_svfiprintf_r+0x130>
 80042ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80042f0:	4604      	mov	r4, r0
 80042f2:	2301      	movs	r3, #1
 80042f4:	e7f0      	b.n	80042d8 <_svfiprintf_r+0x194>
 80042f6:	ab03      	add	r3, sp, #12
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	462a      	mov	r2, r5
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <_svfiprintf_r+0x1f8>)
 80042fe:	a904      	add	r1, sp, #16
 8004300:	4638      	mov	r0, r7
 8004302:	f3af 8000 	nop.w
 8004306:	1c42      	adds	r2, r0, #1
 8004308:	4606      	mov	r6, r0
 800430a:	d1d6      	bne.n	80042ba <_svfiprintf_r+0x176>
 800430c:	89ab      	ldrh	r3, [r5, #12]
 800430e:	065b      	lsls	r3, r3, #25
 8004310:	f53f af2c 	bmi.w	800416c <_svfiprintf_r+0x28>
 8004314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004316:	b01d      	add	sp, #116	; 0x74
 8004318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	462a      	mov	r2, r5
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <_svfiprintf_r+0x1f8>)
 8004324:	a904      	add	r1, sp, #16
 8004326:	4638      	mov	r0, r7
 8004328:	f000 f87a 	bl	8004420 <_printf_i>
 800432c:	e7eb      	b.n	8004306 <_svfiprintf_r+0x1c2>
 800432e:	bf00      	nop
 8004330:	0800516a 	.word	0x0800516a
 8004334:	08005174 	.word	0x08005174
 8004338:	00000000 	.word	0x00000000
 800433c:	0800408d 	.word	0x0800408d
 8004340:	08005170 	.word	0x08005170

08004344 <_printf_common>:
 8004344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	4616      	mov	r6, r2
 800434a:	4699      	mov	r9, r3
 800434c:	688a      	ldr	r2, [r1, #8]
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004354:	4293      	cmp	r3, r2
 8004356:	bfb8      	it	lt
 8004358:	4613      	movlt	r3, r2
 800435a:	6033      	str	r3, [r6, #0]
 800435c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004360:	4607      	mov	r7, r0
 8004362:	460c      	mov	r4, r1
 8004364:	b10a      	cbz	r2, 800436a <_printf_common+0x26>
 8004366:	3301      	adds	r3, #1
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	0699      	lsls	r1, r3, #26
 800436e:	bf42      	ittt	mi
 8004370:	6833      	ldrmi	r3, [r6, #0]
 8004372:	3302      	addmi	r3, #2
 8004374:	6033      	strmi	r3, [r6, #0]
 8004376:	6825      	ldr	r5, [r4, #0]
 8004378:	f015 0506 	ands.w	r5, r5, #6
 800437c:	d106      	bne.n	800438c <_printf_common+0x48>
 800437e:	f104 0a19 	add.w	sl, r4, #25
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	6832      	ldr	r2, [r6, #0]
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	42ab      	cmp	r3, r5
 800438a:	dc26      	bgt.n	80043da <_printf_common+0x96>
 800438c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004390:	1e13      	subs	r3, r2, #0
 8004392:	6822      	ldr	r2, [r4, #0]
 8004394:	bf18      	it	ne
 8004396:	2301      	movne	r3, #1
 8004398:	0692      	lsls	r2, r2, #26
 800439a:	d42b      	bmi.n	80043f4 <_printf_common+0xb0>
 800439c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043a0:	4649      	mov	r1, r9
 80043a2:	4638      	mov	r0, r7
 80043a4:	47c0      	blx	r8
 80043a6:	3001      	adds	r0, #1
 80043a8:	d01e      	beq.n	80043e8 <_printf_common+0xa4>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	68e5      	ldr	r5, [r4, #12]
 80043ae:	6832      	ldr	r2, [r6, #0]
 80043b0:	f003 0306 	and.w	r3, r3, #6
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	bf08      	it	eq
 80043b8:	1aad      	subeq	r5, r5, r2
 80043ba:	68a3      	ldr	r3, [r4, #8]
 80043bc:	6922      	ldr	r2, [r4, #16]
 80043be:	bf0c      	ite	eq
 80043c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043c4:	2500      	movne	r5, #0
 80043c6:	4293      	cmp	r3, r2
 80043c8:	bfc4      	itt	gt
 80043ca:	1a9b      	subgt	r3, r3, r2
 80043cc:	18ed      	addgt	r5, r5, r3
 80043ce:	2600      	movs	r6, #0
 80043d0:	341a      	adds	r4, #26
 80043d2:	42b5      	cmp	r5, r6
 80043d4:	d11a      	bne.n	800440c <_printf_common+0xc8>
 80043d6:	2000      	movs	r0, #0
 80043d8:	e008      	b.n	80043ec <_printf_common+0xa8>
 80043da:	2301      	movs	r3, #1
 80043dc:	4652      	mov	r2, sl
 80043de:	4649      	mov	r1, r9
 80043e0:	4638      	mov	r0, r7
 80043e2:	47c0      	blx	r8
 80043e4:	3001      	adds	r0, #1
 80043e6:	d103      	bne.n	80043f0 <_printf_common+0xac>
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f0:	3501      	adds	r5, #1
 80043f2:	e7c6      	b.n	8004382 <_printf_common+0x3e>
 80043f4:	18e1      	adds	r1, r4, r3
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	2030      	movs	r0, #48	; 0x30
 80043fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043fe:	4422      	add	r2, r4
 8004400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004408:	3302      	adds	r3, #2
 800440a:	e7c7      	b.n	800439c <_printf_common+0x58>
 800440c:	2301      	movs	r3, #1
 800440e:	4622      	mov	r2, r4
 8004410:	4649      	mov	r1, r9
 8004412:	4638      	mov	r0, r7
 8004414:	47c0      	blx	r8
 8004416:	3001      	adds	r0, #1
 8004418:	d0e6      	beq.n	80043e8 <_printf_common+0xa4>
 800441a:	3601      	adds	r6, #1
 800441c:	e7d9      	b.n	80043d2 <_printf_common+0x8e>
	...

08004420 <_printf_i>:
 8004420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004424:	7e0f      	ldrb	r7, [r1, #24]
 8004426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004428:	2f78      	cmp	r7, #120	; 0x78
 800442a:	4691      	mov	r9, r2
 800442c:	4680      	mov	r8, r0
 800442e:	460c      	mov	r4, r1
 8004430:	469a      	mov	sl, r3
 8004432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004436:	d807      	bhi.n	8004448 <_printf_i+0x28>
 8004438:	2f62      	cmp	r7, #98	; 0x62
 800443a:	d80a      	bhi.n	8004452 <_printf_i+0x32>
 800443c:	2f00      	cmp	r7, #0
 800443e:	f000 80d8 	beq.w	80045f2 <_printf_i+0x1d2>
 8004442:	2f58      	cmp	r7, #88	; 0x58
 8004444:	f000 80a3 	beq.w	800458e <_printf_i+0x16e>
 8004448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800444c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004450:	e03a      	b.n	80044c8 <_printf_i+0xa8>
 8004452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004456:	2b15      	cmp	r3, #21
 8004458:	d8f6      	bhi.n	8004448 <_printf_i+0x28>
 800445a:	a101      	add	r1, pc, #4	; (adr r1, 8004460 <_printf_i+0x40>)
 800445c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004460:	080044b9 	.word	0x080044b9
 8004464:	080044cd 	.word	0x080044cd
 8004468:	08004449 	.word	0x08004449
 800446c:	08004449 	.word	0x08004449
 8004470:	08004449 	.word	0x08004449
 8004474:	08004449 	.word	0x08004449
 8004478:	080044cd 	.word	0x080044cd
 800447c:	08004449 	.word	0x08004449
 8004480:	08004449 	.word	0x08004449
 8004484:	08004449 	.word	0x08004449
 8004488:	08004449 	.word	0x08004449
 800448c:	080045d9 	.word	0x080045d9
 8004490:	080044fd 	.word	0x080044fd
 8004494:	080045bb 	.word	0x080045bb
 8004498:	08004449 	.word	0x08004449
 800449c:	08004449 	.word	0x08004449
 80044a0:	080045fb 	.word	0x080045fb
 80044a4:	08004449 	.word	0x08004449
 80044a8:	080044fd 	.word	0x080044fd
 80044ac:	08004449 	.word	0x08004449
 80044b0:	08004449 	.word	0x08004449
 80044b4:	080045c3 	.word	0x080045c3
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	602a      	str	r2, [r5, #0]
 80044c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0a3      	b.n	8004614 <_printf_i+0x1f4>
 80044cc:	6820      	ldr	r0, [r4, #0]
 80044ce:	6829      	ldr	r1, [r5, #0]
 80044d0:	0606      	lsls	r6, r0, #24
 80044d2:	f101 0304 	add.w	r3, r1, #4
 80044d6:	d50a      	bpl.n	80044ee <_printf_i+0xce>
 80044d8:	680e      	ldr	r6, [r1, #0]
 80044da:	602b      	str	r3, [r5, #0]
 80044dc:	2e00      	cmp	r6, #0
 80044de:	da03      	bge.n	80044e8 <_printf_i+0xc8>
 80044e0:	232d      	movs	r3, #45	; 0x2d
 80044e2:	4276      	negs	r6, r6
 80044e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e8:	485e      	ldr	r0, [pc, #376]	; (8004664 <_printf_i+0x244>)
 80044ea:	230a      	movs	r3, #10
 80044ec:	e019      	b.n	8004522 <_printf_i+0x102>
 80044ee:	680e      	ldr	r6, [r1, #0]
 80044f0:	602b      	str	r3, [r5, #0]
 80044f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044f6:	bf18      	it	ne
 80044f8:	b236      	sxthne	r6, r6
 80044fa:	e7ef      	b.n	80044dc <_printf_i+0xbc>
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	1d19      	adds	r1, r3, #4
 8004502:	6029      	str	r1, [r5, #0]
 8004504:	0601      	lsls	r1, r0, #24
 8004506:	d501      	bpl.n	800450c <_printf_i+0xec>
 8004508:	681e      	ldr	r6, [r3, #0]
 800450a:	e002      	b.n	8004512 <_printf_i+0xf2>
 800450c:	0646      	lsls	r6, r0, #25
 800450e:	d5fb      	bpl.n	8004508 <_printf_i+0xe8>
 8004510:	881e      	ldrh	r6, [r3, #0]
 8004512:	4854      	ldr	r0, [pc, #336]	; (8004664 <_printf_i+0x244>)
 8004514:	2f6f      	cmp	r7, #111	; 0x6f
 8004516:	bf0c      	ite	eq
 8004518:	2308      	moveq	r3, #8
 800451a:	230a      	movne	r3, #10
 800451c:	2100      	movs	r1, #0
 800451e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004522:	6865      	ldr	r5, [r4, #4]
 8004524:	60a5      	str	r5, [r4, #8]
 8004526:	2d00      	cmp	r5, #0
 8004528:	bfa2      	ittt	ge
 800452a:	6821      	ldrge	r1, [r4, #0]
 800452c:	f021 0104 	bicge.w	r1, r1, #4
 8004530:	6021      	strge	r1, [r4, #0]
 8004532:	b90e      	cbnz	r6, 8004538 <_printf_i+0x118>
 8004534:	2d00      	cmp	r5, #0
 8004536:	d04d      	beq.n	80045d4 <_printf_i+0x1b4>
 8004538:	4615      	mov	r5, r2
 800453a:	fbb6 f1f3 	udiv	r1, r6, r3
 800453e:	fb03 6711 	mls	r7, r3, r1, r6
 8004542:	5dc7      	ldrb	r7, [r0, r7]
 8004544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004548:	4637      	mov	r7, r6
 800454a:	42bb      	cmp	r3, r7
 800454c:	460e      	mov	r6, r1
 800454e:	d9f4      	bls.n	800453a <_printf_i+0x11a>
 8004550:	2b08      	cmp	r3, #8
 8004552:	d10b      	bne.n	800456c <_printf_i+0x14c>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	07de      	lsls	r6, r3, #31
 8004558:	d508      	bpl.n	800456c <_printf_i+0x14c>
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	6861      	ldr	r1, [r4, #4]
 800455e:	4299      	cmp	r1, r3
 8004560:	bfde      	ittt	le
 8004562:	2330      	movle	r3, #48	; 0x30
 8004564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800456c:	1b52      	subs	r2, r2, r5
 800456e:	6122      	str	r2, [r4, #16]
 8004570:	f8cd a000 	str.w	sl, [sp]
 8004574:	464b      	mov	r3, r9
 8004576:	aa03      	add	r2, sp, #12
 8004578:	4621      	mov	r1, r4
 800457a:	4640      	mov	r0, r8
 800457c:	f7ff fee2 	bl	8004344 <_printf_common>
 8004580:	3001      	adds	r0, #1
 8004582:	d14c      	bne.n	800461e <_printf_i+0x1fe>
 8004584:	f04f 30ff 	mov.w	r0, #4294967295
 8004588:	b004      	add	sp, #16
 800458a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458e:	4835      	ldr	r0, [pc, #212]	; (8004664 <_printf_i+0x244>)
 8004590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004594:	6829      	ldr	r1, [r5, #0]
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	f851 6b04 	ldr.w	r6, [r1], #4
 800459c:	6029      	str	r1, [r5, #0]
 800459e:	061d      	lsls	r5, r3, #24
 80045a0:	d514      	bpl.n	80045cc <_printf_i+0x1ac>
 80045a2:	07df      	lsls	r7, r3, #31
 80045a4:	bf44      	itt	mi
 80045a6:	f043 0320 	orrmi.w	r3, r3, #32
 80045aa:	6023      	strmi	r3, [r4, #0]
 80045ac:	b91e      	cbnz	r6, 80045b6 <_printf_i+0x196>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	f023 0320 	bic.w	r3, r3, #32
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	2310      	movs	r3, #16
 80045b8:	e7b0      	b.n	800451c <_printf_i+0xfc>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f043 0320 	orr.w	r3, r3, #32
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	2378      	movs	r3, #120	; 0x78
 80045c4:	4828      	ldr	r0, [pc, #160]	; (8004668 <_printf_i+0x248>)
 80045c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ca:	e7e3      	b.n	8004594 <_printf_i+0x174>
 80045cc:	0659      	lsls	r1, r3, #25
 80045ce:	bf48      	it	mi
 80045d0:	b2b6      	uxthmi	r6, r6
 80045d2:	e7e6      	b.n	80045a2 <_printf_i+0x182>
 80045d4:	4615      	mov	r5, r2
 80045d6:	e7bb      	b.n	8004550 <_printf_i+0x130>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	6826      	ldr	r6, [r4, #0]
 80045dc:	6961      	ldr	r1, [r4, #20]
 80045de:	1d18      	adds	r0, r3, #4
 80045e0:	6028      	str	r0, [r5, #0]
 80045e2:	0635      	lsls	r5, r6, #24
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	d501      	bpl.n	80045ec <_printf_i+0x1cc>
 80045e8:	6019      	str	r1, [r3, #0]
 80045ea:	e002      	b.n	80045f2 <_printf_i+0x1d2>
 80045ec:	0670      	lsls	r0, r6, #25
 80045ee:	d5fb      	bpl.n	80045e8 <_printf_i+0x1c8>
 80045f0:	8019      	strh	r1, [r3, #0]
 80045f2:	2300      	movs	r3, #0
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	4615      	mov	r5, r2
 80045f8:	e7ba      	b.n	8004570 <_printf_i+0x150>
 80045fa:	682b      	ldr	r3, [r5, #0]
 80045fc:	1d1a      	adds	r2, r3, #4
 80045fe:	602a      	str	r2, [r5, #0]
 8004600:	681d      	ldr	r5, [r3, #0]
 8004602:	6862      	ldr	r2, [r4, #4]
 8004604:	2100      	movs	r1, #0
 8004606:	4628      	mov	r0, r5
 8004608:	f7fb fdea 	bl	80001e0 <memchr>
 800460c:	b108      	cbz	r0, 8004612 <_printf_i+0x1f2>
 800460e:	1b40      	subs	r0, r0, r5
 8004610:	6060      	str	r0, [r4, #4]
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	6123      	str	r3, [r4, #16]
 8004616:	2300      	movs	r3, #0
 8004618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800461c:	e7a8      	b.n	8004570 <_printf_i+0x150>
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	462a      	mov	r2, r5
 8004622:	4649      	mov	r1, r9
 8004624:	4640      	mov	r0, r8
 8004626:	47d0      	blx	sl
 8004628:	3001      	adds	r0, #1
 800462a:	d0ab      	beq.n	8004584 <_printf_i+0x164>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	079b      	lsls	r3, r3, #30
 8004630:	d413      	bmi.n	800465a <_printf_i+0x23a>
 8004632:	68e0      	ldr	r0, [r4, #12]
 8004634:	9b03      	ldr	r3, [sp, #12]
 8004636:	4298      	cmp	r0, r3
 8004638:	bfb8      	it	lt
 800463a:	4618      	movlt	r0, r3
 800463c:	e7a4      	b.n	8004588 <_printf_i+0x168>
 800463e:	2301      	movs	r3, #1
 8004640:	4632      	mov	r2, r6
 8004642:	4649      	mov	r1, r9
 8004644:	4640      	mov	r0, r8
 8004646:	47d0      	blx	sl
 8004648:	3001      	adds	r0, #1
 800464a:	d09b      	beq.n	8004584 <_printf_i+0x164>
 800464c:	3501      	adds	r5, #1
 800464e:	68e3      	ldr	r3, [r4, #12]
 8004650:	9903      	ldr	r1, [sp, #12]
 8004652:	1a5b      	subs	r3, r3, r1
 8004654:	42ab      	cmp	r3, r5
 8004656:	dcf2      	bgt.n	800463e <_printf_i+0x21e>
 8004658:	e7eb      	b.n	8004632 <_printf_i+0x212>
 800465a:	2500      	movs	r5, #0
 800465c:	f104 0619 	add.w	r6, r4, #25
 8004660:	e7f5      	b.n	800464e <_printf_i+0x22e>
 8004662:	bf00      	nop
 8004664:	0800517b 	.word	0x0800517b
 8004668:	0800518c 	.word	0x0800518c

0800466c <memcpy>:
 800466c:	440a      	add	r2, r1
 800466e:	4291      	cmp	r1, r2
 8004670:	f100 33ff 	add.w	r3, r0, #4294967295
 8004674:	d100      	bne.n	8004678 <memcpy+0xc>
 8004676:	4770      	bx	lr
 8004678:	b510      	push	{r4, lr}
 800467a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800467e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004682:	4291      	cmp	r1, r2
 8004684:	d1f9      	bne.n	800467a <memcpy+0xe>
 8004686:	bd10      	pop	{r4, pc}

08004688 <memmove>:
 8004688:	4288      	cmp	r0, r1
 800468a:	b510      	push	{r4, lr}
 800468c:	eb01 0402 	add.w	r4, r1, r2
 8004690:	d902      	bls.n	8004698 <memmove+0x10>
 8004692:	4284      	cmp	r4, r0
 8004694:	4623      	mov	r3, r4
 8004696:	d807      	bhi.n	80046a8 <memmove+0x20>
 8004698:	1e43      	subs	r3, r0, #1
 800469a:	42a1      	cmp	r1, r4
 800469c:	d008      	beq.n	80046b0 <memmove+0x28>
 800469e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046a6:	e7f8      	b.n	800469a <memmove+0x12>
 80046a8:	4402      	add	r2, r0
 80046aa:	4601      	mov	r1, r0
 80046ac:	428a      	cmp	r2, r1
 80046ae:	d100      	bne.n	80046b2 <memmove+0x2a>
 80046b0:	bd10      	pop	{r4, pc}
 80046b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046ba:	e7f7      	b.n	80046ac <memmove+0x24>

080046bc <_free_r>:
 80046bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046be:	2900      	cmp	r1, #0
 80046c0:	d044      	beq.n	800474c <_free_r+0x90>
 80046c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046c6:	9001      	str	r0, [sp, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f1a1 0404 	sub.w	r4, r1, #4
 80046ce:	bfb8      	it	lt
 80046d0:	18e4      	addlt	r4, r4, r3
 80046d2:	f000 f913 	bl	80048fc <__malloc_lock>
 80046d6:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <_free_r+0x94>)
 80046d8:	9801      	ldr	r0, [sp, #4]
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	b933      	cbnz	r3, 80046ec <_free_r+0x30>
 80046de:	6063      	str	r3, [r4, #4]
 80046e0:	6014      	str	r4, [r2, #0]
 80046e2:	b003      	add	sp, #12
 80046e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046e8:	f000 b90e 	b.w	8004908 <__malloc_unlock>
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d908      	bls.n	8004702 <_free_r+0x46>
 80046f0:	6825      	ldr	r5, [r4, #0]
 80046f2:	1961      	adds	r1, r4, r5
 80046f4:	428b      	cmp	r3, r1
 80046f6:	bf01      	itttt	eq
 80046f8:	6819      	ldreq	r1, [r3, #0]
 80046fa:	685b      	ldreq	r3, [r3, #4]
 80046fc:	1949      	addeq	r1, r1, r5
 80046fe:	6021      	streq	r1, [r4, #0]
 8004700:	e7ed      	b.n	80046de <_free_r+0x22>
 8004702:	461a      	mov	r2, r3
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	b10b      	cbz	r3, 800470c <_free_r+0x50>
 8004708:	42a3      	cmp	r3, r4
 800470a:	d9fa      	bls.n	8004702 <_free_r+0x46>
 800470c:	6811      	ldr	r1, [r2, #0]
 800470e:	1855      	adds	r5, r2, r1
 8004710:	42a5      	cmp	r5, r4
 8004712:	d10b      	bne.n	800472c <_free_r+0x70>
 8004714:	6824      	ldr	r4, [r4, #0]
 8004716:	4421      	add	r1, r4
 8004718:	1854      	adds	r4, r2, r1
 800471a:	42a3      	cmp	r3, r4
 800471c:	6011      	str	r1, [r2, #0]
 800471e:	d1e0      	bne.n	80046e2 <_free_r+0x26>
 8004720:	681c      	ldr	r4, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	6053      	str	r3, [r2, #4]
 8004726:	4421      	add	r1, r4
 8004728:	6011      	str	r1, [r2, #0]
 800472a:	e7da      	b.n	80046e2 <_free_r+0x26>
 800472c:	d902      	bls.n	8004734 <_free_r+0x78>
 800472e:	230c      	movs	r3, #12
 8004730:	6003      	str	r3, [r0, #0]
 8004732:	e7d6      	b.n	80046e2 <_free_r+0x26>
 8004734:	6825      	ldr	r5, [r4, #0]
 8004736:	1961      	adds	r1, r4, r5
 8004738:	428b      	cmp	r3, r1
 800473a:	bf04      	itt	eq
 800473c:	6819      	ldreq	r1, [r3, #0]
 800473e:	685b      	ldreq	r3, [r3, #4]
 8004740:	6063      	str	r3, [r4, #4]
 8004742:	bf04      	itt	eq
 8004744:	1949      	addeq	r1, r1, r5
 8004746:	6021      	streq	r1, [r4, #0]
 8004748:	6054      	str	r4, [r2, #4]
 800474a:	e7ca      	b.n	80046e2 <_free_r+0x26>
 800474c:	b003      	add	sp, #12
 800474e:	bd30      	pop	{r4, r5, pc}
 8004750:	20000630 	.word	0x20000630

08004754 <sbrk_aligned>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4e0e      	ldr	r6, [pc, #56]	; (8004790 <sbrk_aligned+0x3c>)
 8004758:	460c      	mov	r4, r1
 800475a:	6831      	ldr	r1, [r6, #0]
 800475c:	4605      	mov	r5, r0
 800475e:	b911      	cbnz	r1, 8004766 <sbrk_aligned+0x12>
 8004760:	f000 f8bc 	bl	80048dc <_sbrk_r>
 8004764:	6030      	str	r0, [r6, #0]
 8004766:	4621      	mov	r1, r4
 8004768:	4628      	mov	r0, r5
 800476a:	f000 f8b7 	bl	80048dc <_sbrk_r>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	d00a      	beq.n	8004788 <sbrk_aligned+0x34>
 8004772:	1cc4      	adds	r4, r0, #3
 8004774:	f024 0403 	bic.w	r4, r4, #3
 8004778:	42a0      	cmp	r0, r4
 800477a:	d007      	beq.n	800478c <sbrk_aligned+0x38>
 800477c:	1a21      	subs	r1, r4, r0
 800477e:	4628      	mov	r0, r5
 8004780:	f000 f8ac 	bl	80048dc <_sbrk_r>
 8004784:	3001      	adds	r0, #1
 8004786:	d101      	bne.n	800478c <sbrk_aligned+0x38>
 8004788:	f04f 34ff 	mov.w	r4, #4294967295
 800478c:	4620      	mov	r0, r4
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	20000634 	.word	0x20000634

08004794 <_malloc_r>:
 8004794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004798:	1ccd      	adds	r5, r1, #3
 800479a:	f025 0503 	bic.w	r5, r5, #3
 800479e:	3508      	adds	r5, #8
 80047a0:	2d0c      	cmp	r5, #12
 80047a2:	bf38      	it	cc
 80047a4:	250c      	movcc	r5, #12
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	4607      	mov	r7, r0
 80047aa:	db01      	blt.n	80047b0 <_malloc_r+0x1c>
 80047ac:	42a9      	cmp	r1, r5
 80047ae:	d905      	bls.n	80047bc <_malloc_r+0x28>
 80047b0:	230c      	movs	r3, #12
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	2600      	movs	r6, #0
 80047b6:	4630      	mov	r0, r6
 80047b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047bc:	4e2e      	ldr	r6, [pc, #184]	; (8004878 <_malloc_r+0xe4>)
 80047be:	f000 f89d 	bl	80048fc <__malloc_lock>
 80047c2:	6833      	ldr	r3, [r6, #0]
 80047c4:	461c      	mov	r4, r3
 80047c6:	bb34      	cbnz	r4, 8004816 <_malloc_r+0x82>
 80047c8:	4629      	mov	r1, r5
 80047ca:	4638      	mov	r0, r7
 80047cc:	f7ff ffc2 	bl	8004754 <sbrk_aligned>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	4604      	mov	r4, r0
 80047d4:	d14d      	bne.n	8004872 <_malloc_r+0xde>
 80047d6:	6834      	ldr	r4, [r6, #0]
 80047d8:	4626      	mov	r6, r4
 80047da:	2e00      	cmp	r6, #0
 80047dc:	d140      	bne.n	8004860 <_malloc_r+0xcc>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	4631      	mov	r1, r6
 80047e2:	4638      	mov	r0, r7
 80047e4:	eb04 0803 	add.w	r8, r4, r3
 80047e8:	f000 f878 	bl	80048dc <_sbrk_r>
 80047ec:	4580      	cmp	r8, r0
 80047ee:	d13a      	bne.n	8004866 <_malloc_r+0xd2>
 80047f0:	6821      	ldr	r1, [r4, #0]
 80047f2:	3503      	adds	r5, #3
 80047f4:	1a6d      	subs	r5, r5, r1
 80047f6:	f025 0503 	bic.w	r5, r5, #3
 80047fa:	3508      	adds	r5, #8
 80047fc:	2d0c      	cmp	r5, #12
 80047fe:	bf38      	it	cc
 8004800:	250c      	movcc	r5, #12
 8004802:	4629      	mov	r1, r5
 8004804:	4638      	mov	r0, r7
 8004806:	f7ff ffa5 	bl	8004754 <sbrk_aligned>
 800480a:	3001      	adds	r0, #1
 800480c:	d02b      	beq.n	8004866 <_malloc_r+0xd2>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	442b      	add	r3, r5
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	e00e      	b.n	8004834 <_malloc_r+0xa0>
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	1b52      	subs	r2, r2, r5
 800481a:	d41e      	bmi.n	800485a <_malloc_r+0xc6>
 800481c:	2a0b      	cmp	r2, #11
 800481e:	d916      	bls.n	800484e <_malloc_r+0xba>
 8004820:	1961      	adds	r1, r4, r5
 8004822:	42a3      	cmp	r3, r4
 8004824:	6025      	str	r5, [r4, #0]
 8004826:	bf18      	it	ne
 8004828:	6059      	strne	r1, [r3, #4]
 800482a:	6863      	ldr	r3, [r4, #4]
 800482c:	bf08      	it	eq
 800482e:	6031      	streq	r1, [r6, #0]
 8004830:	5162      	str	r2, [r4, r5]
 8004832:	604b      	str	r3, [r1, #4]
 8004834:	4638      	mov	r0, r7
 8004836:	f104 060b 	add.w	r6, r4, #11
 800483a:	f000 f865 	bl	8004908 <__malloc_unlock>
 800483e:	f026 0607 	bic.w	r6, r6, #7
 8004842:	1d23      	adds	r3, r4, #4
 8004844:	1af2      	subs	r2, r6, r3
 8004846:	d0b6      	beq.n	80047b6 <_malloc_r+0x22>
 8004848:	1b9b      	subs	r3, r3, r6
 800484a:	50a3      	str	r3, [r4, r2]
 800484c:	e7b3      	b.n	80047b6 <_malloc_r+0x22>
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	42a3      	cmp	r3, r4
 8004852:	bf0c      	ite	eq
 8004854:	6032      	streq	r2, [r6, #0]
 8004856:	605a      	strne	r2, [r3, #4]
 8004858:	e7ec      	b.n	8004834 <_malloc_r+0xa0>
 800485a:	4623      	mov	r3, r4
 800485c:	6864      	ldr	r4, [r4, #4]
 800485e:	e7b2      	b.n	80047c6 <_malloc_r+0x32>
 8004860:	4634      	mov	r4, r6
 8004862:	6876      	ldr	r6, [r6, #4]
 8004864:	e7b9      	b.n	80047da <_malloc_r+0x46>
 8004866:	230c      	movs	r3, #12
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	4638      	mov	r0, r7
 800486c:	f000 f84c 	bl	8004908 <__malloc_unlock>
 8004870:	e7a1      	b.n	80047b6 <_malloc_r+0x22>
 8004872:	6025      	str	r5, [r4, #0]
 8004874:	e7de      	b.n	8004834 <_malloc_r+0xa0>
 8004876:	bf00      	nop
 8004878:	20000630 	.word	0x20000630

0800487c <_realloc_r>:
 800487c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004880:	4680      	mov	r8, r0
 8004882:	4614      	mov	r4, r2
 8004884:	460e      	mov	r6, r1
 8004886:	b921      	cbnz	r1, 8004892 <_realloc_r+0x16>
 8004888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800488c:	4611      	mov	r1, r2
 800488e:	f7ff bf81 	b.w	8004794 <_malloc_r>
 8004892:	b92a      	cbnz	r2, 80048a0 <_realloc_r+0x24>
 8004894:	f7ff ff12 	bl	80046bc <_free_r>
 8004898:	4625      	mov	r5, r4
 800489a:	4628      	mov	r0, r5
 800489c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a0:	f000 f838 	bl	8004914 <_malloc_usable_size_r>
 80048a4:	4284      	cmp	r4, r0
 80048a6:	4607      	mov	r7, r0
 80048a8:	d802      	bhi.n	80048b0 <_realloc_r+0x34>
 80048aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048ae:	d812      	bhi.n	80048d6 <_realloc_r+0x5a>
 80048b0:	4621      	mov	r1, r4
 80048b2:	4640      	mov	r0, r8
 80048b4:	f7ff ff6e 	bl	8004794 <_malloc_r>
 80048b8:	4605      	mov	r5, r0
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d0ed      	beq.n	800489a <_realloc_r+0x1e>
 80048be:	42bc      	cmp	r4, r7
 80048c0:	4622      	mov	r2, r4
 80048c2:	4631      	mov	r1, r6
 80048c4:	bf28      	it	cs
 80048c6:	463a      	movcs	r2, r7
 80048c8:	f7ff fed0 	bl	800466c <memcpy>
 80048cc:	4631      	mov	r1, r6
 80048ce:	4640      	mov	r0, r8
 80048d0:	f7ff fef4 	bl	80046bc <_free_r>
 80048d4:	e7e1      	b.n	800489a <_realloc_r+0x1e>
 80048d6:	4635      	mov	r5, r6
 80048d8:	e7df      	b.n	800489a <_realloc_r+0x1e>
	...

080048dc <_sbrk_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4d06      	ldr	r5, [pc, #24]	; (80048f8 <_sbrk_r+0x1c>)
 80048e0:	2300      	movs	r3, #0
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	f7fc f90c 	bl	8000b04 <_sbrk>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_sbrk_r+0x1a>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_sbrk_r+0x1a>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	20000638 	.word	0x20000638

080048fc <__malloc_lock>:
 80048fc:	4801      	ldr	r0, [pc, #4]	; (8004904 <__malloc_lock+0x8>)
 80048fe:	f000 b811 	b.w	8004924 <__retarget_lock_acquire_recursive>
 8004902:	bf00      	nop
 8004904:	2000063c 	.word	0x2000063c

08004908 <__malloc_unlock>:
 8004908:	4801      	ldr	r0, [pc, #4]	; (8004910 <__malloc_unlock+0x8>)
 800490a:	f000 b80c 	b.w	8004926 <__retarget_lock_release_recursive>
 800490e:	bf00      	nop
 8004910:	2000063c 	.word	0x2000063c

08004914 <_malloc_usable_size_r>:
 8004914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004918:	1f18      	subs	r0, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	bfbc      	itt	lt
 800491e:	580b      	ldrlt	r3, [r1, r0]
 8004920:	18c0      	addlt	r0, r0, r3
 8004922:	4770      	bx	lr

08004924 <__retarget_lock_acquire_recursive>:
 8004924:	4770      	bx	lr

08004926 <__retarget_lock_release_recursive>:
 8004926:	4770      	bx	lr

08004928 <_init>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	bf00      	nop
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr

08004934 <_fini>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr
