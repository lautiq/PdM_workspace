
P5_ej1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002914  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b7c  08002b7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b84  08002b84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b84  08002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002bfc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002bfc  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a24  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014a2  00000000  00000000  00027ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  00028f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d8  00000000  00000000  000295c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f61  00000000  00000000  00029ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083ee  00000000  00000000  0003eb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000857fa  00000000  00000000  00046eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc6e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c98  00000000  00000000  000cc73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002a9c 	.word	0x08002a9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002a9c 	.word	0x08002a9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
static void MX_GPIO_Init(void);



int main(void)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0

  HAL_Init();
 800059a:	f000 fa6b 	bl	8000a74 <HAL_Init>
  SystemClock_Config();
 800059e:	f000 f817 	bl	80005d0 <SystemClock_Config>

  MX_GPIO_Init();
 80005a2:	f000 f881 	bl	80006a8 <MX_GPIO_Init>


 uartInit();
 80005a6:	f000 f9ff 	bl	80009a8 <uartInit>

  while (1)
  {
	  //Para probar que inicia bien la uart y que envia usando la funcion de API.
	  char myString[] = "Hola mundo! \r\n";
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <main+0x38>)
 80005ac:	463c      	mov	r4, r7
 80005ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b0:	c407      	stmia	r4!, {r0, r1, r2}
 80005b2:	8023      	strh	r3, [r4, #0]
 80005b4:	3402      	adds	r4, #2
 80005b6:	0c1b      	lsrs	r3, r3, #16
 80005b8:	7023      	strb	r3, [r4, #0]
	  uartSendString((uint8_t*)myString);
 80005ba:	463b      	mov	r3, r7
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fa1d 	bl	80009fc <uartSendString>
	  HAL_Delay(100);
 80005c2:	2064      	movs	r0, #100	; 0x64
 80005c4:	f000 fac8 	bl	8000b58 <HAL_Delay>
  {
 80005c8:	e7ef      	b.n	80005aa <main+0x16>
 80005ca:	bf00      	nop
 80005cc:	08002ab4 	.word	0x08002ab4

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fde6 	bl	80021b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemClock_Config+0xd0>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <SystemClock_Config+0xd0>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <SystemClock_Config+0xd0>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <SystemClock_Config+0xd4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xd4>)
 800061e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000644:	2310      	movs	r3, #16
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000648:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800064e:	2304      	movs	r3, #4
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000652:	2307      	movs	r3, #7
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fd24 	bl	80010a8 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000666:	f000 f88d 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ff86 	bl	8001598 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000692:	f000 f877 	bl	8000784 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <MX_GPIO_Init+0xd0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a2c      	ldr	r2, [pc, #176]	; (8000778 <MX_GPIO_Init+0xd0>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a25      	ldr	r2, [pc, #148]	; (8000778 <MX_GPIO_Init+0xd0>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <MX_GPIO_Init+0xd0>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <MX_GPIO_Init+0xd0>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2120      	movs	r1, #32
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <MX_GPIO_Init+0xd4>)
 8000734:	f000 fc9e 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_GPIO_Init+0xd8>)
 8000750:	f000 fb0c 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000754:	2320      	movs	r3, #32
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0xd4>)
 800076c:	f000 fafe 	bl	8000d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	; 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000
 8000780:	40020800 	.word	0x40020800

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_MspInit+0x4c>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x4c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ce:	2007      	movs	r0, #7
 80007d0:	f000 fa98 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <HAL_UART_MspInit+0x84>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d12b      	bne.n	800085a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_UART_MspInit+0x88>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <HAL_UART_MspInit+0x88>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_UART_MspInit+0x88>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_UART_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <HAL_UART_MspInit+0x88>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_UART_MspInit+0x88>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800083a:	230c      	movs	r3, #12
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084a:	2307      	movs	r3, #7
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_UART_MspInit+0x8c>)
 8000856:	f000 fa89 	bl	8000d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40004400 	.word	0x40004400
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f92c 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f001 fc32 	bl	800215c <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20018000 	.word	0x20018000
 8000924:	00000400 	.word	0x00000400
 8000928:	2000008c 	.word	0x2000008c
 800092c:	200000e8 	.word	0x200000e8

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095a:	490e      	ldr	r1, [pc, #56]	; (8000994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000970:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800097e:	f7ff ffd7 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f001 fbf1 	bl	8002168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fe05 	bl	8000594 <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800098c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000998:	08002b8c 	.word	0x08002b8c
  ldr r2, =_sbss
 800099c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009a0:	200000e8 	.word	0x200000e8

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <uartInit>:

//Prototipo de funcion privada
static void printUARTConfig();

bool uartInit()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	uartHandle.Instance = USART2;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <uartInit+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <uartInit+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
	uartHandle.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <uartInit+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <uartInit+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
	uartHandle.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <uartInit+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
	uartHandle.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <uartInit+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
	uartHandle.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <uartInit+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <uartInit+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]


	if (HAL_UART_Init(&uartHandle) != HAL_OK)
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <uartInit+0x4c>)
 80009da:	f000 fffd 	bl	80019d8 <HAL_UART_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <uartInit+0x40>
	{
		return false;// Error en la inicialización de la UART
 80009e4:	2300      	movs	r3, #0
 80009e6:	e002      	b.n	80009ee <uartInit+0x46>
	}
	// Imprimir la configuración de la UART en la terminal serie
	printUARTConfig();
 80009e8:	f000 f81e 	bl	8000a28 <printUARTConfig>
	return true;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000090 	.word	0x20000090
 80009f8:	40004400 	.word	0x40004400

080009fc <uartSendString>:

void uartSendString(uint8_t* pstring)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit(huart, pData, Size, Timeout)
	HAL_UART_Transmit(&uartHandle, pstring, strlen((char*)pstring), HAL_MAX_DELAY);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff fbeb 	bl	80001e0 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <uartSendString+0x28>)
 8000a16:	f001 f82c 	bl	8001a72 <HAL_UART_Transmit>

}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000090 	.word	0x20000090

08000a28 <printUARTConfig>:
}



static void printUARTConfig()
{
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2a:	b09f      	sub	sp, #124	; 0x7c
 8000a2c:	af04      	add	r7, sp, #16
	char msg[100];

	sprintf(msg, "UART Config: BaudRate = %lu, WordLength = %lu, StopBits = %lu, Parity = %lu, Mode = %lu, HwFlowCtl = %lu\r\n",
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <printUARTConfig+0x44>)
 8000a30:	685d      	ldr	r5, [r3, #4]
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <printUARTConfig+0x44>)
 8000a34:	689e      	ldr	r6, [r3, #8]
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <printUARTConfig+0x44>)
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <printUARTConfig+0x44>)
 8000a3c:	6912      	ldr	r2, [r2, #16]
 8000a3e:	490b      	ldr	r1, [pc, #44]	; (8000a6c <printUARTConfig+0x44>)
 8000a40:	6949      	ldr	r1, [r1, #20]
 8000a42:	480a      	ldr	r0, [pc, #40]	; (8000a6c <printUARTConfig+0x44>)
 8000a44:	6980      	ldr	r0, [r0, #24]
 8000a46:	1d3c      	adds	r4, r7, #4
 8000a48:	9003      	str	r0, [sp, #12]
 8000a4a:	9102      	str	r1, [sp, #8]
 8000a4c:	9201      	str	r2, [sp, #4]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	4633      	mov	r3, r6
 8000a52:	462a      	mov	r2, r5
 8000a54:	4906      	ldr	r1, [pc, #24]	; (8000a70 <printUARTConfig+0x48>)
 8000a56:	4620      	mov	r0, r4
 8000a58:	f001 fbb2 	bl	80021c0 <siprintf>
	        uartHandle.Init.BaudRate, uartHandle.Init.WordLength, uartHandle.Init.StopBits,
	        uartHandle.Init.Parity, uartHandle.Init.Mode, uartHandle.Init.HwFlowCtl);

	uartSendString((uint8_t*)msg);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ffcc 	bl	80009fc <uartSendString>

}
 8000a64:	bf00      	nop
 8000a66:	376c      	adds	r7, #108	; 0x6c
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a6c:	20000090 	.word	0x20000090
 8000a70:	08002ac4 	.word	0x08002ac4

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f931 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fe72 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f93b 	bl	8000d52 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f911 	bl	8000d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	200000d4 	.word	0x200000d4

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200000d4 	.word	0x200000d4

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff ffee 	bl	8000b40 <HAL_GetTick>
 8000b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d005      	beq.n	8000b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_Delay+0x44>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7e:	bf00      	nop
 8000b80:	f7ff ffde 	bl	8000b40 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8f7      	bhi.n	8000b80 <HAL_Delay+0x28>
  {
  }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff47 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff5c 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff8e 	bl	8000c58 <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5d 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffb0 	bl	8000cc0 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	e159      	b.n	800103c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	f040 8148 	bne.w	8001036 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d005      	beq.n	8000dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d130      	bne.n	8000e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 0201 	and.w	r2, r3, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d017      	beq.n	8000e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d123      	bne.n	8000eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	69b9      	ldr	r1, [r7, #24]
 8000eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0203 	and.w	r2, r3, #3
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 80a2 	beq.w	8001036 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b57      	ldr	r3, [pc, #348]	; (8001054 <HAL_GPIO_Init+0x2e8>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a56      	ldr	r2, [pc, #344]	; (8001054 <HAL_GPIO_Init+0x2e8>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b54      	ldr	r3, [pc, #336]	; (8001054 <HAL_GPIO_Init+0x2e8>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0e:	4a52      	ldr	r2, [pc, #328]	; (8001058 <HAL_GPIO_Init+0x2ec>)
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3302      	adds	r3, #2
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a49      	ldr	r2, [pc, #292]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x202>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a48      	ldr	r2, [pc, #288]	; (8001060 <HAL_GPIO_Init+0x2f4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x1fe>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a47      	ldr	r2, [pc, #284]	; (8001064 <HAL_GPIO_Init+0x2f8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x1fa>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a46      	ldr	r2, [pc, #280]	; (8001068 <HAL_GPIO_Init+0x2fc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x1f6>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a45      	ldr	r2, [pc, #276]	; (800106c <HAL_GPIO_Init+0x300>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x1f2>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e008      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f5e:	2307      	movs	r3, #7
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	f002 0203 	and.w	r2, r2, #3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f80:	4935      	ldr	r1, [pc, #212]	; (8001058 <HAL_GPIO_Init+0x2ec>)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8e:	4b38      	ldr	r3, [pc, #224]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb2:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <HAL_GPIO_Init+0x304>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001006:	4a1a      	ldr	r2, [pc, #104]	; (8001070 <HAL_GPIO_Init+0x304>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_GPIO_Init+0x304>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_GPIO_Init+0x304>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3301      	adds	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	f67f aea2 	bls.w	8000d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40013800 	.word	0x40013800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020400 	.word	0x40020400
 8001064:	40020800 	.word	0x40020800
 8001068:	40020c00 	.word	0x40020c00
 800106c:	40021000 	.word	0x40021000
 8001070:	40013c00 	.word	0x40013c00

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001090:	e003      	b.n	800109a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e267      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d075      	beq.n	80011b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010c6:	4b88      	ldr	r3, [pc, #544]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d00c      	beq.n	80010ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d2:	4b85      	ldr	r3, [pc, #532]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010da:	2b08      	cmp	r3, #8
 80010dc:	d112      	bne.n	8001104 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010de:	4b82      	ldr	r3, [pc, #520]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ea:	d10b      	bne.n	8001104 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	4b7e      	ldr	r3, [pc, #504]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d05b      	beq.n	80011b0 <HAL_RCC_OscConfig+0x108>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d157      	bne.n	80011b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e242      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110c:	d106      	bne.n	800111c <HAL_RCC_OscConfig+0x74>
 800110e:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a75      	ldr	r2, [pc, #468]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e01d      	b.n	8001158 <HAL_RCC_OscConfig+0xb0>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x98>
 8001126:	4b70      	ldr	r3, [pc, #448]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6f      	ldr	r2, [pc, #444]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6c      	ldr	r2, [pc, #432]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0xb0>
 8001140:	4b69      	ldr	r3, [pc, #420]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a68      	ldr	r2, [pc, #416]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b66      	ldr	r3, [pc, #408]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a65      	ldr	r2, [pc, #404]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fcee 	bl	8000b40 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fcea 	bl	8000b40 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e207      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b5b      	ldr	r3, [pc, #364]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0xc0>
 8001186:	e014      	b.n	80011b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fcda 	bl	8000b40 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fcd6 	bl	8000b40 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1f3      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0xe8>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d063      	beq.n	8001286 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011be:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d11c      	bne.n	8001210 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d116      	bne.n	8001210 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <HAL_RCC_OscConfig+0x152>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e1c7      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4937      	ldr	r1, [pc, #220]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	e03a      	b.n	8001286 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	4b34      	ldr	r3, [pc, #208]	; (80012ec <HAL_RCC_OscConfig+0x244>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121e:	f7ff fc8f 	bl	8000b40 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fc8b 	bl	8000b40 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e1a8      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4925      	ldr	r1, [pc, #148]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e015      	b.n	8001286 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <HAL_RCC_OscConfig+0x244>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fc6e 	bl	8000b40 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff fc6a 	bl	8000b40 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e187      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d036      	beq.n	8001300 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d016      	beq.n	80012c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_RCC_OscConfig+0x248>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a0:	f7ff fc4e 	bl	8000b40 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fc4a 	bl	8000b40 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e167      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80012bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x200>
 80012c6:	e01b      	b.n	8001300 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_RCC_OscConfig+0x248>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fc37 	bl	8000b40 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d4:	e00e      	b.n	80012f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc33 	bl	8000b40 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d907      	bls.n	80012f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e150      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
 80012e8:	40023800 	.word	0x40023800
 80012ec:	42470000 	.word	0x42470000
 80012f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80012f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ea      	bne.n	80012d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8097 	beq.w	800143c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001312:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10f      	bne.n	800133e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b7d      	ldr	r3, [pc, #500]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a7c      	ldr	r2, [pc, #496]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b7a      	ldr	r3, [pc, #488]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133a:	2301      	movs	r3, #1
 800133c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133e:	4b77      	ldr	r3, [pc, #476]	; (800151c <HAL_RCC_OscConfig+0x474>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d118      	bne.n	800137c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134a:	4b74      	ldr	r3, [pc, #464]	; (800151c <HAL_RCC_OscConfig+0x474>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a73      	ldr	r2, [pc, #460]	; (800151c <HAL_RCC_OscConfig+0x474>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001356:	f7ff fbf3 	bl	8000b40 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135e:	f7ff fbef 	bl	8000b40 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e10c      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	4b6a      	ldr	r3, [pc, #424]	; (800151c <HAL_RCC_OscConfig+0x474>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x2ea>
 8001384:	4b64      	ldr	r3, [pc, #400]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001388:	4a63      	ldr	r2, [pc, #396]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6713      	str	r3, [r2, #112]	; 0x70
 8001390:	e01c      	b.n	80013cc <HAL_RCC_OscConfig+0x324>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b05      	cmp	r3, #5
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x30c>
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 800139c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139e:	4a5e      	ldr	r2, [pc, #376]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6713      	str	r3, [r2, #112]	; 0x70
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013aa:	4a5b      	ldr	r2, [pc, #364]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6713      	str	r3, [r2, #112]	; 0x70
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0x324>
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	4a57      	ldr	r2, [pc, #348]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	6713      	str	r3, [r2, #112]	; 0x70
 80013c0:	4b55      	ldr	r3, [pc, #340]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	4a54      	ldr	r2, [pc, #336]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013c6:	f023 0304 	bic.w	r3, r3, #4
 80013ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d015      	beq.n	8001400 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fbb4 	bl	8000b40 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013dc:	f7ff fbb0 	bl	8000b40 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0cb      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f2:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ee      	beq.n	80013dc <HAL_RCC_OscConfig+0x334>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fb9e 	bl	8000b40 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001406:	e00a      	b.n	800141e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001408:	f7ff fb9a 	bl	8000b40 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f241 3288 	movw	r2, #5000	; 0x1388
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e0b5      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ee      	bne.n	8001408 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d105      	bne.n	800143c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001430:	4b39      	ldr	r3, [pc, #228]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	4a38      	ldr	r2, [pc, #224]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80a1 	beq.w	8001588 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b08      	cmp	r3, #8
 8001450:	d05c      	beq.n	800150c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d141      	bne.n	80014de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <HAL_RCC_OscConfig+0x478>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fb6e 	bl	8000b40 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff fb6a 	bl	8000b40 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e087      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69da      	ldr	r2, [r3, #28]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	019b      	lsls	r3, r3, #6
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	3b01      	subs	r3, #1
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	061b      	lsls	r3, r3, #24
 80014aa:	491b      	ldr	r1, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_RCC_OscConfig+0x478>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb43 	bl	8000b40 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff fb3f 	bl	8000b40 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e05c      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x416>
 80014dc:	e054      	b.n	8001588 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_RCC_OscConfig+0x478>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fb2c 	bl	8000b40 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fb28 	bl	8000b40 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e045      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x444>
 800150a:	e03d      	b.n	8001588 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d107      	bne.n	8001524 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e038      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000
 8001520:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x4ec>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d028      	beq.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800153c:	429a      	cmp	r2, r3
 800153e:	d121      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d11a      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001554:	4013      	ands	r3, r2
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800155a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800155c:	4293      	cmp	r3, r2
 800155e:	d111      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	3b01      	subs	r3, #1
 800156e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d107      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0cc      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b68      	ldr	r3, [pc, #416]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d90c      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b65      	ldr	r3, [pc, #404]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0b8      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ec:	4b59      	ldr	r3, [pc, #356]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a58      	ldr	r2, [pc, #352]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001604:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a52      	ldr	r2, [pc, #328]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800160e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	494d      	ldr	r1, [pc, #308]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d044      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d119      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e07f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d003      	beq.n	8001656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e067      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4934      	ldr	r1, [pc, #208]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff fa5a 	bl	8000b40 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff fa56 	bl	8000b40 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e04f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d20c      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e032      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4916      	ldr	r1, [pc, #88]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	490e      	ldr	r1, [pc, #56]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171e:	f000 f821 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8001722:	4602      	mov	r2, r0
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	490a      	ldr	r1, [pc, #40]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	5ccb      	ldrb	r3, [r1, r3]
 8001732:	fa22 f303 	lsr.w	r3, r2, r3
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_ClockConfig+0x1c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f9ba 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023c00 	.word	0x40023c00
 8001754:	40023800 	.word	0x40023800
 8001758:	08002b30 	.word	0x08002b30
 800175c:	20000000 	.word	0x20000000
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001768:	b094      	sub	sp, #80	; 0x50
 800176a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	647b      	str	r3, [r7, #68]	; 0x44
 8001770:	2300      	movs	r3, #0
 8001772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001774:	2300      	movs	r3, #0
 8001776:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800177c:	4b79      	ldr	r3, [pc, #484]	; (8001964 <HAL_RCC_GetSysClockFreq+0x200>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b08      	cmp	r3, #8
 8001786:	d00d      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001788:	2b08      	cmp	r3, #8
 800178a:	f200 80e1 	bhi.w	8001950 <HAL_RCC_GetSysClockFreq+0x1ec>
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x34>
 8001792:	2b04      	cmp	r3, #4
 8001794:	d003      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x3a>
 8001796:	e0db      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001798:	4b73      	ldr	r3, [pc, #460]	; (8001968 <HAL_RCC_GetSysClockFreq+0x204>)
 800179a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800179c:	e0db      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179e:	4b73      	ldr	r3, [pc, #460]	; (800196c <HAL_RCC_GetSysClockFreq+0x208>)
 80017a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017a2:	e0d8      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a4:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ae:	4b6d      	ldr	r3, [pc, #436]	; (8001964 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d063      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ba:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <HAL_RCC_GetSysClockFreq+0x200>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	2200      	movs	r2, #0
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
 80017ce:	2300      	movs	r3, #0
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
 80017d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017d6:	4622      	mov	r2, r4
 80017d8:	462b      	mov	r3, r5
 80017da:	f04f 0000 	mov.w	r0, #0
 80017de:	f04f 0100 	mov.w	r1, #0
 80017e2:	0159      	lsls	r1, r3, #5
 80017e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e8:	0150      	lsls	r0, r2, #5
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4621      	mov	r1, r4
 80017f0:	1a51      	subs	r1, r2, r1
 80017f2:	6139      	str	r1, [r7, #16]
 80017f4:	4629      	mov	r1, r5
 80017f6:	eb63 0301 	sbc.w	r3, r3, r1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001808:	4659      	mov	r1, fp
 800180a:	018b      	lsls	r3, r1, #6
 800180c:	4651      	mov	r1, sl
 800180e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001812:	4651      	mov	r1, sl
 8001814:	018a      	lsls	r2, r1, #6
 8001816:	4651      	mov	r1, sl
 8001818:	ebb2 0801 	subs.w	r8, r2, r1
 800181c:	4659      	mov	r1, fp
 800181e:	eb63 0901 	sbc.w	r9, r3, r1
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800182e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001836:	4690      	mov	r8, r2
 8001838:	4699      	mov	r9, r3
 800183a:	4623      	mov	r3, r4
 800183c:	eb18 0303 	adds.w	r3, r8, r3
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	462b      	mov	r3, r5
 8001844:	eb49 0303 	adc.w	r3, r9, r3
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001856:	4629      	mov	r1, r5
 8001858:	024b      	lsls	r3, r1, #9
 800185a:	4621      	mov	r1, r4
 800185c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001860:	4621      	mov	r1, r4
 8001862:	024a      	lsls	r2, r1, #9
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800186a:	2200      	movs	r2, #0
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
 800186e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001870:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001874:	f7fe fd0c 	bl	8000290 <__aeabi_uldivmod>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4613      	mov	r3, r2
 800187e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001880:	e058      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_RCC_GetSysClockFreq+0x200>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	2200      	movs	r2, #0
 800188a:	4618      	mov	r0, r3
 800188c:	4611      	mov	r1, r2
 800188e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001892:	623b      	str	r3, [r7, #32]
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
 8001898:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800189c:	4642      	mov	r2, r8
 800189e:	464b      	mov	r3, r9
 80018a0:	f04f 0000 	mov.w	r0, #0
 80018a4:	f04f 0100 	mov.w	r1, #0
 80018a8:	0159      	lsls	r1, r3, #5
 80018aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ae:	0150      	lsls	r0, r2, #5
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4641      	mov	r1, r8
 80018b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ba:	4649      	mov	r1, r9
 80018bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018d4:	ebb2 040a 	subs.w	r4, r2, sl
 80018d8:	eb63 050b 	sbc.w	r5, r3, fp
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	00eb      	lsls	r3, r5, #3
 80018e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ea:	00e2      	lsls	r2, r4, #3
 80018ec:	4614      	mov	r4, r2
 80018ee:	461d      	mov	r5, r3
 80018f0:	4643      	mov	r3, r8
 80018f2:	18e3      	adds	r3, r4, r3
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	464b      	mov	r3, r9
 80018f8:	eb45 0303 	adc.w	r3, r5, r3
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	e9d7 4500 	ldrd	r4, r5, [r7]
 800190a:	4629      	mov	r1, r5
 800190c:	028b      	lsls	r3, r1, #10
 800190e:	4621      	mov	r1, r4
 8001910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001914:	4621      	mov	r1, r4
 8001916:	028a      	lsls	r2, r1, #10
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800191e:	2200      	movs	r2, #0
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	61fa      	str	r2, [r7, #28]
 8001924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001928:	f7fe fcb2 	bl	8000290 <__aeabi_uldivmod>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4613      	mov	r3, r2
 8001932:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_GetSysClockFreq+0x200>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	0c1b      	lsrs	r3, r3, #16
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	3301      	adds	r3, #1
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001944:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194e:	e002      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_GetSysClockFreq+0x204>)
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001958:	4618      	mov	r0, r3
 800195a:	3750      	adds	r7, #80	; 0x50
 800195c:	46bd      	mov	sp, r7
 800195e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	00f42400 	.word	0x00f42400
 800196c:	007a1200 	.word	0x007a1200

08001970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_RCC_GetHCLKFreq+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800198c:	f7ff fff0 	bl	8001970 <HAL_RCC_GetHCLKFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	0a9b      	lsrs	r3, r3, #10
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	4903      	ldr	r1, [pc, #12]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	08002b40 	.word	0x08002b40

080019b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019b4:	f7ff ffdc 	bl	8001970 <HAL_RCC_GetHCLKFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	0b5b      	lsrs	r3, r3, #13
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4903      	ldr	r1, [pc, #12]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	08002b40 	.word	0x08002b40

080019d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e03f      	b.n	8001a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7fe feee 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2224      	movs	r2, #36	; 0x24
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f929 	bl	8001c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b08a      	sub	sp, #40	; 0x28
 8001a76:	af02      	add	r7, sp, #8
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	d17c      	bne.n	8001b8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <HAL_UART_Transmit+0x2c>
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e075      	b.n	8001b8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_UART_Transmit+0x3e>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e06e      	b.n	8001b8e <HAL_UART_Transmit+0x11c>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2221      	movs	r2, #33	; 0x21
 8001ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ac6:	f7ff f83b 	bl	8000b40 <HAL_GetTick>
 8001aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	88fa      	ldrh	r2, [r7, #6]
 8001ad0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae0:	d108      	bne.n	8001af4 <HAL_UART_Transmit+0x82>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d104      	bne.n	8001af4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	e003      	b.n	8001afc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b04:	e02a      	b.n	8001b5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f840 	bl	8001b96 <UART_WaitOnFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e036      	b.n	8001b8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10b      	bne.n	8001b3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	e007      	b.n	8001b4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1cf      	bne.n	8001b06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f810 	bl	8001b96 <UART_WaitOnFlagUntilTimeout>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e006      	b.n	8001b8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e000      	b.n	8001b8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b8c:	2302      	movs	r3, #2
  }
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b090      	sub	sp, #64	; 0x40
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ba6:	e050      	b.n	8001c4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bae:	d04c      	beq.n	8001c4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bb6:	f7fe ffc3 	bl	8000b40 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d241      	bcs.n	8001c4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	330c      	adds	r3, #12
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	e853 3f00 	ldrex	r3, [r3]
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	330c      	adds	r3, #12
 8001be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001be6:	637a      	str	r2, [r7, #52]	; 0x34
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bee:	e841 2300 	strex	r3, r2, [r1]
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1e5      	bne.n	8001bc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3314      	adds	r3, #20
 8001c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	e853 3f00 	ldrex	r3, [r3]
 8001c08:	613b      	str	r3, [r7, #16]
   return(result);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3314      	adds	r3, #20
 8001c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c1a:	623a      	str	r2, [r7, #32]
 8001c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c1e:	69f9      	ldr	r1, [r7, #28]
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	e841 2300 	strex	r3, r2, [r1]
 8001c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1e5      	bne.n	8001bfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e00f      	b.n	8001c6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4013      	ands	r3, r2
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	bf0c      	ite	eq
 8001c5a:	2301      	moveq	r3, #1
 8001c5c:	2300      	movne	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d09f      	beq.n	8001ba8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3740      	adds	r7, #64	; 0x40
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c78:	b0c0      	sub	sp, #256	; 0x100
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c90:	68d9      	ldr	r1, [r3, #12]
 8001c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	ea40 0301 	orr.w	r3, r0, r1
 8001c9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ccc:	f021 010c 	bic.w	r1, r1, #12
 8001cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cee:	6999      	ldr	r1, [r3, #24]
 8001cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	ea40 0301 	orr.w	r3, r0, r1
 8001cfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4b8f      	ldr	r3, [pc, #572]	; (8001f40 <UART_SetConfig+0x2cc>)
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d005      	beq.n	8001d14 <UART_SetConfig+0xa0>
 8001d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b8d      	ldr	r3, [pc, #564]	; (8001f44 <UART_SetConfig+0x2d0>)
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d104      	bne.n	8001d1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d14:	f7ff fe4c 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001d18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001d1c:	e003      	b.n	8001d26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d1e:	f7ff fe33 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001d22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d30:	f040 810c 	bne.w	8001f4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d46:	4622      	mov	r2, r4
 8001d48:	462b      	mov	r3, r5
 8001d4a:	1891      	adds	r1, r2, r2
 8001d4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001d4e:	415b      	adcs	r3, r3
 8001d50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d56:	4621      	mov	r1, r4
 8001d58:	eb12 0801 	adds.w	r8, r2, r1
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	eb43 0901 	adc.w	r9, r3, r1
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d76:	4690      	mov	r8, r2
 8001d78:	4699      	mov	r9, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	eb18 0303 	adds.w	r3, r8, r3
 8001d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d84:	462b      	mov	r3, r5
 8001d86:	eb49 0303 	adc.w	r3, r9, r3
 8001d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001da2:	460b      	mov	r3, r1
 8001da4:	18db      	adds	r3, r3, r3
 8001da6:	653b      	str	r3, [r7, #80]	; 0x50
 8001da8:	4613      	mov	r3, r2
 8001daa:	eb42 0303 	adc.w	r3, r2, r3
 8001dae:	657b      	str	r3, [r7, #84]	; 0x54
 8001db0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001db4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001db8:	f7fe fa6a 	bl	8000290 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <UART_SetConfig+0x2d4>)
 8001dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	011c      	lsls	r4, r3, #4
 8001dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001dd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001dd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ddc:	4642      	mov	r2, r8
 8001dde:	464b      	mov	r3, r9
 8001de0:	1891      	adds	r1, r2, r2
 8001de2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001de4:	415b      	adcs	r3, r3
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001de8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001dec:	4641      	mov	r1, r8
 8001dee:	eb12 0a01 	adds.w	sl, r2, r1
 8001df2:	4649      	mov	r1, r9
 8001df4:	eb43 0b01 	adc.w	fp, r3, r1
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e0c:	4692      	mov	sl, r2
 8001e0e:	469b      	mov	fp, r3
 8001e10:	4643      	mov	r3, r8
 8001e12:	eb1a 0303 	adds.w	r3, sl, r3
 8001e16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001e34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	18db      	adds	r3, r3, r3
 8001e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8001e3e:	4613      	mov	r3, r2
 8001e40:	eb42 0303 	adc.w	r3, r2, r3
 8001e44:	647b      	str	r3, [r7, #68]	; 0x44
 8001e46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001e4e:	f7fe fa1f 	bl	8000290 <__aeabi_uldivmod>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <UART_SetConfig+0x2d4>)
 8001e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2264      	movs	r2, #100	; 0x64
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	1acb      	subs	r3, r1, r3
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <UART_SetConfig+0x2d4>)
 8001e70:	fba3 2302 	umull	r2, r3, r3, r2
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e7c:	441c      	add	r4, r3
 8001e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e82:	2200      	movs	r2, #0
 8001e84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001e8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001e90:	4642      	mov	r2, r8
 8001e92:	464b      	mov	r3, r9
 8001e94:	1891      	adds	r1, r2, r2
 8001e96:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e98:	415b      	adcs	r3, r3
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ea0:	4641      	mov	r1, r8
 8001ea2:	1851      	adds	r1, r2, r1
 8001ea4:	6339      	str	r1, [r7, #48]	; 0x30
 8001ea6:	4649      	mov	r1, r9
 8001ea8:	414b      	adcs	r3, r1
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001eb8:	4659      	mov	r1, fp
 8001eba:	00cb      	lsls	r3, r1, #3
 8001ebc:	4651      	mov	r1, sl
 8001ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ec2:	4651      	mov	r1, sl
 8001ec4:	00ca      	lsls	r2, r1, #3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4642      	mov	r2, r8
 8001ece:	189b      	adds	r3, r3, r2
 8001ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ed4:	464b      	mov	r3, r9
 8001ed6:	460a      	mov	r2, r1
 8001ed8:	eb42 0303 	adc.w	r3, r2, r3
 8001edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001eec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ef0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	18db      	adds	r3, r3, r3
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efa:	4613      	mov	r3, r2
 8001efc:	eb42 0303 	adc.w	r3, r2, r3
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f0a:	f7fe f9c1 	bl	8000290 <__aeabi_uldivmod>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <UART_SetConfig+0x2d4>)
 8001f14:	fba3 1302 	umull	r1, r3, r3, r2
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	2164      	movs	r1, #100	; 0x64
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	3332      	adds	r3, #50	; 0x32
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <UART_SetConfig+0x2d4>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	f003 0207 	and.w	r2, r3, #7
 8001f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4422      	add	r2, r4
 8001f3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f3c:	e105      	b.n	800214a <UART_SetConfig+0x4d6>
 8001f3e:	bf00      	nop
 8001f40:	40011000 	.word	0x40011000
 8001f44:	40011400 	.word	0x40011400
 8001f48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f50:	2200      	movs	r2, #0
 8001f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001f5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001f5e:	4642      	mov	r2, r8
 8001f60:	464b      	mov	r3, r9
 8001f62:	1891      	adds	r1, r2, r2
 8001f64:	6239      	str	r1, [r7, #32]
 8001f66:	415b      	adcs	r3, r3
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f6e:	4641      	mov	r1, r8
 8001f70:	1854      	adds	r4, r2, r1
 8001f72:	4649      	mov	r1, r9
 8001f74:	eb43 0501 	adc.w	r5, r3, r1
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	00eb      	lsls	r3, r5, #3
 8001f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f86:	00e2      	lsls	r2, r4, #3
 8001f88:	4614      	mov	r4, r2
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	4643      	mov	r3, r8
 8001f8e:	18e3      	adds	r3, r4, r3
 8001f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f94:	464b      	mov	r3, r9
 8001f96:	eb45 0303 	adc.w	r3, r5, r3
 8001f9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001faa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001fba:	4629      	mov	r1, r5
 8001fbc:	008b      	lsls	r3, r1, #2
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	008a      	lsls	r2, r1, #2
 8001fc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001fcc:	f7fe f960 	bl	8000290 <__aeabi_uldivmod>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4b60      	ldr	r3, [pc, #384]	; (8002158 <UART_SetConfig+0x4e4>)
 8001fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	011c      	lsls	r4, r3, #4
 8001fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001fe8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001fec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001ff0:	4642      	mov	r2, r8
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	1891      	adds	r1, r2, r2
 8001ff6:	61b9      	str	r1, [r7, #24]
 8001ff8:	415b      	adcs	r3, r3
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002000:	4641      	mov	r1, r8
 8002002:	1851      	adds	r1, r2, r1
 8002004:	6139      	str	r1, [r7, #16]
 8002006:	4649      	mov	r1, r9
 8002008:	414b      	adcs	r3, r1
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002018:	4659      	mov	r1, fp
 800201a:	00cb      	lsls	r3, r1, #3
 800201c:	4651      	mov	r1, sl
 800201e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002022:	4651      	mov	r1, sl
 8002024:	00ca      	lsls	r2, r1, #3
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	4603      	mov	r3, r0
 800202c:	4642      	mov	r2, r8
 800202e:	189b      	adds	r3, r3, r2
 8002030:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002034:	464b      	mov	r3, r9
 8002036:	460a      	mov	r2, r1
 8002038:	eb42 0303 	adc.w	r3, r2, r3
 800203c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	67bb      	str	r3, [r7, #120]	; 0x78
 800204a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002058:	4649      	mov	r1, r9
 800205a:	008b      	lsls	r3, r1, #2
 800205c:	4641      	mov	r1, r8
 800205e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002062:	4641      	mov	r1, r8
 8002064:	008a      	lsls	r2, r1, #2
 8002066:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800206a:	f7fe f911 	bl	8000290 <__aeabi_uldivmod>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4b39      	ldr	r3, [pc, #228]	; (8002158 <UART_SetConfig+0x4e4>)
 8002074:	fba3 1302 	umull	r1, r3, r3, r2
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	2164      	movs	r1, #100	; 0x64
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	3332      	adds	r3, #50	; 0x32
 8002086:	4a34      	ldr	r2, [pc, #208]	; (8002158 <UART_SetConfig+0x4e4>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002092:	441c      	add	r4, r3
 8002094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002098:	2200      	movs	r2, #0
 800209a:	673b      	str	r3, [r7, #112]	; 0x70
 800209c:	677a      	str	r2, [r7, #116]	; 0x74
 800209e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80020a2:	4642      	mov	r2, r8
 80020a4:	464b      	mov	r3, r9
 80020a6:	1891      	adds	r1, r2, r2
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	415b      	adcs	r3, r3
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b2:	4641      	mov	r1, r8
 80020b4:	1851      	adds	r1, r2, r1
 80020b6:	6039      	str	r1, [r7, #0]
 80020b8:	4649      	mov	r1, r9
 80020ba:	414b      	adcs	r3, r1
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80020ca:	4659      	mov	r1, fp
 80020cc:	00cb      	lsls	r3, r1, #3
 80020ce:	4651      	mov	r1, sl
 80020d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020d4:	4651      	mov	r1, sl
 80020d6:	00ca      	lsls	r2, r1, #3
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	4603      	mov	r3, r0
 80020de:	4642      	mov	r2, r8
 80020e0:	189b      	adds	r3, r3, r2
 80020e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80020e4:	464b      	mov	r3, r9
 80020e6:	460a      	mov	r2, r1
 80020e8:	eb42 0303 	adc.w	r3, r2, r3
 80020ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	663b      	str	r3, [r7, #96]	; 0x60
 80020f8:	667a      	str	r2, [r7, #100]	; 0x64
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002106:	4649      	mov	r1, r9
 8002108:	008b      	lsls	r3, r1, #2
 800210a:	4641      	mov	r1, r8
 800210c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002110:	4641      	mov	r1, r8
 8002112:	008a      	lsls	r2, r1, #2
 8002114:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002118:	f7fe f8ba 	bl	8000290 <__aeabi_uldivmod>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <UART_SetConfig+0x4e4>)
 8002122:	fba3 1302 	umull	r1, r3, r3, r2
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2164      	movs	r1, #100	; 0x64
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	3332      	adds	r3, #50	; 0x32
 8002134:	4a08      	ldr	r2, [pc, #32]	; (8002158 <UART_SetConfig+0x4e4>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	f003 020f 	and.w	r2, r3, #15
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4422      	add	r2, r4
 8002148:	609a      	str	r2, [r3, #8]
}
 800214a:	bf00      	nop
 800214c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002150:	46bd      	mov	sp, r7
 8002152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002156:	bf00      	nop
 8002158:	51eb851f 	.word	0x51eb851f

0800215c <__errno>:
 800215c:	4b01      	ldr	r3, [pc, #4]	; (8002164 <__errno+0x8>)
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	2000000c 	.word	0x2000000c

08002168 <__libc_init_array>:
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	4d0d      	ldr	r5, [pc, #52]	; (80021a0 <__libc_init_array+0x38>)
 800216c:	4c0d      	ldr	r4, [pc, #52]	; (80021a4 <__libc_init_array+0x3c>)
 800216e:	1b64      	subs	r4, r4, r5
 8002170:	10a4      	asrs	r4, r4, #2
 8002172:	2600      	movs	r6, #0
 8002174:	42a6      	cmp	r6, r4
 8002176:	d109      	bne.n	800218c <__libc_init_array+0x24>
 8002178:	4d0b      	ldr	r5, [pc, #44]	; (80021a8 <__libc_init_array+0x40>)
 800217a:	4c0c      	ldr	r4, [pc, #48]	; (80021ac <__libc_init_array+0x44>)
 800217c:	f000 fc8e 	bl	8002a9c <_init>
 8002180:	1b64      	subs	r4, r4, r5
 8002182:	10a4      	asrs	r4, r4, #2
 8002184:	2600      	movs	r6, #0
 8002186:	42a6      	cmp	r6, r4
 8002188:	d105      	bne.n	8002196 <__libc_init_array+0x2e>
 800218a:	bd70      	pop	{r4, r5, r6, pc}
 800218c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002190:	4798      	blx	r3
 8002192:	3601      	adds	r6, #1
 8002194:	e7ee      	b.n	8002174 <__libc_init_array+0xc>
 8002196:	f855 3b04 	ldr.w	r3, [r5], #4
 800219a:	4798      	blx	r3
 800219c:	3601      	adds	r6, #1
 800219e:	e7f2      	b.n	8002186 <__libc_init_array+0x1e>
 80021a0:	08002b84 	.word	0x08002b84
 80021a4:	08002b84 	.word	0x08002b84
 80021a8:	08002b84 	.word	0x08002b84
 80021ac:	08002b88 	.word	0x08002b88

080021b0 <memset>:
 80021b0:	4402      	add	r2, r0
 80021b2:	4603      	mov	r3, r0
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d100      	bne.n	80021ba <memset+0xa>
 80021b8:	4770      	bx	lr
 80021ba:	f803 1b01 	strb.w	r1, [r3], #1
 80021be:	e7f9      	b.n	80021b4 <memset+0x4>

080021c0 <siprintf>:
 80021c0:	b40e      	push	{r1, r2, r3}
 80021c2:	b500      	push	{lr}
 80021c4:	b09c      	sub	sp, #112	; 0x70
 80021c6:	ab1d      	add	r3, sp, #116	; 0x74
 80021c8:	9002      	str	r0, [sp, #8]
 80021ca:	9006      	str	r0, [sp, #24]
 80021cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021d0:	4809      	ldr	r0, [pc, #36]	; (80021f8 <siprintf+0x38>)
 80021d2:	9107      	str	r1, [sp, #28]
 80021d4:	9104      	str	r1, [sp, #16]
 80021d6:	4909      	ldr	r1, [pc, #36]	; (80021fc <siprintf+0x3c>)
 80021d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80021dc:	9105      	str	r1, [sp, #20]
 80021de:	6800      	ldr	r0, [r0, #0]
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	a902      	add	r1, sp, #8
 80021e4:	f000 f868 	bl	80022b8 <_svfiprintf_r>
 80021e8:	9b02      	ldr	r3, [sp, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	b01c      	add	sp, #112	; 0x70
 80021f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80021f4:	b003      	add	sp, #12
 80021f6:	4770      	bx	lr
 80021f8:	2000000c 	.word	0x2000000c
 80021fc:	ffff0208 	.word	0xffff0208

08002200 <__ssputs_r>:
 8002200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002204:	688e      	ldr	r6, [r1, #8]
 8002206:	429e      	cmp	r6, r3
 8002208:	4682      	mov	sl, r0
 800220a:	460c      	mov	r4, r1
 800220c:	4690      	mov	r8, r2
 800220e:	461f      	mov	r7, r3
 8002210:	d838      	bhi.n	8002284 <__ssputs_r+0x84>
 8002212:	898a      	ldrh	r2, [r1, #12]
 8002214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002218:	d032      	beq.n	8002280 <__ssputs_r+0x80>
 800221a:	6825      	ldr	r5, [r4, #0]
 800221c:	6909      	ldr	r1, [r1, #16]
 800221e:	eba5 0901 	sub.w	r9, r5, r1
 8002222:	6965      	ldr	r5, [r4, #20]
 8002224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800222c:	3301      	adds	r3, #1
 800222e:	444b      	add	r3, r9
 8002230:	106d      	asrs	r5, r5, #1
 8002232:	429d      	cmp	r5, r3
 8002234:	bf38      	it	cc
 8002236:	461d      	movcc	r5, r3
 8002238:	0553      	lsls	r3, r2, #21
 800223a:	d531      	bpl.n	80022a0 <__ssputs_r+0xa0>
 800223c:	4629      	mov	r1, r5
 800223e:	f000 fb63 	bl	8002908 <_malloc_r>
 8002242:	4606      	mov	r6, r0
 8002244:	b950      	cbnz	r0, 800225c <__ssputs_r+0x5c>
 8002246:	230c      	movs	r3, #12
 8002248:	f8ca 3000 	str.w	r3, [sl]
 800224c:	89a3      	ldrh	r3, [r4, #12]
 800224e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002252:	81a3      	strh	r3, [r4, #12]
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800225c:	6921      	ldr	r1, [r4, #16]
 800225e:	464a      	mov	r2, r9
 8002260:	f000 fabe 	bl	80027e0 <memcpy>
 8002264:	89a3      	ldrh	r3, [r4, #12]
 8002266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800226a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226e:	81a3      	strh	r3, [r4, #12]
 8002270:	6126      	str	r6, [r4, #16]
 8002272:	6165      	str	r5, [r4, #20]
 8002274:	444e      	add	r6, r9
 8002276:	eba5 0509 	sub.w	r5, r5, r9
 800227a:	6026      	str	r6, [r4, #0]
 800227c:	60a5      	str	r5, [r4, #8]
 800227e:	463e      	mov	r6, r7
 8002280:	42be      	cmp	r6, r7
 8002282:	d900      	bls.n	8002286 <__ssputs_r+0x86>
 8002284:	463e      	mov	r6, r7
 8002286:	6820      	ldr	r0, [r4, #0]
 8002288:	4632      	mov	r2, r6
 800228a:	4641      	mov	r1, r8
 800228c:	f000 fab6 	bl	80027fc <memmove>
 8002290:	68a3      	ldr	r3, [r4, #8]
 8002292:	1b9b      	subs	r3, r3, r6
 8002294:	60a3      	str	r3, [r4, #8]
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	4433      	add	r3, r6
 800229a:	6023      	str	r3, [r4, #0]
 800229c:	2000      	movs	r0, #0
 800229e:	e7db      	b.n	8002258 <__ssputs_r+0x58>
 80022a0:	462a      	mov	r2, r5
 80022a2:	f000 fba5 	bl	80029f0 <_realloc_r>
 80022a6:	4606      	mov	r6, r0
 80022a8:	2800      	cmp	r0, #0
 80022aa:	d1e1      	bne.n	8002270 <__ssputs_r+0x70>
 80022ac:	6921      	ldr	r1, [r4, #16]
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fabe 	bl	8002830 <_free_r>
 80022b4:	e7c7      	b.n	8002246 <__ssputs_r+0x46>
	...

080022b8 <_svfiprintf_r>:
 80022b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022bc:	4698      	mov	r8, r3
 80022be:	898b      	ldrh	r3, [r1, #12]
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	b09d      	sub	sp, #116	; 0x74
 80022c4:	4607      	mov	r7, r0
 80022c6:	460d      	mov	r5, r1
 80022c8:	4614      	mov	r4, r2
 80022ca:	d50e      	bpl.n	80022ea <_svfiprintf_r+0x32>
 80022cc:	690b      	ldr	r3, [r1, #16]
 80022ce:	b963      	cbnz	r3, 80022ea <_svfiprintf_r+0x32>
 80022d0:	2140      	movs	r1, #64	; 0x40
 80022d2:	f000 fb19 	bl	8002908 <_malloc_r>
 80022d6:	6028      	str	r0, [r5, #0]
 80022d8:	6128      	str	r0, [r5, #16]
 80022da:	b920      	cbnz	r0, 80022e6 <_svfiprintf_r+0x2e>
 80022dc:	230c      	movs	r3, #12
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	e0d1      	b.n	800248a <_svfiprintf_r+0x1d2>
 80022e6:	2340      	movs	r3, #64	; 0x40
 80022e8:	616b      	str	r3, [r5, #20]
 80022ea:	2300      	movs	r3, #0
 80022ec:	9309      	str	r3, [sp, #36]	; 0x24
 80022ee:	2320      	movs	r3, #32
 80022f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80022f8:	2330      	movs	r3, #48	; 0x30
 80022fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80024a4 <_svfiprintf_r+0x1ec>
 80022fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002302:	f04f 0901 	mov.w	r9, #1
 8002306:	4623      	mov	r3, r4
 8002308:	469a      	mov	sl, r3
 800230a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800230e:	b10a      	cbz	r2, 8002314 <_svfiprintf_r+0x5c>
 8002310:	2a25      	cmp	r2, #37	; 0x25
 8002312:	d1f9      	bne.n	8002308 <_svfiprintf_r+0x50>
 8002314:	ebba 0b04 	subs.w	fp, sl, r4
 8002318:	d00b      	beq.n	8002332 <_svfiprintf_r+0x7a>
 800231a:	465b      	mov	r3, fp
 800231c:	4622      	mov	r2, r4
 800231e:	4629      	mov	r1, r5
 8002320:	4638      	mov	r0, r7
 8002322:	f7ff ff6d 	bl	8002200 <__ssputs_r>
 8002326:	3001      	adds	r0, #1
 8002328:	f000 80aa 	beq.w	8002480 <_svfiprintf_r+0x1c8>
 800232c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800232e:	445a      	add	r2, fp
 8002330:	9209      	str	r2, [sp, #36]	; 0x24
 8002332:	f89a 3000 	ldrb.w	r3, [sl]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80a2 	beq.w	8002480 <_svfiprintf_r+0x1c8>
 800233c:	2300      	movs	r3, #0
 800233e:	f04f 32ff 	mov.w	r2, #4294967295
 8002342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002346:	f10a 0a01 	add.w	sl, sl, #1
 800234a:	9304      	str	r3, [sp, #16]
 800234c:	9307      	str	r3, [sp, #28]
 800234e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002352:	931a      	str	r3, [sp, #104]	; 0x68
 8002354:	4654      	mov	r4, sl
 8002356:	2205      	movs	r2, #5
 8002358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800235c:	4851      	ldr	r0, [pc, #324]	; (80024a4 <_svfiprintf_r+0x1ec>)
 800235e:	f7fd ff47 	bl	80001f0 <memchr>
 8002362:	9a04      	ldr	r2, [sp, #16]
 8002364:	b9d8      	cbnz	r0, 800239e <_svfiprintf_r+0xe6>
 8002366:	06d0      	lsls	r0, r2, #27
 8002368:	bf44      	itt	mi
 800236a:	2320      	movmi	r3, #32
 800236c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002370:	0711      	lsls	r1, r2, #28
 8002372:	bf44      	itt	mi
 8002374:	232b      	movmi	r3, #43	; 0x2b
 8002376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800237a:	f89a 3000 	ldrb.w	r3, [sl]
 800237e:	2b2a      	cmp	r3, #42	; 0x2a
 8002380:	d015      	beq.n	80023ae <_svfiprintf_r+0xf6>
 8002382:	9a07      	ldr	r2, [sp, #28]
 8002384:	4654      	mov	r4, sl
 8002386:	2000      	movs	r0, #0
 8002388:	f04f 0c0a 	mov.w	ip, #10
 800238c:	4621      	mov	r1, r4
 800238e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002392:	3b30      	subs	r3, #48	; 0x30
 8002394:	2b09      	cmp	r3, #9
 8002396:	d94e      	bls.n	8002436 <_svfiprintf_r+0x17e>
 8002398:	b1b0      	cbz	r0, 80023c8 <_svfiprintf_r+0x110>
 800239a:	9207      	str	r2, [sp, #28]
 800239c:	e014      	b.n	80023c8 <_svfiprintf_r+0x110>
 800239e:	eba0 0308 	sub.w	r3, r0, r8
 80023a2:	fa09 f303 	lsl.w	r3, r9, r3
 80023a6:	4313      	orrs	r3, r2
 80023a8:	9304      	str	r3, [sp, #16]
 80023aa:	46a2      	mov	sl, r4
 80023ac:	e7d2      	b.n	8002354 <_svfiprintf_r+0x9c>
 80023ae:	9b03      	ldr	r3, [sp, #12]
 80023b0:	1d19      	adds	r1, r3, #4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	9103      	str	r1, [sp, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bfbb      	ittet	lt
 80023ba:	425b      	neglt	r3, r3
 80023bc:	f042 0202 	orrlt.w	r2, r2, #2
 80023c0:	9307      	strge	r3, [sp, #28]
 80023c2:	9307      	strlt	r3, [sp, #28]
 80023c4:	bfb8      	it	lt
 80023c6:	9204      	strlt	r2, [sp, #16]
 80023c8:	7823      	ldrb	r3, [r4, #0]
 80023ca:	2b2e      	cmp	r3, #46	; 0x2e
 80023cc:	d10c      	bne.n	80023e8 <_svfiprintf_r+0x130>
 80023ce:	7863      	ldrb	r3, [r4, #1]
 80023d0:	2b2a      	cmp	r3, #42	; 0x2a
 80023d2:	d135      	bne.n	8002440 <_svfiprintf_r+0x188>
 80023d4:	9b03      	ldr	r3, [sp, #12]
 80023d6:	1d1a      	adds	r2, r3, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	9203      	str	r2, [sp, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bfb8      	it	lt
 80023e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80023e4:	3402      	adds	r4, #2
 80023e6:	9305      	str	r3, [sp, #20]
 80023e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80024b4 <_svfiprintf_r+0x1fc>
 80023ec:	7821      	ldrb	r1, [r4, #0]
 80023ee:	2203      	movs	r2, #3
 80023f0:	4650      	mov	r0, sl
 80023f2:	f7fd fefd 	bl	80001f0 <memchr>
 80023f6:	b140      	cbz	r0, 800240a <_svfiprintf_r+0x152>
 80023f8:	2340      	movs	r3, #64	; 0x40
 80023fa:	eba0 000a 	sub.w	r0, r0, sl
 80023fe:	fa03 f000 	lsl.w	r0, r3, r0
 8002402:	9b04      	ldr	r3, [sp, #16]
 8002404:	4303      	orrs	r3, r0
 8002406:	3401      	adds	r4, #1
 8002408:	9304      	str	r3, [sp, #16]
 800240a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800240e:	4826      	ldr	r0, [pc, #152]	; (80024a8 <_svfiprintf_r+0x1f0>)
 8002410:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002414:	2206      	movs	r2, #6
 8002416:	f7fd feeb 	bl	80001f0 <memchr>
 800241a:	2800      	cmp	r0, #0
 800241c:	d038      	beq.n	8002490 <_svfiprintf_r+0x1d8>
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <_svfiprintf_r+0x1f4>)
 8002420:	bb1b      	cbnz	r3, 800246a <_svfiprintf_r+0x1b2>
 8002422:	9b03      	ldr	r3, [sp, #12]
 8002424:	3307      	adds	r3, #7
 8002426:	f023 0307 	bic.w	r3, r3, #7
 800242a:	3308      	adds	r3, #8
 800242c:	9303      	str	r3, [sp, #12]
 800242e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002430:	4433      	add	r3, r6
 8002432:	9309      	str	r3, [sp, #36]	; 0x24
 8002434:	e767      	b.n	8002306 <_svfiprintf_r+0x4e>
 8002436:	fb0c 3202 	mla	r2, ip, r2, r3
 800243a:	460c      	mov	r4, r1
 800243c:	2001      	movs	r0, #1
 800243e:	e7a5      	b.n	800238c <_svfiprintf_r+0xd4>
 8002440:	2300      	movs	r3, #0
 8002442:	3401      	adds	r4, #1
 8002444:	9305      	str	r3, [sp, #20]
 8002446:	4619      	mov	r1, r3
 8002448:	f04f 0c0a 	mov.w	ip, #10
 800244c:	4620      	mov	r0, r4
 800244e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002452:	3a30      	subs	r2, #48	; 0x30
 8002454:	2a09      	cmp	r2, #9
 8002456:	d903      	bls.n	8002460 <_svfiprintf_r+0x1a8>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0c5      	beq.n	80023e8 <_svfiprintf_r+0x130>
 800245c:	9105      	str	r1, [sp, #20]
 800245e:	e7c3      	b.n	80023e8 <_svfiprintf_r+0x130>
 8002460:	fb0c 2101 	mla	r1, ip, r1, r2
 8002464:	4604      	mov	r4, r0
 8002466:	2301      	movs	r3, #1
 8002468:	e7f0      	b.n	800244c <_svfiprintf_r+0x194>
 800246a:	ab03      	add	r3, sp, #12
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	462a      	mov	r2, r5
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <_svfiprintf_r+0x1f8>)
 8002472:	a904      	add	r1, sp, #16
 8002474:	4638      	mov	r0, r7
 8002476:	f3af 8000 	nop.w
 800247a:	1c42      	adds	r2, r0, #1
 800247c:	4606      	mov	r6, r0
 800247e:	d1d6      	bne.n	800242e <_svfiprintf_r+0x176>
 8002480:	89ab      	ldrh	r3, [r5, #12]
 8002482:	065b      	lsls	r3, r3, #25
 8002484:	f53f af2c 	bmi.w	80022e0 <_svfiprintf_r+0x28>
 8002488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800248a:	b01d      	add	sp, #116	; 0x74
 800248c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002490:	ab03      	add	r3, sp, #12
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	462a      	mov	r2, r5
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <_svfiprintf_r+0x1f8>)
 8002498:	a904      	add	r1, sp, #16
 800249a:	4638      	mov	r0, r7
 800249c:	f000 f87a 	bl	8002594 <_printf_i>
 80024a0:	e7eb      	b.n	800247a <_svfiprintf_r+0x1c2>
 80024a2:	bf00      	nop
 80024a4:	08002b48 	.word	0x08002b48
 80024a8:	08002b52 	.word	0x08002b52
 80024ac:	00000000 	.word	0x00000000
 80024b0:	08002201 	.word	0x08002201
 80024b4:	08002b4e 	.word	0x08002b4e

080024b8 <_printf_common>:
 80024b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024bc:	4616      	mov	r6, r2
 80024be:	4699      	mov	r9, r3
 80024c0:	688a      	ldr	r2, [r1, #8]
 80024c2:	690b      	ldr	r3, [r1, #16]
 80024c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024c8:	4293      	cmp	r3, r2
 80024ca:	bfb8      	it	lt
 80024cc:	4613      	movlt	r3, r2
 80024ce:	6033      	str	r3, [r6, #0]
 80024d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024d4:	4607      	mov	r7, r0
 80024d6:	460c      	mov	r4, r1
 80024d8:	b10a      	cbz	r2, 80024de <_printf_common+0x26>
 80024da:	3301      	adds	r3, #1
 80024dc:	6033      	str	r3, [r6, #0]
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	0699      	lsls	r1, r3, #26
 80024e2:	bf42      	ittt	mi
 80024e4:	6833      	ldrmi	r3, [r6, #0]
 80024e6:	3302      	addmi	r3, #2
 80024e8:	6033      	strmi	r3, [r6, #0]
 80024ea:	6825      	ldr	r5, [r4, #0]
 80024ec:	f015 0506 	ands.w	r5, r5, #6
 80024f0:	d106      	bne.n	8002500 <_printf_common+0x48>
 80024f2:	f104 0a19 	add.w	sl, r4, #25
 80024f6:	68e3      	ldr	r3, [r4, #12]
 80024f8:	6832      	ldr	r2, [r6, #0]
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	42ab      	cmp	r3, r5
 80024fe:	dc26      	bgt.n	800254e <_printf_common+0x96>
 8002500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002504:	1e13      	subs	r3, r2, #0
 8002506:	6822      	ldr	r2, [r4, #0]
 8002508:	bf18      	it	ne
 800250a:	2301      	movne	r3, #1
 800250c:	0692      	lsls	r2, r2, #26
 800250e:	d42b      	bmi.n	8002568 <_printf_common+0xb0>
 8002510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002514:	4649      	mov	r1, r9
 8002516:	4638      	mov	r0, r7
 8002518:	47c0      	blx	r8
 800251a:	3001      	adds	r0, #1
 800251c:	d01e      	beq.n	800255c <_printf_common+0xa4>
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	68e5      	ldr	r5, [r4, #12]
 8002522:	6832      	ldr	r2, [r6, #0]
 8002524:	f003 0306 	and.w	r3, r3, #6
 8002528:	2b04      	cmp	r3, #4
 800252a:	bf08      	it	eq
 800252c:	1aad      	subeq	r5, r5, r2
 800252e:	68a3      	ldr	r3, [r4, #8]
 8002530:	6922      	ldr	r2, [r4, #16]
 8002532:	bf0c      	ite	eq
 8002534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002538:	2500      	movne	r5, #0
 800253a:	4293      	cmp	r3, r2
 800253c:	bfc4      	itt	gt
 800253e:	1a9b      	subgt	r3, r3, r2
 8002540:	18ed      	addgt	r5, r5, r3
 8002542:	2600      	movs	r6, #0
 8002544:	341a      	adds	r4, #26
 8002546:	42b5      	cmp	r5, r6
 8002548:	d11a      	bne.n	8002580 <_printf_common+0xc8>
 800254a:	2000      	movs	r0, #0
 800254c:	e008      	b.n	8002560 <_printf_common+0xa8>
 800254e:	2301      	movs	r3, #1
 8002550:	4652      	mov	r2, sl
 8002552:	4649      	mov	r1, r9
 8002554:	4638      	mov	r0, r7
 8002556:	47c0      	blx	r8
 8002558:	3001      	adds	r0, #1
 800255a:	d103      	bne.n	8002564 <_printf_common+0xac>
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002564:	3501      	adds	r5, #1
 8002566:	e7c6      	b.n	80024f6 <_printf_common+0x3e>
 8002568:	18e1      	adds	r1, r4, r3
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	2030      	movs	r0, #48	; 0x30
 800256e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002572:	4422      	add	r2, r4
 8002574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800257c:	3302      	adds	r3, #2
 800257e:	e7c7      	b.n	8002510 <_printf_common+0x58>
 8002580:	2301      	movs	r3, #1
 8002582:	4622      	mov	r2, r4
 8002584:	4649      	mov	r1, r9
 8002586:	4638      	mov	r0, r7
 8002588:	47c0      	blx	r8
 800258a:	3001      	adds	r0, #1
 800258c:	d0e6      	beq.n	800255c <_printf_common+0xa4>
 800258e:	3601      	adds	r6, #1
 8002590:	e7d9      	b.n	8002546 <_printf_common+0x8e>
	...

08002594 <_printf_i>:
 8002594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002598:	7e0f      	ldrb	r7, [r1, #24]
 800259a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800259c:	2f78      	cmp	r7, #120	; 0x78
 800259e:	4691      	mov	r9, r2
 80025a0:	4680      	mov	r8, r0
 80025a2:	460c      	mov	r4, r1
 80025a4:	469a      	mov	sl, r3
 80025a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80025aa:	d807      	bhi.n	80025bc <_printf_i+0x28>
 80025ac:	2f62      	cmp	r7, #98	; 0x62
 80025ae:	d80a      	bhi.n	80025c6 <_printf_i+0x32>
 80025b0:	2f00      	cmp	r7, #0
 80025b2:	f000 80d8 	beq.w	8002766 <_printf_i+0x1d2>
 80025b6:	2f58      	cmp	r7, #88	; 0x58
 80025b8:	f000 80a3 	beq.w	8002702 <_printf_i+0x16e>
 80025bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025c4:	e03a      	b.n	800263c <_printf_i+0xa8>
 80025c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025ca:	2b15      	cmp	r3, #21
 80025cc:	d8f6      	bhi.n	80025bc <_printf_i+0x28>
 80025ce:	a101      	add	r1, pc, #4	; (adr r1, 80025d4 <_printf_i+0x40>)
 80025d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025d4:	0800262d 	.word	0x0800262d
 80025d8:	08002641 	.word	0x08002641
 80025dc:	080025bd 	.word	0x080025bd
 80025e0:	080025bd 	.word	0x080025bd
 80025e4:	080025bd 	.word	0x080025bd
 80025e8:	080025bd 	.word	0x080025bd
 80025ec:	08002641 	.word	0x08002641
 80025f0:	080025bd 	.word	0x080025bd
 80025f4:	080025bd 	.word	0x080025bd
 80025f8:	080025bd 	.word	0x080025bd
 80025fc:	080025bd 	.word	0x080025bd
 8002600:	0800274d 	.word	0x0800274d
 8002604:	08002671 	.word	0x08002671
 8002608:	0800272f 	.word	0x0800272f
 800260c:	080025bd 	.word	0x080025bd
 8002610:	080025bd 	.word	0x080025bd
 8002614:	0800276f 	.word	0x0800276f
 8002618:	080025bd 	.word	0x080025bd
 800261c:	08002671 	.word	0x08002671
 8002620:	080025bd 	.word	0x080025bd
 8002624:	080025bd 	.word	0x080025bd
 8002628:	08002737 	.word	0x08002737
 800262c:	682b      	ldr	r3, [r5, #0]
 800262e:	1d1a      	adds	r2, r3, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	602a      	str	r2, [r5, #0]
 8002634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800263c:	2301      	movs	r3, #1
 800263e:	e0a3      	b.n	8002788 <_printf_i+0x1f4>
 8002640:	6820      	ldr	r0, [r4, #0]
 8002642:	6829      	ldr	r1, [r5, #0]
 8002644:	0606      	lsls	r6, r0, #24
 8002646:	f101 0304 	add.w	r3, r1, #4
 800264a:	d50a      	bpl.n	8002662 <_printf_i+0xce>
 800264c:	680e      	ldr	r6, [r1, #0]
 800264e:	602b      	str	r3, [r5, #0]
 8002650:	2e00      	cmp	r6, #0
 8002652:	da03      	bge.n	800265c <_printf_i+0xc8>
 8002654:	232d      	movs	r3, #45	; 0x2d
 8002656:	4276      	negs	r6, r6
 8002658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800265c:	485e      	ldr	r0, [pc, #376]	; (80027d8 <_printf_i+0x244>)
 800265e:	230a      	movs	r3, #10
 8002660:	e019      	b.n	8002696 <_printf_i+0x102>
 8002662:	680e      	ldr	r6, [r1, #0]
 8002664:	602b      	str	r3, [r5, #0]
 8002666:	f010 0f40 	tst.w	r0, #64	; 0x40
 800266a:	bf18      	it	ne
 800266c:	b236      	sxthne	r6, r6
 800266e:	e7ef      	b.n	8002650 <_printf_i+0xbc>
 8002670:	682b      	ldr	r3, [r5, #0]
 8002672:	6820      	ldr	r0, [r4, #0]
 8002674:	1d19      	adds	r1, r3, #4
 8002676:	6029      	str	r1, [r5, #0]
 8002678:	0601      	lsls	r1, r0, #24
 800267a:	d501      	bpl.n	8002680 <_printf_i+0xec>
 800267c:	681e      	ldr	r6, [r3, #0]
 800267e:	e002      	b.n	8002686 <_printf_i+0xf2>
 8002680:	0646      	lsls	r6, r0, #25
 8002682:	d5fb      	bpl.n	800267c <_printf_i+0xe8>
 8002684:	881e      	ldrh	r6, [r3, #0]
 8002686:	4854      	ldr	r0, [pc, #336]	; (80027d8 <_printf_i+0x244>)
 8002688:	2f6f      	cmp	r7, #111	; 0x6f
 800268a:	bf0c      	ite	eq
 800268c:	2308      	moveq	r3, #8
 800268e:	230a      	movne	r3, #10
 8002690:	2100      	movs	r1, #0
 8002692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002696:	6865      	ldr	r5, [r4, #4]
 8002698:	60a5      	str	r5, [r4, #8]
 800269a:	2d00      	cmp	r5, #0
 800269c:	bfa2      	ittt	ge
 800269e:	6821      	ldrge	r1, [r4, #0]
 80026a0:	f021 0104 	bicge.w	r1, r1, #4
 80026a4:	6021      	strge	r1, [r4, #0]
 80026a6:	b90e      	cbnz	r6, 80026ac <_printf_i+0x118>
 80026a8:	2d00      	cmp	r5, #0
 80026aa:	d04d      	beq.n	8002748 <_printf_i+0x1b4>
 80026ac:	4615      	mov	r5, r2
 80026ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80026b2:	fb03 6711 	mls	r7, r3, r1, r6
 80026b6:	5dc7      	ldrb	r7, [r0, r7]
 80026b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80026bc:	4637      	mov	r7, r6
 80026be:	42bb      	cmp	r3, r7
 80026c0:	460e      	mov	r6, r1
 80026c2:	d9f4      	bls.n	80026ae <_printf_i+0x11a>
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d10b      	bne.n	80026e0 <_printf_i+0x14c>
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	07de      	lsls	r6, r3, #31
 80026cc:	d508      	bpl.n	80026e0 <_printf_i+0x14c>
 80026ce:	6923      	ldr	r3, [r4, #16]
 80026d0:	6861      	ldr	r1, [r4, #4]
 80026d2:	4299      	cmp	r1, r3
 80026d4:	bfde      	ittt	le
 80026d6:	2330      	movle	r3, #48	; 0x30
 80026d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026e0:	1b52      	subs	r2, r2, r5
 80026e2:	6122      	str	r2, [r4, #16]
 80026e4:	f8cd a000 	str.w	sl, [sp]
 80026e8:	464b      	mov	r3, r9
 80026ea:	aa03      	add	r2, sp, #12
 80026ec:	4621      	mov	r1, r4
 80026ee:	4640      	mov	r0, r8
 80026f0:	f7ff fee2 	bl	80024b8 <_printf_common>
 80026f4:	3001      	adds	r0, #1
 80026f6:	d14c      	bne.n	8002792 <_printf_i+0x1fe>
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	b004      	add	sp, #16
 80026fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002702:	4835      	ldr	r0, [pc, #212]	; (80027d8 <_printf_i+0x244>)
 8002704:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002708:	6829      	ldr	r1, [r5, #0]
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002710:	6029      	str	r1, [r5, #0]
 8002712:	061d      	lsls	r5, r3, #24
 8002714:	d514      	bpl.n	8002740 <_printf_i+0x1ac>
 8002716:	07df      	lsls	r7, r3, #31
 8002718:	bf44      	itt	mi
 800271a:	f043 0320 	orrmi.w	r3, r3, #32
 800271e:	6023      	strmi	r3, [r4, #0]
 8002720:	b91e      	cbnz	r6, 800272a <_printf_i+0x196>
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	f023 0320 	bic.w	r3, r3, #32
 8002728:	6023      	str	r3, [r4, #0]
 800272a:	2310      	movs	r3, #16
 800272c:	e7b0      	b.n	8002690 <_printf_i+0xfc>
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	f043 0320 	orr.w	r3, r3, #32
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	2378      	movs	r3, #120	; 0x78
 8002738:	4828      	ldr	r0, [pc, #160]	; (80027dc <_printf_i+0x248>)
 800273a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800273e:	e7e3      	b.n	8002708 <_printf_i+0x174>
 8002740:	0659      	lsls	r1, r3, #25
 8002742:	bf48      	it	mi
 8002744:	b2b6      	uxthmi	r6, r6
 8002746:	e7e6      	b.n	8002716 <_printf_i+0x182>
 8002748:	4615      	mov	r5, r2
 800274a:	e7bb      	b.n	80026c4 <_printf_i+0x130>
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	6826      	ldr	r6, [r4, #0]
 8002750:	6961      	ldr	r1, [r4, #20]
 8002752:	1d18      	adds	r0, r3, #4
 8002754:	6028      	str	r0, [r5, #0]
 8002756:	0635      	lsls	r5, r6, #24
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	d501      	bpl.n	8002760 <_printf_i+0x1cc>
 800275c:	6019      	str	r1, [r3, #0]
 800275e:	e002      	b.n	8002766 <_printf_i+0x1d2>
 8002760:	0670      	lsls	r0, r6, #25
 8002762:	d5fb      	bpl.n	800275c <_printf_i+0x1c8>
 8002764:	8019      	strh	r1, [r3, #0]
 8002766:	2300      	movs	r3, #0
 8002768:	6123      	str	r3, [r4, #16]
 800276a:	4615      	mov	r5, r2
 800276c:	e7ba      	b.n	80026e4 <_printf_i+0x150>
 800276e:	682b      	ldr	r3, [r5, #0]
 8002770:	1d1a      	adds	r2, r3, #4
 8002772:	602a      	str	r2, [r5, #0]
 8002774:	681d      	ldr	r5, [r3, #0]
 8002776:	6862      	ldr	r2, [r4, #4]
 8002778:	2100      	movs	r1, #0
 800277a:	4628      	mov	r0, r5
 800277c:	f7fd fd38 	bl	80001f0 <memchr>
 8002780:	b108      	cbz	r0, 8002786 <_printf_i+0x1f2>
 8002782:	1b40      	subs	r0, r0, r5
 8002784:	6060      	str	r0, [r4, #4]
 8002786:	6863      	ldr	r3, [r4, #4]
 8002788:	6123      	str	r3, [r4, #16]
 800278a:	2300      	movs	r3, #0
 800278c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002790:	e7a8      	b.n	80026e4 <_printf_i+0x150>
 8002792:	6923      	ldr	r3, [r4, #16]
 8002794:	462a      	mov	r2, r5
 8002796:	4649      	mov	r1, r9
 8002798:	4640      	mov	r0, r8
 800279a:	47d0      	blx	sl
 800279c:	3001      	adds	r0, #1
 800279e:	d0ab      	beq.n	80026f8 <_printf_i+0x164>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	079b      	lsls	r3, r3, #30
 80027a4:	d413      	bmi.n	80027ce <_printf_i+0x23a>
 80027a6:	68e0      	ldr	r0, [r4, #12]
 80027a8:	9b03      	ldr	r3, [sp, #12]
 80027aa:	4298      	cmp	r0, r3
 80027ac:	bfb8      	it	lt
 80027ae:	4618      	movlt	r0, r3
 80027b0:	e7a4      	b.n	80026fc <_printf_i+0x168>
 80027b2:	2301      	movs	r3, #1
 80027b4:	4632      	mov	r2, r6
 80027b6:	4649      	mov	r1, r9
 80027b8:	4640      	mov	r0, r8
 80027ba:	47d0      	blx	sl
 80027bc:	3001      	adds	r0, #1
 80027be:	d09b      	beq.n	80026f8 <_printf_i+0x164>
 80027c0:	3501      	adds	r5, #1
 80027c2:	68e3      	ldr	r3, [r4, #12]
 80027c4:	9903      	ldr	r1, [sp, #12]
 80027c6:	1a5b      	subs	r3, r3, r1
 80027c8:	42ab      	cmp	r3, r5
 80027ca:	dcf2      	bgt.n	80027b2 <_printf_i+0x21e>
 80027cc:	e7eb      	b.n	80027a6 <_printf_i+0x212>
 80027ce:	2500      	movs	r5, #0
 80027d0:	f104 0619 	add.w	r6, r4, #25
 80027d4:	e7f5      	b.n	80027c2 <_printf_i+0x22e>
 80027d6:	bf00      	nop
 80027d8:	08002b59 	.word	0x08002b59
 80027dc:	08002b6a 	.word	0x08002b6a

080027e0 <memcpy>:
 80027e0:	440a      	add	r2, r1
 80027e2:	4291      	cmp	r1, r2
 80027e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80027e8:	d100      	bne.n	80027ec <memcpy+0xc>
 80027ea:	4770      	bx	lr
 80027ec:	b510      	push	{r4, lr}
 80027ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027f6:	4291      	cmp	r1, r2
 80027f8:	d1f9      	bne.n	80027ee <memcpy+0xe>
 80027fa:	bd10      	pop	{r4, pc}

080027fc <memmove>:
 80027fc:	4288      	cmp	r0, r1
 80027fe:	b510      	push	{r4, lr}
 8002800:	eb01 0402 	add.w	r4, r1, r2
 8002804:	d902      	bls.n	800280c <memmove+0x10>
 8002806:	4284      	cmp	r4, r0
 8002808:	4623      	mov	r3, r4
 800280a:	d807      	bhi.n	800281c <memmove+0x20>
 800280c:	1e43      	subs	r3, r0, #1
 800280e:	42a1      	cmp	r1, r4
 8002810:	d008      	beq.n	8002824 <memmove+0x28>
 8002812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800281a:	e7f8      	b.n	800280e <memmove+0x12>
 800281c:	4402      	add	r2, r0
 800281e:	4601      	mov	r1, r0
 8002820:	428a      	cmp	r2, r1
 8002822:	d100      	bne.n	8002826 <memmove+0x2a>
 8002824:	bd10      	pop	{r4, pc}
 8002826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800282a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800282e:	e7f7      	b.n	8002820 <memmove+0x24>

08002830 <_free_r>:
 8002830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002832:	2900      	cmp	r1, #0
 8002834:	d044      	beq.n	80028c0 <_free_r+0x90>
 8002836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800283a:	9001      	str	r0, [sp, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f1a1 0404 	sub.w	r4, r1, #4
 8002842:	bfb8      	it	lt
 8002844:	18e4      	addlt	r4, r4, r3
 8002846:	f000 f913 	bl	8002a70 <__malloc_lock>
 800284a:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <_free_r+0x94>)
 800284c:	9801      	ldr	r0, [sp, #4]
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	b933      	cbnz	r3, 8002860 <_free_r+0x30>
 8002852:	6063      	str	r3, [r4, #4]
 8002854:	6014      	str	r4, [r2, #0]
 8002856:	b003      	add	sp, #12
 8002858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800285c:	f000 b90e 	b.w	8002a7c <__malloc_unlock>
 8002860:	42a3      	cmp	r3, r4
 8002862:	d908      	bls.n	8002876 <_free_r+0x46>
 8002864:	6825      	ldr	r5, [r4, #0]
 8002866:	1961      	adds	r1, r4, r5
 8002868:	428b      	cmp	r3, r1
 800286a:	bf01      	itttt	eq
 800286c:	6819      	ldreq	r1, [r3, #0]
 800286e:	685b      	ldreq	r3, [r3, #4]
 8002870:	1949      	addeq	r1, r1, r5
 8002872:	6021      	streq	r1, [r4, #0]
 8002874:	e7ed      	b.n	8002852 <_free_r+0x22>
 8002876:	461a      	mov	r2, r3
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	b10b      	cbz	r3, 8002880 <_free_r+0x50>
 800287c:	42a3      	cmp	r3, r4
 800287e:	d9fa      	bls.n	8002876 <_free_r+0x46>
 8002880:	6811      	ldr	r1, [r2, #0]
 8002882:	1855      	adds	r5, r2, r1
 8002884:	42a5      	cmp	r5, r4
 8002886:	d10b      	bne.n	80028a0 <_free_r+0x70>
 8002888:	6824      	ldr	r4, [r4, #0]
 800288a:	4421      	add	r1, r4
 800288c:	1854      	adds	r4, r2, r1
 800288e:	42a3      	cmp	r3, r4
 8002890:	6011      	str	r1, [r2, #0]
 8002892:	d1e0      	bne.n	8002856 <_free_r+0x26>
 8002894:	681c      	ldr	r4, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	6053      	str	r3, [r2, #4]
 800289a:	4421      	add	r1, r4
 800289c:	6011      	str	r1, [r2, #0]
 800289e:	e7da      	b.n	8002856 <_free_r+0x26>
 80028a0:	d902      	bls.n	80028a8 <_free_r+0x78>
 80028a2:	230c      	movs	r3, #12
 80028a4:	6003      	str	r3, [r0, #0]
 80028a6:	e7d6      	b.n	8002856 <_free_r+0x26>
 80028a8:	6825      	ldr	r5, [r4, #0]
 80028aa:	1961      	adds	r1, r4, r5
 80028ac:	428b      	cmp	r3, r1
 80028ae:	bf04      	itt	eq
 80028b0:	6819      	ldreq	r1, [r3, #0]
 80028b2:	685b      	ldreq	r3, [r3, #4]
 80028b4:	6063      	str	r3, [r4, #4]
 80028b6:	bf04      	itt	eq
 80028b8:	1949      	addeq	r1, r1, r5
 80028ba:	6021      	streq	r1, [r4, #0]
 80028bc:	6054      	str	r4, [r2, #4]
 80028be:	e7ca      	b.n	8002856 <_free_r+0x26>
 80028c0:	b003      	add	sp, #12
 80028c2:	bd30      	pop	{r4, r5, pc}
 80028c4:	200000d8 	.word	0x200000d8

080028c8 <sbrk_aligned>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	4e0e      	ldr	r6, [pc, #56]	; (8002904 <sbrk_aligned+0x3c>)
 80028cc:	460c      	mov	r4, r1
 80028ce:	6831      	ldr	r1, [r6, #0]
 80028d0:	4605      	mov	r5, r0
 80028d2:	b911      	cbnz	r1, 80028da <sbrk_aligned+0x12>
 80028d4:	f000 f8bc 	bl	8002a50 <_sbrk_r>
 80028d8:	6030      	str	r0, [r6, #0]
 80028da:	4621      	mov	r1, r4
 80028dc:	4628      	mov	r0, r5
 80028de:	f000 f8b7 	bl	8002a50 <_sbrk_r>
 80028e2:	1c43      	adds	r3, r0, #1
 80028e4:	d00a      	beq.n	80028fc <sbrk_aligned+0x34>
 80028e6:	1cc4      	adds	r4, r0, #3
 80028e8:	f024 0403 	bic.w	r4, r4, #3
 80028ec:	42a0      	cmp	r0, r4
 80028ee:	d007      	beq.n	8002900 <sbrk_aligned+0x38>
 80028f0:	1a21      	subs	r1, r4, r0
 80028f2:	4628      	mov	r0, r5
 80028f4:	f000 f8ac 	bl	8002a50 <_sbrk_r>
 80028f8:	3001      	adds	r0, #1
 80028fa:	d101      	bne.n	8002900 <sbrk_aligned+0x38>
 80028fc:	f04f 34ff 	mov.w	r4, #4294967295
 8002900:	4620      	mov	r0, r4
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	200000dc 	.word	0x200000dc

08002908 <_malloc_r>:
 8002908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800290c:	1ccd      	adds	r5, r1, #3
 800290e:	f025 0503 	bic.w	r5, r5, #3
 8002912:	3508      	adds	r5, #8
 8002914:	2d0c      	cmp	r5, #12
 8002916:	bf38      	it	cc
 8002918:	250c      	movcc	r5, #12
 800291a:	2d00      	cmp	r5, #0
 800291c:	4607      	mov	r7, r0
 800291e:	db01      	blt.n	8002924 <_malloc_r+0x1c>
 8002920:	42a9      	cmp	r1, r5
 8002922:	d905      	bls.n	8002930 <_malloc_r+0x28>
 8002924:	230c      	movs	r3, #12
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	2600      	movs	r6, #0
 800292a:	4630      	mov	r0, r6
 800292c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002930:	4e2e      	ldr	r6, [pc, #184]	; (80029ec <_malloc_r+0xe4>)
 8002932:	f000 f89d 	bl	8002a70 <__malloc_lock>
 8002936:	6833      	ldr	r3, [r6, #0]
 8002938:	461c      	mov	r4, r3
 800293a:	bb34      	cbnz	r4, 800298a <_malloc_r+0x82>
 800293c:	4629      	mov	r1, r5
 800293e:	4638      	mov	r0, r7
 8002940:	f7ff ffc2 	bl	80028c8 <sbrk_aligned>
 8002944:	1c43      	adds	r3, r0, #1
 8002946:	4604      	mov	r4, r0
 8002948:	d14d      	bne.n	80029e6 <_malloc_r+0xde>
 800294a:	6834      	ldr	r4, [r6, #0]
 800294c:	4626      	mov	r6, r4
 800294e:	2e00      	cmp	r6, #0
 8002950:	d140      	bne.n	80029d4 <_malloc_r+0xcc>
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	4631      	mov	r1, r6
 8002956:	4638      	mov	r0, r7
 8002958:	eb04 0803 	add.w	r8, r4, r3
 800295c:	f000 f878 	bl	8002a50 <_sbrk_r>
 8002960:	4580      	cmp	r8, r0
 8002962:	d13a      	bne.n	80029da <_malloc_r+0xd2>
 8002964:	6821      	ldr	r1, [r4, #0]
 8002966:	3503      	adds	r5, #3
 8002968:	1a6d      	subs	r5, r5, r1
 800296a:	f025 0503 	bic.w	r5, r5, #3
 800296e:	3508      	adds	r5, #8
 8002970:	2d0c      	cmp	r5, #12
 8002972:	bf38      	it	cc
 8002974:	250c      	movcc	r5, #12
 8002976:	4629      	mov	r1, r5
 8002978:	4638      	mov	r0, r7
 800297a:	f7ff ffa5 	bl	80028c8 <sbrk_aligned>
 800297e:	3001      	adds	r0, #1
 8002980:	d02b      	beq.n	80029da <_malloc_r+0xd2>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	442b      	add	r3, r5
 8002986:	6023      	str	r3, [r4, #0]
 8002988:	e00e      	b.n	80029a8 <_malloc_r+0xa0>
 800298a:	6822      	ldr	r2, [r4, #0]
 800298c:	1b52      	subs	r2, r2, r5
 800298e:	d41e      	bmi.n	80029ce <_malloc_r+0xc6>
 8002990:	2a0b      	cmp	r2, #11
 8002992:	d916      	bls.n	80029c2 <_malloc_r+0xba>
 8002994:	1961      	adds	r1, r4, r5
 8002996:	42a3      	cmp	r3, r4
 8002998:	6025      	str	r5, [r4, #0]
 800299a:	bf18      	it	ne
 800299c:	6059      	strne	r1, [r3, #4]
 800299e:	6863      	ldr	r3, [r4, #4]
 80029a0:	bf08      	it	eq
 80029a2:	6031      	streq	r1, [r6, #0]
 80029a4:	5162      	str	r2, [r4, r5]
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	4638      	mov	r0, r7
 80029aa:	f104 060b 	add.w	r6, r4, #11
 80029ae:	f000 f865 	bl	8002a7c <__malloc_unlock>
 80029b2:	f026 0607 	bic.w	r6, r6, #7
 80029b6:	1d23      	adds	r3, r4, #4
 80029b8:	1af2      	subs	r2, r6, r3
 80029ba:	d0b6      	beq.n	800292a <_malloc_r+0x22>
 80029bc:	1b9b      	subs	r3, r3, r6
 80029be:	50a3      	str	r3, [r4, r2]
 80029c0:	e7b3      	b.n	800292a <_malloc_r+0x22>
 80029c2:	6862      	ldr	r2, [r4, #4]
 80029c4:	42a3      	cmp	r3, r4
 80029c6:	bf0c      	ite	eq
 80029c8:	6032      	streq	r2, [r6, #0]
 80029ca:	605a      	strne	r2, [r3, #4]
 80029cc:	e7ec      	b.n	80029a8 <_malloc_r+0xa0>
 80029ce:	4623      	mov	r3, r4
 80029d0:	6864      	ldr	r4, [r4, #4]
 80029d2:	e7b2      	b.n	800293a <_malloc_r+0x32>
 80029d4:	4634      	mov	r4, r6
 80029d6:	6876      	ldr	r6, [r6, #4]
 80029d8:	e7b9      	b.n	800294e <_malloc_r+0x46>
 80029da:	230c      	movs	r3, #12
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	4638      	mov	r0, r7
 80029e0:	f000 f84c 	bl	8002a7c <__malloc_unlock>
 80029e4:	e7a1      	b.n	800292a <_malloc_r+0x22>
 80029e6:	6025      	str	r5, [r4, #0]
 80029e8:	e7de      	b.n	80029a8 <_malloc_r+0xa0>
 80029ea:	bf00      	nop
 80029ec:	200000d8 	.word	0x200000d8

080029f0 <_realloc_r>:
 80029f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029f4:	4680      	mov	r8, r0
 80029f6:	4614      	mov	r4, r2
 80029f8:	460e      	mov	r6, r1
 80029fa:	b921      	cbnz	r1, 8002a06 <_realloc_r+0x16>
 80029fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a00:	4611      	mov	r1, r2
 8002a02:	f7ff bf81 	b.w	8002908 <_malloc_r>
 8002a06:	b92a      	cbnz	r2, 8002a14 <_realloc_r+0x24>
 8002a08:	f7ff ff12 	bl	8002830 <_free_r>
 8002a0c:	4625      	mov	r5, r4
 8002a0e:	4628      	mov	r0, r5
 8002a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a14:	f000 f838 	bl	8002a88 <_malloc_usable_size_r>
 8002a18:	4284      	cmp	r4, r0
 8002a1a:	4607      	mov	r7, r0
 8002a1c:	d802      	bhi.n	8002a24 <_realloc_r+0x34>
 8002a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a22:	d812      	bhi.n	8002a4a <_realloc_r+0x5a>
 8002a24:	4621      	mov	r1, r4
 8002a26:	4640      	mov	r0, r8
 8002a28:	f7ff ff6e 	bl	8002908 <_malloc_r>
 8002a2c:	4605      	mov	r5, r0
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d0ed      	beq.n	8002a0e <_realloc_r+0x1e>
 8002a32:	42bc      	cmp	r4, r7
 8002a34:	4622      	mov	r2, r4
 8002a36:	4631      	mov	r1, r6
 8002a38:	bf28      	it	cs
 8002a3a:	463a      	movcs	r2, r7
 8002a3c:	f7ff fed0 	bl	80027e0 <memcpy>
 8002a40:	4631      	mov	r1, r6
 8002a42:	4640      	mov	r0, r8
 8002a44:	f7ff fef4 	bl	8002830 <_free_r>
 8002a48:	e7e1      	b.n	8002a0e <_realloc_r+0x1e>
 8002a4a:	4635      	mov	r5, r6
 8002a4c:	e7df      	b.n	8002a0e <_realloc_r+0x1e>
	...

08002a50 <_sbrk_r>:
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4d06      	ldr	r5, [pc, #24]	; (8002a6c <_sbrk_r+0x1c>)
 8002a54:	2300      	movs	r3, #0
 8002a56:	4604      	mov	r4, r0
 8002a58:	4608      	mov	r0, r1
 8002a5a:	602b      	str	r3, [r5, #0]
 8002a5c:	f7fd ff32 	bl	80008c4 <_sbrk>
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	d102      	bne.n	8002a6a <_sbrk_r+0x1a>
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	b103      	cbz	r3, 8002a6a <_sbrk_r+0x1a>
 8002a68:	6023      	str	r3, [r4, #0]
 8002a6a:	bd38      	pop	{r3, r4, r5, pc}
 8002a6c:	200000e0 	.word	0x200000e0

08002a70 <__malloc_lock>:
 8002a70:	4801      	ldr	r0, [pc, #4]	; (8002a78 <__malloc_lock+0x8>)
 8002a72:	f000 b811 	b.w	8002a98 <__retarget_lock_acquire_recursive>
 8002a76:	bf00      	nop
 8002a78:	200000e4 	.word	0x200000e4

08002a7c <__malloc_unlock>:
 8002a7c:	4801      	ldr	r0, [pc, #4]	; (8002a84 <__malloc_unlock+0x8>)
 8002a7e:	f000 b80c 	b.w	8002a9a <__retarget_lock_release_recursive>
 8002a82:	bf00      	nop
 8002a84:	200000e4 	.word	0x200000e4

08002a88 <_malloc_usable_size_r>:
 8002a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a8c:	1f18      	subs	r0, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bfbc      	itt	lt
 8002a92:	580b      	ldrlt	r3, [r1, r0]
 8002a94:	18c0      	addlt	r0, r0, r3
 8002a96:	4770      	bx	lr

08002a98 <__retarget_lock_acquire_recursive>:
 8002a98:	4770      	bx	lr

08002a9a <__retarget_lock_release_recursive>:
 8002a9a:	4770      	bx	lr

08002a9c <_init>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr

08002aa8 <_fini>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr
