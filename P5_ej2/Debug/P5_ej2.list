
P5_ej2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800305c  0800305c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003064  08003064  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800306c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000084  080030f0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080030f0  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a4f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019aa  00000000  00000000  00028b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015669  00000000  00000000  0002b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c33  00000000  00000000  000408b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d6a  00000000  00000000  0004a4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d024e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f0c  00000000  00000000  000d02a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002f44 	.word	0x08002f44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08002f44 	.word	0x08002f44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
static void MX_GPIO_Init(void);



int main(void)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b090      	sub	sp, #64	; 0x40
 8000598:	af00      	add	r7, sp, #0

  HAL_Init();
 800059a:	f000 fbaf 	bl	8000cfc <HAL_Init>

  SystemClock_Config();
 800059e:	f000 f873 	bl	8000688 <SystemClock_Config>


  MX_GPIO_Init();
 80005a2:	f000 f8dd 	bl	8000760 <MX_GPIO_Init>


  //Inicializamos la UART
  uartInit();
 80005a6:	f000 fb43 	bl	8000c30 <uartInit>

  // Inicializar los LEDs utilizando la biblioteca BSP
  BSP_LED_Init(LED1); // LED amarillo
 80005aa:	2000      	movs	r0, #0
 80005ac:	f001 ff54 	bl	8002458 <BSP_LED_Init>
  BSP_LED_Init(LED2); // LED incorporado
 80005b0:	2001      	movs	r0, #1
 80005b2:	f001 ff51 	bl	8002458 <BSP_LED_Init>
  BSP_LED_Init(LED3); // LED verde
 80005b6:	2002      	movs	r0, #2
 80005b8:	f001 ff4e 	bl	8002458 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80005bc:	2100      	movs	r1, #0
 80005be:	2000      	movs	r0, #0
 80005c0:	f001 ffb4 	bl	800252c <BSP_PB_Init>

  //Iniciamos en el primer estado:
  debounceFSM_init();
 80005c4:	f000 fa4c 	bl	8000a60 <debounceFSM_init>
  delayInit(&toggleFrequency, START_PERIOD);
 80005c8:	2100      	movs	r1, #0
 80005ca:	4829      	ldr	r0, [pc, #164]	; (8000670 <main+0xdc>)
 80005cc:	f000 fae6 	bl	8000b9c <delayInit>



  while (1)
  {
	  debounceFSM_update();
 80005d0:	f000 fa62 	bl	8000a98 <debounceFSM_update>

	  if(delayRead(&toggleFrequency))
 80005d4:	4826      	ldr	r0, [pc, #152]	; (8000670 <main+0xdc>)
 80005d6:	f000 faf2 	bl	8000bbe <delayRead>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d019      	beq.n	8000614 <main+0x80>
	  {
			  if(readKey())
 80005e0:	f000 fac4 	bl	8000b6c <readKey>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d00b      	beq.n	8000602 <main+0x6e>
		  {
			  if(actualFrequency == SHORT_PERIOD_MS)
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <main+0xe0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b64      	cmp	r3, #100	; 0x64
 80005f0:	d104      	bne.n	80005fc <main+0x68>
			  {
				  actualFrequency = LONG_PERIOD_MS;
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <main+0xe0>)
 80005f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	e002      	b.n	8000602 <main+0x6e>
			  } else {
				  actualFrequency = SHORT_PERIOD_MS;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <main+0xe0>)
 80005fe:	2264      	movs	r2, #100	; 0x64
 8000600:	601a      	str	r2, [r3, #0]
			  }

		  }
			  BSP_LED_Toggle(LED2);
 8000602:	2001      	movs	r0, #1
 8000604:	f001 ff78 	bl	80024f8 <BSP_LED_Toggle>
			  delayWrite(&toggleFrequency, actualFrequency);
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <main+0xe0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	4818      	ldr	r0, [pc, #96]	; (8000670 <main+0xdc>)
 8000610:	f000 faff 	bl	8000c12 <delayWrite>
	  }

	  //verificar flancos:
	  if(buttonPressed)
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <main+0xe4>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d014      	beq.n	8000646 <main+0xb2>
	  {
		  char msg[] = "Flanco ascendente detectado \r\n";
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <main+0xe8>)
 800061e:	f107 0420 	add.w	r4, r7, #32
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800062c:	c407      	stmia	r4!, {r0, r1, r2}
 800062e:	8023      	strh	r3, [r4, #0]
 8000630:	3402      	adds	r4, #2
 8000632:	0c1b      	lsrs	r3, r3, #16
 8000634:	7023      	strb	r3, [r4, #0]
		  uartSendString((uint8_t*)msg);
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fb22 	bl	8000c84 <uartSendString>
		  buttonPressed = false; //reiniciamos flag.
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <main+0xe4>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	  }

	  if(buttonReleased)
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <main+0xec>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0c0      	beq.n	80005d0 <main+0x3c>
	  {
		  char msg[] = "Flanco descendente detectado \r\n";
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <main+0xf0>)
 8000650:	463c      	mov	r4, r7
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800065c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  uartSendString((uint8_t*)msg);
 8000660:	463b      	mov	r3, r7
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fb0e 	bl	8000c84 <uartSendString>
		  buttonReleased = false;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <main+0xec>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
	  debounceFSM_update();
 800066e:	e7af      	b.n	80005d0 <main+0x3c>
 8000670:	200000a0 	.word	0x200000a0
 8000674:	20000000 	.word	0x20000000
 8000678:	200000c1 	.word	0x200000c1
 800067c:	08002f5c 	.word	0x08002f5c
 8000680:	200000c2 	.word	0x200000c2
 8000684:	08002f7c 	.word	0x08002f7c

08000688 <SystemClock_Config>:
	  }
  }
}

void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 ffde 	bl	8002658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemClock_Config+0xd0>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <SystemClock_Config+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xd4>)
 80006d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xd4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2310      	movs	r3, #16
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006fc:	2310      	movs	r3, #16
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000700:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000706:	2304      	movs	r3, #4
 8000708:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800070a:	2307      	movs	r3, #7
 800070c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fe46 	bl	80013a4 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800071e:	f000 f88d 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2102      	movs	r1, #2
 800073e:	4618      	mov	r0, r3
 8000740:	f001 f8a8 	bl	8001894 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074a:	f000 f877 	bl	800083c <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a25      	ldr	r2, [pc, #148]	; (8000830 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4812      	ldr	r0, [pc, #72]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007ec:	f000 fda6 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_GPIO_Init+0xd8>)
 8000808:	f000 fbfc 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080c:	2320      	movs	r3, #32
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000824:	f000 fbee 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020800 	.word	0x40020800

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000886:	2007      	movs	r0, #7
 8000888:	f000 fb7a 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a19      	ldr	r2, [pc, #100]	; (800091c <HAL_UART_MspInit+0x84>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d12b      	bne.n	8000912 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_UART_MspInit+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f2:	230c      	movs	r3, #12
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000902:	2307      	movs	r3, #7
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <HAL_UART_MspInit+0x8c>)
 800090e:	f000 fb79 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40004400 	.word	0x40004400
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 fa14 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <_sbrk+0x5c>)
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <_sbrk+0x60>)
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <_sbrk+0x64>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <_sbrk+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d207      	bcs.n	80009bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ac:	f001 fe2a 	bl	8002604 <__errno>
 80009b0:	4603      	mov	r3, r0
 80009b2:	220c      	movs	r2, #12
 80009b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e009      	b.n	80009d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <_sbrk+0x64>)
 80009cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20018000 	.word	0x20018000
 80009dc:	00000400 	.word	0x00000400
 80009e0:	200000ac 	.word	0x200000ac
 80009e4:	20000120 	.word	0x20000120

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd7 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f001 fde9 	bl	8002610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fda9 	bl	8000594 <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000a50:	0800306c 	.word	0x0800306c
  ldr r2, =_sbss
 8000a54:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000a58:	2000011c 	.word	0x2000011c

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <debounceFSM_init>:
 *         bloqueado en este estado hasta que se reinicie.
 *
 * @retval None
 */
void debounceFSM_init()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
	GPIO_PinState buttonState = BSP_PB_GetState(BUTTON_USER);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f001 fdb6 	bl	80025d8 <BSP_PB_GetState>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71fb      	strb	r3, [r7, #7]
	if(buttonState == GPIO_PIN_RESET)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <debounceFSM_init+0x1a>
	{
		error_Handler();
 8000a76:	f000 f88b 	bl	8000b90 <error_Handler>
	}

	currentState = BUTTON_UP;
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <debounceFSM_init+0x30>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceDelay, DEBOUNCE_TIME_MS);
 8000a80:	2128      	movs	r1, #40	; 0x28
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <debounceFSM_init+0x34>)
 8000a84:	f000 f88a 	bl	8000b9c <delayInit>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000b0 	.word	0x200000b0
 8000a94:	200000b4 	.word	0x200000b4

08000a98 <debounceFSM_update>:
 *         de estado necesarias de acuerdo a la técnica de anti-rebote implementada.
 *
 * @retval None
 */
void debounceFSM_update()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	GPIO_PinState buttonState = BSP_PB_GetState(BUTTON_USER);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f001 fd9a 	bl	80025d8 <BSP_PB_GetState>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]

	switch(currentState){
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <debounceFSM_update+0xc0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d844      	bhi.n	8000b3a <debounceFSM_update+0xa2>
 8000ab0:	a201      	add	r2, pc, #4	; (adr r2, 8000ab8 <debounceFSM_update+0x20>)
 8000ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab6:	bf00      	nop
 8000ab8:	08000ac9 	.word	0x08000ac9
 8000abc:	08000adf 	.word	0x08000adf
 8000ac0:	08000aff 	.word	0x08000aff
 8000ac4:	08000b15 	.word	0x08000b15
	case BUTTON_UP:
		if (buttonState == GPIO_PIN_RESET)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d139      	bne.n	8000b42 <debounceFSM_update+0xaa>
		{
			currentState = BUTTON_FALLING;
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <debounceFSM_update+0xc0>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
			delayWrite(&debounceDelay, DEBOUNCE_TIME_MS);
 8000ad4:	2128      	movs	r1, #40	; 0x28
 8000ad6:	4821      	ldr	r0, [pc, #132]	; (8000b5c <debounceFSM_update+0xc4>)
 8000ad8:	f000 f89b 	bl	8000c12 <delayWrite>
		}
	break;
 8000adc:	e031      	b.n	8000b42 <debounceFSM_update+0xaa>

	case BUTTON_FALLING:
		if(delayRead(&debounceDelay))
 8000ade:	481f      	ldr	r0, [pc, #124]	; (8000b5c <debounceFSM_update+0xc4>)
 8000ae0:	f000 f86d 	bl	8000bbe <delayRead>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d02d      	beq.n	8000b46 <debounceFSM_update+0xae>
		{
			currentState = BUTTON_DOWN;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <debounceFSM_update+0xc0>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	701a      	strb	r2, [r3, #0]
			buttonPressedFlag = true;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <debounceFSM_update+0xc8>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
			buttonPressed = true;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <debounceFSM_update+0xcc>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
		}
	break;
 8000afc:	e023      	b.n	8000b46 <debounceFSM_update+0xae>

	case BUTTON_DOWN:
		if(buttonState == GPIO_PIN_SET)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d122      	bne.n	8000b4a <debounceFSM_update+0xb2>
		{
			currentState = BUTTON_RAISING;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <debounceFSM_update+0xc0>)
 8000b06:	2203      	movs	r2, #3
 8000b08:	701a      	strb	r2, [r3, #0]
			delayWrite(&debounceDelay, DEBOUNCE_TIME_MS);
 8000b0a:	2128      	movs	r1, #40	; 0x28
 8000b0c:	4813      	ldr	r0, [pc, #76]	; (8000b5c <debounceFSM_update+0xc4>)
 8000b0e:	f000 f880 	bl	8000c12 <delayWrite>
		}
	break;
 8000b12:	e01a      	b.n	8000b4a <debounceFSM_update+0xb2>

	case BUTTON_RAISING:
		if(delayRead(&debounceDelay))
 8000b14:	4811      	ldr	r0, [pc, #68]	; (8000b5c <debounceFSM_update+0xc4>)
 8000b16:	f000 f852 	bl	8000bbe <delayRead>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d016      	beq.n	8000b4e <debounceFSM_update+0xb6>
		{
			currentState = BUTTON_UP;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <debounceFSM_update+0xc0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
			buttonPressedFlag = false;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <debounceFSM_update+0xc8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
			buttonPressed = false;
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <debounceFSM_update+0xcc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
			buttonReleased = true;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <debounceFSM_update+0xd0>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
		}
	break;
 8000b38:	e009      	b.n	8000b4e <debounceFSM_update+0xb6>

	default:
		currentState = BUTTON_UP;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <debounceFSM_update+0xc0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
	break;
 8000b40:	e006      	b.n	8000b50 <debounceFSM_update+0xb8>
	break;
 8000b42:	bf00      	nop
 8000b44:	e004      	b.n	8000b50 <debounceFSM_update+0xb8>
	break;
 8000b46:	bf00      	nop
 8000b48:	e002      	b.n	8000b50 <debounceFSM_update+0xb8>
	break;
 8000b4a:	bf00      	nop
 8000b4c:	e000      	b.n	8000b50 <debounceFSM_update+0xb8>
	break;
 8000b4e:	bf00      	nop

	}
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200000b0 	.word	0x200000b0
 8000b5c:	200000b4 	.word	0x200000b4
 8000b60:	200000c0 	.word	0x200000c0
 8000b64:	200000c1 	.word	0x200000c1
 8000b68:	200000c2 	.word	0x200000c2

08000b6c <readKey>:
 *         contrario, se devuelve `FALSE`.
 *
 * @return `TRUE` si el botón fue presionado, `FALSE` en caso contrario.
 */
bool_t readKey()
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
	bool_t isButtonPressed = buttonPressedFlag;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <readKey+0x20>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
	buttonPressedFlag = false;
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <readKey+0x20>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
	return isButtonPressed;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	200000c0 	.word	0x200000c0

08000b90 <error_Handler>:
 *         de la MEF. Se recomienda agregar aquí el código de manejo de errores
 *         adecuado para el proyecto.
 * @retval None
 */
void error_Handler()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LED_Toggle(LED_BUILTIN);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f001 fcaf 	bl	80024f8 <BSP_LED_Toggle>
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <error_Handler+0xa>

08000b9c <delayInit>:
#include "API_delay.h"



void delayInit(delay_t *delay, tick_t duration)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
	if(delay == NULL || duration <= 0)
	{

	}

	delay->duration = duration;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	721a      	strb	r2, [r3, #8]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <delayRead>:


bool_t delayRead(delay_t *delay)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b084      	sub	sp, #16
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	if(!delay->running)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7a1b      	ldrb	r3, [r3, #8]
 8000bca:	f083 0301 	eor.w	r3, r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d009      	beq.n	8000be8 <delayRead+0x2a>
	{
		delay->startTime = HAL_GetTick();  	//Obtengo marca de tiempo
 8000bd4:	f000 f8f8 	bl	8000dc8 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]
		delay->running = true;				//cambio estado de running.
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	721a      	strb	r2, [r3, #8]
		} else
		{
			return false;		//no se cumple retardo, sigo contando (run permanece en 1).
		}
	}
	return false; //agregado para solucionar: Warning: control reaches end of non-void function[-Wreturn-type] (tiene que haber retorno en todos los caminos posibles).
 8000be4:	2300      	movs	r3, #0
 8000be6:	e010      	b.n	8000c0a <delayRead+0x4c>
		tick_t tiempoActual = HAL_GetTick();
 8000be8:	f000 f8ee 	bl	8000dc8 <HAL_GetTick>
 8000bec:	60f8      	str	r0, [r7, #12]
		if(tiempoActual - (delay->startTime) >= (delay->duration))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	1ad2      	subs	r2, r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d304      	bcc.n	8000c08 <delayRead+0x4a>
			delay->running = false;  //se cumplio el retardo, cambio running.
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	721a      	strb	r2, [r3, #8]
			return true;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <delayRead+0x4c>
			return false;		//no se cumple retardo, sigo contando (run permanece en 1).
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <delayWrite>:

void delayWrite(delay_t *delay, tick_t duration)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	if(delay == NULL || duration <= 0)
	{

	}

	delay->duration = duration;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	605a      	str	r2, [r3, #4]
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <uartInit>:

//Prototipo de funcion privada
static void printUARTConfig();

bool uartInit()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	uartHandle.Instance = USART2;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <uartInit+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <uartInit+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
	uartHandle.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <uartInit+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <uartInit+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
	uartHandle.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <uartInit+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
	uartHandle.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <uartInit+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
	uartHandle.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <uartInit+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <uartInit+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]


	if (HAL_UART_Init(&uartHandle) != HAL_OK)
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <uartInit+0x4c>)
 8000c62:	f001 f837 	bl	8001cd4 <HAL_UART_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <uartInit+0x40>
	{
		return false;// Error en la inicialización de la UART
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e002      	b.n	8000c76 <uartInit+0x46>
	}
	// Imprimir la configuración de la UART en la terminal serie
	printUARTConfig();
 8000c70:	f000 f81e 	bl	8000cb0 <printUARTConfig>
	return true;
 8000c74:	2301      	movs	r3, #1
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000c4 	.word	0x200000c4
 8000c80:	40004400 	.word	0x40004400

08000c84 <uartSendString>:

void uartSendString(uint8_t* pstring)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit(huart, pData, Size, Timeout)
	HAL_UART_Transmit(&uartHandle, pstring, strlen((char*)pstring), HAL_MAX_DELAY);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff faa7 	bl	80001e0 <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <uartSendString+0x28>)
 8000c9e:	f001 f866 	bl	8001d6e <HAL_UART_Transmit>

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000c4 	.word	0x200000c4

08000cb0 <printUARTConfig>:
}



static void printUARTConfig()
{
 8000cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cb2:	b09f      	sub	sp, #124	; 0x7c
 8000cb4:	af04      	add	r7, sp, #16
	char msg[100];

	sprintf(msg, "UART Config: BaudRate = %lu, WordLength = %lu, StopBits = %lu, Parity = %lu, Mode = %lu, HwFlowCtl = %lu\r\n",
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <printUARTConfig+0x44>)
 8000cb8:	685d      	ldr	r5, [r3, #4]
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <printUARTConfig+0x44>)
 8000cbc:	689e      	ldr	r6, [r3, #8]
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <printUARTConfig+0x44>)
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <printUARTConfig+0x44>)
 8000cc4:	6912      	ldr	r2, [r2, #16]
 8000cc6:	490b      	ldr	r1, [pc, #44]	; (8000cf4 <printUARTConfig+0x44>)
 8000cc8:	6949      	ldr	r1, [r1, #20]
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <printUARTConfig+0x44>)
 8000ccc:	6980      	ldr	r0, [r0, #24]
 8000cce:	1d3c      	adds	r4, r7, #4
 8000cd0:	9003      	str	r0, [sp, #12]
 8000cd2:	9102      	str	r1, [sp, #8]
 8000cd4:	9201      	str	r2, [sp, #4]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4633      	mov	r3, r6
 8000cda:	462a      	mov	r2, r5
 8000cdc:	4906      	ldr	r1, [pc, #24]	; (8000cf8 <printUARTConfig+0x48>)
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f001 fcc2 	bl	8002668 <siprintf>
	        uartHandle.Init.BaudRate, uartHandle.Init.WordLength, uartHandle.Init.StopBits,
	        uartHandle.Init.Parity, uartHandle.Init.Mode, uartHandle.Init.HwFlowCtl);

	uartSendString((uint8_t*)msg);
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ffcc 	bl	8000c84 <uartSendString>

}
 8000cec:	bf00      	nop
 8000cee:	376c      	adds	r7, #108	; 0x6c
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf4:	200000c4 	.word	0x200000c4
 8000cf8:	08002f9c 	.word	0x08002f9c

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f92b 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fd8a 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f943 	bl	8000fea <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f90b 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000004 	.word	0x20000004
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	20000008 	.word	0x20000008

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000000c 	.word	0x2000000c
 8000dc4:	20000108 	.word	0x20000108

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000108 	.word	0x20000108

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff29 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff3e 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff8e 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff31 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffa2 	bl	8000f3c <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e159      	b.n	80012d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 8148 	bne.w	80012ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80a2 	beq.w	80012ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b57      	ldr	r3, [pc, #348]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a56      	ldr	r2, [pc, #344]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b54      	ldr	r3, [pc, #336]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <HAL_GPIO_Init+0x2ec>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a49      	ldr	r2, [pc, #292]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x202>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a48      	ldr	r2, [pc, #288]	; (80012f8 <HAL_GPIO_Init+0x2f4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x1fe>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_GPIO_Init+0x2f8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x1fa>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a46      	ldr	r2, [pc, #280]	; (8001300 <HAL_GPIO_Init+0x2fc>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x1f6>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a45      	ldr	r2, [pc, #276]	; (8001304 <HAL_GPIO_Init+0x300>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x1f2>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x204>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x204>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x204>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x204>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x204>
 8001206:	2300      	movs	r3, #0
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <HAL_GPIO_Init+0x2ec>)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_GPIO_Init+0x304>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <HAL_GPIO_Init+0x304>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_GPIO_Init+0x304>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001274:	4a24      	ldr	r2, [pc, #144]	; (8001308 <HAL_GPIO_Init+0x304>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_GPIO_Init+0x304>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129e:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <HAL_GPIO_Init+0x304>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_GPIO_Init+0x304>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c8:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_GPIO_Init+0x304>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	f67f aea2 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e001      	b.n	800132e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800136e:	b480      	push	{r7}
 8001370:	b085      	sub	sp, #20
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001380:	887a      	ldrh	r2, [r7, #2]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	041a      	lsls	r2, r3, #16
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43d9      	mvns	r1, r3
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	400b      	ands	r3, r1
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e267      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d075      	beq.n	80014ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013c2:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d00c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ce:	4b85      	ldr	r3, [pc, #532]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d112      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013da:	4b82      	ldr	r3, [pc, #520]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013e6:	d10b      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	4b7e      	ldr	r3, [pc, #504]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d05b      	beq.n	80014ac <HAL_RCC_OscConfig+0x108>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d157      	bne.n	80014ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e242      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d106      	bne.n	8001418 <HAL_RCC_OscConfig+0x74>
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a75      	ldr	r2, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e01d      	b.n	8001454 <HAL_RCC_OscConfig+0xb0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x98>
 8001422:	4b70      	ldr	r3, [pc, #448]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6f      	ldr	r2, [pc, #444]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b6d      	ldr	r3, [pc, #436]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6c      	ldr	r2, [pc, #432]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xb0>
 800143c:	4b69      	ldr	r3, [pc, #420]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a68      	ldr	r2, [pc, #416]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b66      	ldr	r3, [pc, #408]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a65      	ldr	r2, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fcb4 	bl	8000dc8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fcb0 	bl	8000dc8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e207      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b5b      	ldr	r3, [pc, #364]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0xc0>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fca0 	bl	8000dc8 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fc9c 	bl	8000dc8 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1f3      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0xe8>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ba:	4b4a      	ldr	r3, [pc, #296]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d11c      	bne.n	800150c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d2:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x152>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1c7      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4937      	ldr	r1, [pc, #220]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	e03a      	b.n	8001582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001514:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_RCC_OscConfig+0x244>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fc55 	bl	8000dc8 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fc51 	bl	8000dc8 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1a8      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4925      	ldr	r1, [pc, #148]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_RCC_OscConfig+0x244>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fc34 	bl	8000dc8 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fc30 	bl	8000dc8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e187      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d036      	beq.n	80015fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d016      	beq.n	80015c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_RCC_OscConfig+0x248>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fc14 	bl	8000dc8 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fc10 	bl	8000dc8 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e167      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80015b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x200>
 80015c2:	e01b      	b.n	80015fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_OscConfig+0x248>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbfd 	bl	8000dc8 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	e00e      	b.n	80015f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d2:	f7ff fbf9 	bl	8000dc8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d907      	bls.n	80015f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e150      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
 80015e4:	40023800 	.word	0x40023800
 80015e8:	42470000 	.word	0x42470000
 80015ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f0:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ea      	bne.n	80015d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8097 	beq.w	8001738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160e:	4b81      	ldr	r3, [pc, #516]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10f      	bne.n	800163a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b7d      	ldr	r3, [pc, #500]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a7c      	ldr	r2, [pc, #496]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b7a      	ldr	r3, [pc, #488]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001636:	2301      	movs	r3, #1
 8001638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	4b77      	ldr	r3, [pc, #476]	; (8001818 <HAL_RCC_OscConfig+0x474>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d118      	bne.n	8001678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001646:	4b74      	ldr	r3, [pc, #464]	; (8001818 <HAL_RCC_OscConfig+0x474>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a73      	ldr	r2, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x474>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001652:	f7ff fbb9 	bl	8000dc8 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165a:	f7ff fbb5 	bl	8000dc8 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e10c      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <HAL_RCC_OscConfig+0x474>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x2ea>
 8001680:	4b64      	ldr	r3, [pc, #400]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a63      	ldr	r2, [pc, #396]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	e01c      	b.n	80016c8 <HAL_RCC_OscConfig+0x324>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b05      	cmp	r3, #5
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x30c>
 8001696:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	4a5e      	ldr	r2, [pc, #376]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6713      	str	r3, [r2, #112]	; 0x70
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	4a5b      	ldr	r2, [pc, #364]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6713      	str	r3, [r2, #112]	; 0x70
 80016ae:	e00b      	b.n	80016c8 <HAL_RCC_OscConfig+0x324>
 80016b0:	4b58      	ldr	r3, [pc, #352]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4a57      	ldr	r2, [pc, #348]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70
 80016bc:	4b55      	ldr	r3, [pc, #340]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a54      	ldr	r2, [pc, #336]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d015      	beq.n	80016fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fb7a 	bl	8000dc8 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff fb76 	bl	8000dc8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e0cb      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ee:	4b49      	ldr	r3, [pc, #292]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0ee      	beq.n	80016d8 <HAL_RCC_OscConfig+0x334>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fb64 	bl	8000dc8 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff fb60 	bl	8000dc8 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0b5      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171a:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1ee      	bne.n	8001704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172c:	4b39      	ldr	r3, [pc, #228]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a38      	ldr	r2, [pc, #224]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80a1 	beq.w	8001884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001742:	4b34      	ldr	r3, [pc, #208]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b08      	cmp	r3, #8
 800174c:	d05c      	beq.n	8001808 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d141      	bne.n	80017da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_RCC_OscConfig+0x478>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fb34 	bl	8000dc8 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff fb30 	bl	8000dc8 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e087      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	019b      	lsls	r3, r3, #6
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	3b01      	subs	r3, #1
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	491b      	ldr	r1, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x478>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fb09 	bl	8000dc8 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fb05 	bl	8000dc8 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e05c      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x416>
 80017d8:	e054      	b.n	8001884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_OscConfig+0x478>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff faf2 	bl	8000dc8 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff faee 	bl	8000dc8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e045      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x444>
 8001806:	e03d      	b.n	8001884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d107      	bne.n	8001820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e038      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000
 800181c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_RCC_OscConfig+0x4ec>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d028      	beq.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d121      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d11a      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001858:	4293      	cmp	r3, r2
 800185a:	d111      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	3b01      	subs	r3, #1
 800186a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0cc      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b68      	ldr	r3, [pc, #416]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d90c      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b8      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e8:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800190a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	494d      	ldr	r1, [pc, #308]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d044      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d119      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e07f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d003      	beq.n	8001952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194e:	2b03      	cmp	r3, #3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e06f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e067      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 0203 	bic.w	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4934      	ldr	r1, [pc, #208]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001984:	f7ff fa20 	bl	8000dc8 <HAL_GetTick>
 8001988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198c:	f7ff fa1c 	bl	8000dc8 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e04f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 020c 	and.w	r2, r3, #12
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1eb      	bne.n	800198c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d20c      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e032      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4916      	ldr	r1, [pc, #88]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	490e      	ldr	r1, [pc, #56]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a1a:	f000 f821 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	490a      	ldr	r1, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f980 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08003008 	.word	0x08003008
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	20000008 	.word	0x20000008

08001a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a64:	b094      	sub	sp, #80	; 0x50
 8001a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a70:	2300      	movs	r3, #0
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a78:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d00d      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	f200 80e1 	bhi.w	8001c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x34>
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a92:	e0db      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b73      	ldr	r3, [pc, #460]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a98:	e0db      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9a:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a9e:	e0d8      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa0:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab6:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	2200      	movs	r2, #0
 8001abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	0159      	lsls	r1, r3, #5
 8001ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae4:	0150      	lsls	r0, r2, #5
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4621      	mov	r1, r4
 8001aec:	1a51      	subs	r1, r2, r1
 8001aee:	6139      	str	r1, [r7, #16]
 8001af0:	4629      	mov	r1, r5
 8001af2:	eb63 0301 	sbc.w	r3, r3, r1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b04:	4659      	mov	r1, fp
 8001b06:	018b      	lsls	r3, r1, #6
 8001b08:	4651      	mov	r1, sl
 8001b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b0e:	4651      	mov	r1, sl
 8001b10:	018a      	lsls	r2, r1, #6
 8001b12:	4651      	mov	r1, sl
 8001b14:	ebb2 0801 	subs.w	r8, r2, r1
 8001b18:	4659      	mov	r1, fp
 8001b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b32:	4690      	mov	r8, r2
 8001b34:	4699      	mov	r9, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	eb18 0303 	adds.w	r3, r8, r3
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	462b      	mov	r3, r5
 8001b40:	eb49 0303 	adc.w	r3, r9, r3
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b52:	4629      	mov	r1, r5
 8001b54:	024b      	lsls	r3, r1, #9
 8001b56:	4621      	mov	r1, r4
 8001b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	024a      	lsls	r2, r1, #9
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b66:	2200      	movs	r2, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b70:	f7fe fb8e 	bl	8000290 <__aeabi_uldivmod>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4613      	mov	r3, r2
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b7c:	e058      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7e:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	2200      	movs	r2, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	4611      	mov	r1, r2
 8001b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b8e:	623b      	str	r3, [r7, #32]
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
 8001b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b98:	4642      	mov	r2, r8
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	0159      	lsls	r1, r3, #5
 8001ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001baa:	0150      	lsls	r0, r2, #5
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4641      	mov	r1, r8
 8001bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bb6:	4649      	mov	r1, r9
 8001bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	00eb      	lsls	r3, r5, #3
 8001be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001be6:	00e2      	lsls	r2, r4, #3
 8001be8:	4614      	mov	r4, r2
 8001bea:	461d      	mov	r5, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	18e3      	adds	r3, r4, r3
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	eb45 0303 	adc.w	r3, r5, r3
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c06:	4629      	mov	r1, r5
 8001c08:	028b      	lsls	r3, r1, #10
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c10:	4621      	mov	r1, r4
 8001c12:	028a      	lsls	r2, r1, #10
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	61fa      	str	r2, [r7, #28]
 8001c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c24:	f7fe fb34 	bl	8000290 <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c4a:	e002      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3750      	adds	r7, #80	; 0x50
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	007a1200 	.word	0x007a1200

08001c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c88:	f7ff fff0 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	4903      	ldr	r1, [pc, #12]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	08003018 	.word	0x08003018

08001cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cb0:	f7ff ffdc 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0b5b      	lsrs	r3, r3, #13
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08003018 	.word	0x08003018

08001cd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e03f      	b.n	8001d66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fdcc 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2224      	movs	r2, #36	; 0x24
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f929 	bl	8001f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b08a      	sub	sp, #40	; 0x28
 8001d72:	af02      	add	r7, sp, #8
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d17c      	bne.n	8001e88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_UART_Transmit+0x2c>
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e075      	b.n	8001e8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_UART_Transmit+0x3e>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e06e      	b.n	8001e8a <HAL_UART_Transmit+0x11c>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2221      	movs	r2, #33	; 0x21
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dc2:	f7ff f801 	bl	8000dc8 <HAL_GetTick>
 8001dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	88fa      	ldrh	r2, [r7, #6]
 8001dcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	88fa      	ldrh	r2, [r7, #6]
 8001dd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ddc:	d108      	bne.n	8001df0 <HAL_UART_Transmit+0x82>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d104      	bne.n	8001df0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	e003      	b.n	8001df8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e00:	e02a      	b.n	8001e58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f840 	bl	8001e92 <UART_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e036      	b.n	8001e8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10b      	bne.n	8001e3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	3302      	adds	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	e007      	b.n	8001e4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3301      	adds	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1cf      	bne.n	8001e02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2140      	movs	r1, #64	; 0x40
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f810 	bl	8001e92 <UART_WaitOnFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e006      	b.n	8001e8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e000      	b.n	8001e8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
  }
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b090      	sub	sp, #64	; 0x40
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ea2:	e050      	b.n	8001f46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eaa:	d04c      	beq.n	8001f46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001eb2:	f7fe ff89 	bl	8000dc8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d241      	bcs.n	8001f46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	330c      	adds	r3, #12
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	e853 3f00 	ldrex	r3, [r3]
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	330c      	adds	r3, #12
 8001ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ee2:	637a      	str	r2, [r7, #52]	; 0x34
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eea:	e841 2300 	strex	r3, r2, [r1]
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1e5      	bne.n	8001ec2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3314      	adds	r3, #20
 8001efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	e853 3f00 	ldrex	r3, [r3]
 8001f04:	613b      	str	r3, [r7, #16]
   return(result);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3314      	adds	r3, #20
 8001f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f16:	623a      	str	r2, [r7, #32]
 8001f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1a:	69f9      	ldr	r1, [r7, #28]
 8001f1c:	6a3a      	ldr	r2, [r7, #32]
 8001f1e:	e841 2300 	strex	r3, r2, [r1]
 8001f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1e5      	bne.n	8001ef6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e00f      	b.n	8001f66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d09f      	beq.n	8001ea4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3740      	adds	r7, #64	; 0x40
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f74:	b0c0      	sub	sp, #256	; 0x100
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8c:	68d9      	ldr	r1, [r3, #12]
 8001f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	ea40 0301 	orr.w	r3, r0, r1
 8001f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fc8:	f021 010c 	bic.w	r1, r1, #12
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fd6:	430b      	orrs	r3, r1
 8001fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fea:	6999      	ldr	r1, [r3, #24]
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	ea40 0301 	orr.w	r3, r0, r1
 8001ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b8f      	ldr	r3, [pc, #572]	; (800223c <UART_SetConfig+0x2cc>)
 8002000:	429a      	cmp	r2, r3
 8002002:	d005      	beq.n	8002010 <UART_SetConfig+0xa0>
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b8d      	ldr	r3, [pc, #564]	; (8002240 <UART_SetConfig+0x2d0>)
 800200c:	429a      	cmp	r2, r3
 800200e:	d104      	bne.n	800201a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002010:	f7ff fe4c 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 8002014:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002018:	e003      	b.n	8002022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800201a:	f7ff fe33 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 800201e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800202c:	f040 810c 	bne.w	8002248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002034:	2200      	movs	r2, #0
 8002036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800203a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800203e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002042:	4622      	mov	r2, r4
 8002044:	462b      	mov	r3, r5
 8002046:	1891      	adds	r1, r2, r2
 8002048:	65b9      	str	r1, [r7, #88]	; 0x58
 800204a:	415b      	adcs	r3, r3
 800204c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800204e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002052:	4621      	mov	r1, r4
 8002054:	eb12 0801 	adds.w	r8, r2, r1
 8002058:	4629      	mov	r1, r5
 800205a:	eb43 0901 	adc.w	r9, r3, r1
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800206a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800206e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002072:	4690      	mov	r8, r2
 8002074:	4699      	mov	r9, r3
 8002076:	4623      	mov	r3, r4
 8002078:	eb18 0303 	adds.w	r3, r8, r3
 800207c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002080:	462b      	mov	r3, r5
 8002082:	eb49 0303 	adc.w	r3, r9, r3
 8002086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800208a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002096:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800209a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800209e:	460b      	mov	r3, r1
 80020a0:	18db      	adds	r3, r3, r3
 80020a2:	653b      	str	r3, [r7, #80]	; 0x50
 80020a4:	4613      	mov	r3, r2
 80020a6:	eb42 0303 	adc.w	r3, r2, r3
 80020aa:	657b      	str	r3, [r7, #84]	; 0x54
 80020ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80020b4:	f7fe f8ec 	bl	8000290 <__aeabi_uldivmod>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4b61      	ldr	r3, [pc, #388]	; (8002244 <UART_SetConfig+0x2d4>)
 80020be:	fba3 2302 	umull	r2, r3, r3, r2
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	011c      	lsls	r4, r3, #4
 80020c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020d8:	4642      	mov	r2, r8
 80020da:	464b      	mov	r3, r9
 80020dc:	1891      	adds	r1, r2, r2
 80020de:	64b9      	str	r1, [r7, #72]	; 0x48
 80020e0:	415b      	adcs	r3, r3
 80020e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020e8:	4641      	mov	r1, r8
 80020ea:	eb12 0a01 	adds.w	sl, r2, r1
 80020ee:	4649      	mov	r1, r9
 80020f0:	eb43 0b01 	adc.w	fp, r3, r1
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002108:	4692      	mov	sl, r2
 800210a:	469b      	mov	fp, r3
 800210c:	4643      	mov	r3, r8
 800210e:	eb1a 0303 	adds.w	r3, sl, r3
 8002112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002116:	464b      	mov	r3, r9
 8002118:	eb4b 0303 	adc.w	r3, fp, r3
 800211c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800212c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002134:	460b      	mov	r3, r1
 8002136:	18db      	adds	r3, r3, r3
 8002138:	643b      	str	r3, [r7, #64]	; 0x40
 800213a:	4613      	mov	r3, r2
 800213c:	eb42 0303 	adc.w	r3, r2, r3
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
 8002142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800214a:	f7fe f8a1 	bl	8000290 <__aeabi_uldivmod>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4611      	mov	r1, r2
 8002154:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <UART_SetConfig+0x2d4>)
 8002156:	fba3 2301 	umull	r2, r3, r3, r1
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2264      	movs	r2, #100	; 0x64
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	1acb      	subs	r3, r1, r3
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800216a:	4b36      	ldr	r3, [pc, #216]	; (8002244 <UART_SetConfig+0x2d4>)
 800216c:	fba3 2302 	umull	r2, r3, r3, r2
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002178:	441c      	add	r4, r3
 800217a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800217e:	2200      	movs	r2, #0
 8002180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002184:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800218c:	4642      	mov	r2, r8
 800218e:	464b      	mov	r3, r9
 8002190:	1891      	adds	r1, r2, r2
 8002192:	63b9      	str	r1, [r7, #56]	; 0x38
 8002194:	415b      	adcs	r3, r3
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800219c:	4641      	mov	r1, r8
 800219e:	1851      	adds	r1, r2, r1
 80021a0:	6339      	str	r1, [r7, #48]	; 0x30
 80021a2:	4649      	mov	r1, r9
 80021a4:	414b      	adcs	r3, r1
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80021b4:	4659      	mov	r1, fp
 80021b6:	00cb      	lsls	r3, r1, #3
 80021b8:	4651      	mov	r1, sl
 80021ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021be:	4651      	mov	r1, sl
 80021c0:	00ca      	lsls	r2, r1, #3
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	4642      	mov	r2, r8
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021d0:	464b      	mov	r3, r9
 80021d2:	460a      	mov	r2, r1
 80021d4:	eb42 0303 	adc.w	r3, r2, r3
 80021d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021f0:	460b      	mov	r3, r1
 80021f2:	18db      	adds	r3, r3, r3
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f6:	4613      	mov	r3, r2
 80021f8:	eb42 0303 	adc.w	r3, r2, r3
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002206:	f7fe f843 	bl	8000290 <__aeabi_uldivmod>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <UART_SetConfig+0x2d4>)
 8002210:	fba3 1302 	umull	r1, r3, r3, r2
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	2164      	movs	r1, #100	; 0x64
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	3332      	adds	r3, #50	; 0x32
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <UART_SetConfig+0x2d4>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	f003 0207 	and.w	r2, r3, #7
 800222e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4422      	add	r2, r4
 8002236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002238:	e105      	b.n	8002446 <UART_SetConfig+0x4d6>
 800223a:	bf00      	nop
 800223c:	40011000 	.word	0x40011000
 8002240:	40011400 	.word	0x40011400
 8002244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800224c:	2200      	movs	r2, #0
 800224e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002252:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800225a:	4642      	mov	r2, r8
 800225c:	464b      	mov	r3, r9
 800225e:	1891      	adds	r1, r2, r2
 8002260:	6239      	str	r1, [r7, #32]
 8002262:	415b      	adcs	r3, r3
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800226a:	4641      	mov	r1, r8
 800226c:	1854      	adds	r4, r2, r1
 800226e:	4649      	mov	r1, r9
 8002270:	eb43 0501 	adc.w	r5, r3, r1
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	00eb      	lsls	r3, r5, #3
 800227e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002282:	00e2      	lsls	r2, r4, #3
 8002284:	4614      	mov	r4, r2
 8002286:	461d      	mov	r5, r3
 8002288:	4643      	mov	r3, r8
 800228a:	18e3      	adds	r3, r4, r3
 800228c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002290:	464b      	mov	r3, r9
 8002292:	eb45 0303 	adc.w	r3, r5, r3
 8002296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800229a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022b6:	4629      	mov	r1, r5
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	4621      	mov	r1, r4
 80022bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022c0:	4621      	mov	r1, r4
 80022c2:	008a      	lsls	r2, r1, #2
 80022c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022c8:	f7fd ffe2 	bl	8000290 <__aeabi_uldivmod>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4b60      	ldr	r3, [pc, #384]	; (8002454 <UART_SetConfig+0x4e4>)
 80022d2:	fba3 2302 	umull	r2, r3, r3, r2
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	011c      	lsls	r4, r3, #4
 80022da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022de:	2200      	movs	r2, #0
 80022e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022ec:	4642      	mov	r2, r8
 80022ee:	464b      	mov	r3, r9
 80022f0:	1891      	adds	r1, r2, r2
 80022f2:	61b9      	str	r1, [r7, #24]
 80022f4:	415b      	adcs	r3, r3
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022fc:	4641      	mov	r1, r8
 80022fe:	1851      	adds	r1, r2, r1
 8002300:	6139      	str	r1, [r7, #16]
 8002302:	4649      	mov	r1, r9
 8002304:	414b      	adcs	r3, r1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002314:	4659      	mov	r1, fp
 8002316:	00cb      	lsls	r3, r1, #3
 8002318:	4651      	mov	r1, sl
 800231a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800231e:	4651      	mov	r1, sl
 8002320:	00ca      	lsls	r2, r1, #3
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	4603      	mov	r3, r0
 8002328:	4642      	mov	r2, r8
 800232a:	189b      	adds	r3, r3, r2
 800232c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002330:	464b      	mov	r3, r9
 8002332:	460a      	mov	r2, r1
 8002334:	eb42 0303 	adc.w	r3, r2, r3
 8002338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800233c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	67bb      	str	r3, [r7, #120]	; 0x78
 8002346:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002354:	4649      	mov	r1, r9
 8002356:	008b      	lsls	r3, r1, #2
 8002358:	4641      	mov	r1, r8
 800235a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800235e:	4641      	mov	r1, r8
 8002360:	008a      	lsls	r2, r1, #2
 8002362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002366:	f7fd ff93 	bl	8000290 <__aeabi_uldivmod>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4b39      	ldr	r3, [pc, #228]	; (8002454 <UART_SetConfig+0x4e4>)
 8002370:	fba3 1302 	umull	r1, r3, r3, r2
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	2164      	movs	r1, #100	; 0x64
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	3332      	adds	r3, #50	; 0x32
 8002382:	4a34      	ldr	r2, [pc, #208]	; (8002454 <UART_SetConfig+0x4e4>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800238e:	441c      	add	r4, r3
 8002390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002394:	2200      	movs	r2, #0
 8002396:	673b      	str	r3, [r7, #112]	; 0x70
 8002398:	677a      	str	r2, [r7, #116]	; 0x74
 800239a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800239e:	4642      	mov	r2, r8
 80023a0:	464b      	mov	r3, r9
 80023a2:	1891      	adds	r1, r2, r2
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	415b      	adcs	r3, r3
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ae:	4641      	mov	r1, r8
 80023b0:	1851      	adds	r1, r2, r1
 80023b2:	6039      	str	r1, [r7, #0]
 80023b4:	4649      	mov	r1, r9
 80023b6:	414b      	adcs	r3, r1
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023c6:	4659      	mov	r1, fp
 80023c8:	00cb      	lsls	r3, r1, #3
 80023ca:	4651      	mov	r1, sl
 80023cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023d0:	4651      	mov	r1, sl
 80023d2:	00ca      	lsls	r2, r1, #3
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	4603      	mov	r3, r0
 80023da:	4642      	mov	r2, r8
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	66bb      	str	r3, [r7, #104]	; 0x68
 80023e0:	464b      	mov	r3, r9
 80023e2:	460a      	mov	r2, r1
 80023e4:	eb42 0303 	adc.w	r3, r2, r3
 80023e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	663b      	str	r3, [r7, #96]	; 0x60
 80023f4:	667a      	str	r2, [r7, #100]	; 0x64
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002402:	4649      	mov	r1, r9
 8002404:	008b      	lsls	r3, r1, #2
 8002406:	4641      	mov	r1, r8
 8002408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800240c:	4641      	mov	r1, r8
 800240e:	008a      	lsls	r2, r1, #2
 8002410:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002414:	f7fd ff3c 	bl	8000290 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <UART_SetConfig+0x4e4>)
 800241e:	fba3 1302 	umull	r1, r3, r3, r2
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2164      	movs	r1, #100	; 0x64
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	3332      	adds	r3, #50	; 0x32
 8002430:	4a08      	ldr	r2, [pc, #32]	; (8002454 <UART_SetConfig+0x4e4>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4422      	add	r2, r4
 8002444:	609a      	str	r2, [r3, #8]
}
 8002446:	bf00      	nop
 8002448:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800244c:	46bd      	mov	sp, r7
 800244e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002452:	bf00      	nop
 8002454:	51eb851f 	.word	0x51eb851f

08002458 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10e      	bne.n	8002486 <BSP_LED_Init+0x2e>
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <BSP_LED_Init+0x94>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <BSP_LED_Init+0x94>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <BSP_LED_Init+0x94>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	e00d      	b.n	80024a2 <BSP_LED_Init+0x4a>
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <BSP_LED_Init+0x94>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a17      	ldr	r2, [pc, #92]	; (80024ec <BSP_LED_Init+0x94>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <BSP_LED_Init+0x94>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <BSP_LED_Init+0x98>)
 80024a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ac:	2301      	movs	r3, #1
 80024ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80024b4:	2302      	movs	r3, #2
 80024b6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <BSP_LED_Init+0x9c>)
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	f107 0214 	add.w	r2, r7, #20
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fd9c 	bl	8001004 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <BSP_LED_Init+0x9c>)
 80024d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <BSP_LED_Init+0x98>)
 80024d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024dc:	2200      	movs	r2, #0
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe ff2c 	bl	800133c <HAL_GPIO_WritePin>
}
 80024e4:	bf00      	nop
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08003020 	.word	0x08003020
 80024f4:	20000010 	.word	0x20000010

080024f8 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	4a07      	ldr	r2, [pc, #28]	; (8002524 <BSP_LED_Toggle+0x2c>)
 8002506:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4906      	ldr	r1, [pc, #24]	; (8002528 <BSP_LED_Toggle+0x30>)
 800250e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002512:	4619      	mov	r1, r3
 8002514:	4610      	mov	r0, r2
 8002516:	f7fe ff2a 	bl	800136e <HAL_GPIO_TogglePin>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000010 	.word	0x20000010
 8002528:	08003020 	.word	0x08003020

0800252c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	460a      	mov	r2, r1
 8002536:	71fb      	strb	r3, [r7, #7]
 8002538:	4613      	mov	r3, r2
 800253a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800253c:	2300      	movs	r3, #0
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <BSP_PB_Init+0xa4>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <BSP_PB_Init+0xa4>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6313      	str	r3, [r2, #48]	; 0x30
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <BSP_PB_Init+0xa4>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002558:	79bb      	ldrb	r3, [r7, #6]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d112      	bne.n	8002584 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800255e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002562:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002568:	2302      	movs	r3, #2
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800256c:	2302      	movs	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <BSP_PB_Init+0xa8>)
 8002574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002578:	f107 020c 	add.w	r2, r7, #12
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fd40 	bl	8001004 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002584:	79bb      	ldrb	r3, [r7, #6]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d11d      	bne.n	80025c6 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800258a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8002594:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002598:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <BSP_PB_Init+0xa8>)
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	f107 020c 	add.w	r2, r7, #12
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fd2b 	bl	8001004 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80025ae:	2328      	movs	r3, #40	; 0x28
 80025b0:	b25b      	sxtb	r3, r3
 80025b2:	2200      	movs	r2, #0
 80025b4:	210f      	movs	r1, #15
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fced 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80025bc:	2328      	movs	r3, #40	; 0x28
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fd04 	bl	8000fce <HAL_NVIC_EnableIRQ>
  }
}
 80025c6:	bf00      	nop
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	2000001c 	.word	0x2000001c

080025d8 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <BSP_PB_GetState+0x28>)
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fe8b 	bl	800130c <HAL_GPIO_ReadPin>
 80025f6:	4603      	mov	r3, r0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000001c 	.word	0x2000001c

08002604 <__errno>:
 8002604:	4b01      	ldr	r3, [pc, #4]	; (800260c <__errno+0x8>)
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000020 	.word	0x20000020

08002610 <__libc_init_array>:
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	4d0d      	ldr	r5, [pc, #52]	; (8002648 <__libc_init_array+0x38>)
 8002614:	4c0d      	ldr	r4, [pc, #52]	; (800264c <__libc_init_array+0x3c>)
 8002616:	1b64      	subs	r4, r4, r5
 8002618:	10a4      	asrs	r4, r4, #2
 800261a:	2600      	movs	r6, #0
 800261c:	42a6      	cmp	r6, r4
 800261e:	d109      	bne.n	8002634 <__libc_init_array+0x24>
 8002620:	4d0b      	ldr	r5, [pc, #44]	; (8002650 <__libc_init_array+0x40>)
 8002622:	4c0c      	ldr	r4, [pc, #48]	; (8002654 <__libc_init_array+0x44>)
 8002624:	f000 fc8e 	bl	8002f44 <_init>
 8002628:	1b64      	subs	r4, r4, r5
 800262a:	10a4      	asrs	r4, r4, #2
 800262c:	2600      	movs	r6, #0
 800262e:	42a6      	cmp	r6, r4
 8002630:	d105      	bne.n	800263e <__libc_init_array+0x2e>
 8002632:	bd70      	pop	{r4, r5, r6, pc}
 8002634:	f855 3b04 	ldr.w	r3, [r5], #4
 8002638:	4798      	blx	r3
 800263a:	3601      	adds	r6, #1
 800263c:	e7ee      	b.n	800261c <__libc_init_array+0xc>
 800263e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002642:	4798      	blx	r3
 8002644:	3601      	adds	r6, #1
 8002646:	e7f2      	b.n	800262e <__libc_init_array+0x1e>
 8002648:	08003064 	.word	0x08003064
 800264c:	08003064 	.word	0x08003064
 8002650:	08003064 	.word	0x08003064
 8002654:	08003068 	.word	0x08003068

08002658 <memset>:
 8002658:	4402      	add	r2, r0
 800265a:	4603      	mov	r3, r0
 800265c:	4293      	cmp	r3, r2
 800265e:	d100      	bne.n	8002662 <memset+0xa>
 8002660:	4770      	bx	lr
 8002662:	f803 1b01 	strb.w	r1, [r3], #1
 8002666:	e7f9      	b.n	800265c <memset+0x4>

08002668 <siprintf>:
 8002668:	b40e      	push	{r1, r2, r3}
 800266a:	b500      	push	{lr}
 800266c:	b09c      	sub	sp, #112	; 0x70
 800266e:	ab1d      	add	r3, sp, #116	; 0x74
 8002670:	9002      	str	r0, [sp, #8]
 8002672:	9006      	str	r0, [sp, #24]
 8002674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002678:	4809      	ldr	r0, [pc, #36]	; (80026a0 <siprintf+0x38>)
 800267a:	9107      	str	r1, [sp, #28]
 800267c:	9104      	str	r1, [sp, #16]
 800267e:	4909      	ldr	r1, [pc, #36]	; (80026a4 <siprintf+0x3c>)
 8002680:	f853 2b04 	ldr.w	r2, [r3], #4
 8002684:	9105      	str	r1, [sp, #20]
 8002686:	6800      	ldr	r0, [r0, #0]
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	a902      	add	r1, sp, #8
 800268c:	f000 f868 	bl	8002760 <_svfiprintf_r>
 8002690:	9b02      	ldr	r3, [sp, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	b01c      	add	sp, #112	; 0x70
 8002698:	f85d eb04 	ldr.w	lr, [sp], #4
 800269c:	b003      	add	sp, #12
 800269e:	4770      	bx	lr
 80026a0:	20000020 	.word	0x20000020
 80026a4:	ffff0208 	.word	0xffff0208

080026a8 <__ssputs_r>:
 80026a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026ac:	688e      	ldr	r6, [r1, #8]
 80026ae:	429e      	cmp	r6, r3
 80026b0:	4682      	mov	sl, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	4690      	mov	r8, r2
 80026b6:	461f      	mov	r7, r3
 80026b8:	d838      	bhi.n	800272c <__ssputs_r+0x84>
 80026ba:	898a      	ldrh	r2, [r1, #12]
 80026bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026c0:	d032      	beq.n	8002728 <__ssputs_r+0x80>
 80026c2:	6825      	ldr	r5, [r4, #0]
 80026c4:	6909      	ldr	r1, [r1, #16]
 80026c6:	eba5 0901 	sub.w	r9, r5, r1
 80026ca:	6965      	ldr	r5, [r4, #20]
 80026cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80026d4:	3301      	adds	r3, #1
 80026d6:	444b      	add	r3, r9
 80026d8:	106d      	asrs	r5, r5, #1
 80026da:	429d      	cmp	r5, r3
 80026dc:	bf38      	it	cc
 80026de:	461d      	movcc	r5, r3
 80026e0:	0553      	lsls	r3, r2, #21
 80026e2:	d531      	bpl.n	8002748 <__ssputs_r+0xa0>
 80026e4:	4629      	mov	r1, r5
 80026e6:	f000 fb63 	bl	8002db0 <_malloc_r>
 80026ea:	4606      	mov	r6, r0
 80026ec:	b950      	cbnz	r0, 8002704 <__ssputs_r+0x5c>
 80026ee:	230c      	movs	r3, #12
 80026f0:	f8ca 3000 	str.w	r3, [sl]
 80026f4:	89a3      	ldrh	r3, [r4, #12]
 80026f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026fa:	81a3      	strh	r3, [r4, #12]
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002704:	6921      	ldr	r1, [r4, #16]
 8002706:	464a      	mov	r2, r9
 8002708:	f000 fabe 	bl	8002c88 <memcpy>
 800270c:	89a3      	ldrh	r3, [r4, #12]
 800270e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002716:	81a3      	strh	r3, [r4, #12]
 8002718:	6126      	str	r6, [r4, #16]
 800271a:	6165      	str	r5, [r4, #20]
 800271c:	444e      	add	r6, r9
 800271e:	eba5 0509 	sub.w	r5, r5, r9
 8002722:	6026      	str	r6, [r4, #0]
 8002724:	60a5      	str	r5, [r4, #8]
 8002726:	463e      	mov	r6, r7
 8002728:	42be      	cmp	r6, r7
 800272a:	d900      	bls.n	800272e <__ssputs_r+0x86>
 800272c:	463e      	mov	r6, r7
 800272e:	6820      	ldr	r0, [r4, #0]
 8002730:	4632      	mov	r2, r6
 8002732:	4641      	mov	r1, r8
 8002734:	f000 fab6 	bl	8002ca4 <memmove>
 8002738:	68a3      	ldr	r3, [r4, #8]
 800273a:	1b9b      	subs	r3, r3, r6
 800273c:	60a3      	str	r3, [r4, #8]
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	4433      	add	r3, r6
 8002742:	6023      	str	r3, [r4, #0]
 8002744:	2000      	movs	r0, #0
 8002746:	e7db      	b.n	8002700 <__ssputs_r+0x58>
 8002748:	462a      	mov	r2, r5
 800274a:	f000 fba5 	bl	8002e98 <_realloc_r>
 800274e:	4606      	mov	r6, r0
 8002750:	2800      	cmp	r0, #0
 8002752:	d1e1      	bne.n	8002718 <__ssputs_r+0x70>
 8002754:	6921      	ldr	r1, [r4, #16]
 8002756:	4650      	mov	r0, sl
 8002758:	f000 fabe 	bl	8002cd8 <_free_r>
 800275c:	e7c7      	b.n	80026ee <__ssputs_r+0x46>
	...

08002760 <_svfiprintf_r>:
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	4698      	mov	r8, r3
 8002766:	898b      	ldrh	r3, [r1, #12]
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	b09d      	sub	sp, #116	; 0x74
 800276c:	4607      	mov	r7, r0
 800276e:	460d      	mov	r5, r1
 8002770:	4614      	mov	r4, r2
 8002772:	d50e      	bpl.n	8002792 <_svfiprintf_r+0x32>
 8002774:	690b      	ldr	r3, [r1, #16]
 8002776:	b963      	cbnz	r3, 8002792 <_svfiprintf_r+0x32>
 8002778:	2140      	movs	r1, #64	; 0x40
 800277a:	f000 fb19 	bl	8002db0 <_malloc_r>
 800277e:	6028      	str	r0, [r5, #0]
 8002780:	6128      	str	r0, [r5, #16]
 8002782:	b920      	cbnz	r0, 800278e <_svfiprintf_r+0x2e>
 8002784:	230c      	movs	r3, #12
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	e0d1      	b.n	8002932 <_svfiprintf_r+0x1d2>
 800278e:	2340      	movs	r3, #64	; 0x40
 8002790:	616b      	str	r3, [r5, #20]
 8002792:	2300      	movs	r3, #0
 8002794:	9309      	str	r3, [sp, #36]	; 0x24
 8002796:	2320      	movs	r3, #32
 8002798:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800279c:	f8cd 800c 	str.w	r8, [sp, #12]
 80027a0:	2330      	movs	r3, #48	; 0x30
 80027a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800294c <_svfiprintf_r+0x1ec>
 80027a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027aa:	f04f 0901 	mov.w	r9, #1
 80027ae:	4623      	mov	r3, r4
 80027b0:	469a      	mov	sl, r3
 80027b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027b6:	b10a      	cbz	r2, 80027bc <_svfiprintf_r+0x5c>
 80027b8:	2a25      	cmp	r2, #37	; 0x25
 80027ba:	d1f9      	bne.n	80027b0 <_svfiprintf_r+0x50>
 80027bc:	ebba 0b04 	subs.w	fp, sl, r4
 80027c0:	d00b      	beq.n	80027da <_svfiprintf_r+0x7a>
 80027c2:	465b      	mov	r3, fp
 80027c4:	4622      	mov	r2, r4
 80027c6:	4629      	mov	r1, r5
 80027c8:	4638      	mov	r0, r7
 80027ca:	f7ff ff6d 	bl	80026a8 <__ssputs_r>
 80027ce:	3001      	adds	r0, #1
 80027d0:	f000 80aa 	beq.w	8002928 <_svfiprintf_r+0x1c8>
 80027d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027d6:	445a      	add	r2, fp
 80027d8:	9209      	str	r2, [sp, #36]	; 0x24
 80027da:	f89a 3000 	ldrb.w	r3, [sl]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80a2 	beq.w	8002928 <_svfiprintf_r+0x1c8>
 80027e4:	2300      	movs	r3, #0
 80027e6:	f04f 32ff 	mov.w	r2, #4294967295
 80027ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027ee:	f10a 0a01 	add.w	sl, sl, #1
 80027f2:	9304      	str	r3, [sp, #16]
 80027f4:	9307      	str	r3, [sp, #28]
 80027f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027fa:	931a      	str	r3, [sp, #104]	; 0x68
 80027fc:	4654      	mov	r4, sl
 80027fe:	2205      	movs	r2, #5
 8002800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002804:	4851      	ldr	r0, [pc, #324]	; (800294c <_svfiprintf_r+0x1ec>)
 8002806:	f7fd fcf3 	bl	80001f0 <memchr>
 800280a:	9a04      	ldr	r2, [sp, #16]
 800280c:	b9d8      	cbnz	r0, 8002846 <_svfiprintf_r+0xe6>
 800280e:	06d0      	lsls	r0, r2, #27
 8002810:	bf44      	itt	mi
 8002812:	2320      	movmi	r3, #32
 8002814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002818:	0711      	lsls	r1, r2, #28
 800281a:	bf44      	itt	mi
 800281c:	232b      	movmi	r3, #43	; 0x2b
 800281e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002822:	f89a 3000 	ldrb.w	r3, [sl]
 8002826:	2b2a      	cmp	r3, #42	; 0x2a
 8002828:	d015      	beq.n	8002856 <_svfiprintf_r+0xf6>
 800282a:	9a07      	ldr	r2, [sp, #28]
 800282c:	4654      	mov	r4, sl
 800282e:	2000      	movs	r0, #0
 8002830:	f04f 0c0a 	mov.w	ip, #10
 8002834:	4621      	mov	r1, r4
 8002836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800283a:	3b30      	subs	r3, #48	; 0x30
 800283c:	2b09      	cmp	r3, #9
 800283e:	d94e      	bls.n	80028de <_svfiprintf_r+0x17e>
 8002840:	b1b0      	cbz	r0, 8002870 <_svfiprintf_r+0x110>
 8002842:	9207      	str	r2, [sp, #28]
 8002844:	e014      	b.n	8002870 <_svfiprintf_r+0x110>
 8002846:	eba0 0308 	sub.w	r3, r0, r8
 800284a:	fa09 f303 	lsl.w	r3, r9, r3
 800284e:	4313      	orrs	r3, r2
 8002850:	9304      	str	r3, [sp, #16]
 8002852:	46a2      	mov	sl, r4
 8002854:	e7d2      	b.n	80027fc <_svfiprintf_r+0x9c>
 8002856:	9b03      	ldr	r3, [sp, #12]
 8002858:	1d19      	adds	r1, r3, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	9103      	str	r1, [sp, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	bfbb      	ittet	lt
 8002862:	425b      	neglt	r3, r3
 8002864:	f042 0202 	orrlt.w	r2, r2, #2
 8002868:	9307      	strge	r3, [sp, #28]
 800286a:	9307      	strlt	r3, [sp, #28]
 800286c:	bfb8      	it	lt
 800286e:	9204      	strlt	r2, [sp, #16]
 8002870:	7823      	ldrb	r3, [r4, #0]
 8002872:	2b2e      	cmp	r3, #46	; 0x2e
 8002874:	d10c      	bne.n	8002890 <_svfiprintf_r+0x130>
 8002876:	7863      	ldrb	r3, [r4, #1]
 8002878:	2b2a      	cmp	r3, #42	; 0x2a
 800287a:	d135      	bne.n	80028e8 <_svfiprintf_r+0x188>
 800287c:	9b03      	ldr	r3, [sp, #12]
 800287e:	1d1a      	adds	r2, r3, #4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	9203      	str	r2, [sp, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	bfb8      	it	lt
 8002888:	f04f 33ff 	movlt.w	r3, #4294967295
 800288c:	3402      	adds	r4, #2
 800288e:	9305      	str	r3, [sp, #20]
 8002890:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800295c <_svfiprintf_r+0x1fc>
 8002894:	7821      	ldrb	r1, [r4, #0]
 8002896:	2203      	movs	r2, #3
 8002898:	4650      	mov	r0, sl
 800289a:	f7fd fca9 	bl	80001f0 <memchr>
 800289e:	b140      	cbz	r0, 80028b2 <_svfiprintf_r+0x152>
 80028a0:	2340      	movs	r3, #64	; 0x40
 80028a2:	eba0 000a 	sub.w	r0, r0, sl
 80028a6:	fa03 f000 	lsl.w	r0, r3, r0
 80028aa:	9b04      	ldr	r3, [sp, #16]
 80028ac:	4303      	orrs	r3, r0
 80028ae:	3401      	adds	r4, #1
 80028b0:	9304      	str	r3, [sp, #16]
 80028b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028b6:	4826      	ldr	r0, [pc, #152]	; (8002950 <_svfiprintf_r+0x1f0>)
 80028b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028bc:	2206      	movs	r2, #6
 80028be:	f7fd fc97 	bl	80001f0 <memchr>
 80028c2:	2800      	cmp	r0, #0
 80028c4:	d038      	beq.n	8002938 <_svfiprintf_r+0x1d8>
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <_svfiprintf_r+0x1f4>)
 80028c8:	bb1b      	cbnz	r3, 8002912 <_svfiprintf_r+0x1b2>
 80028ca:	9b03      	ldr	r3, [sp, #12]
 80028cc:	3307      	adds	r3, #7
 80028ce:	f023 0307 	bic.w	r3, r3, #7
 80028d2:	3308      	adds	r3, #8
 80028d4:	9303      	str	r3, [sp, #12]
 80028d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028d8:	4433      	add	r3, r6
 80028da:	9309      	str	r3, [sp, #36]	; 0x24
 80028dc:	e767      	b.n	80027ae <_svfiprintf_r+0x4e>
 80028de:	fb0c 3202 	mla	r2, ip, r2, r3
 80028e2:	460c      	mov	r4, r1
 80028e4:	2001      	movs	r0, #1
 80028e6:	e7a5      	b.n	8002834 <_svfiprintf_r+0xd4>
 80028e8:	2300      	movs	r3, #0
 80028ea:	3401      	adds	r4, #1
 80028ec:	9305      	str	r3, [sp, #20]
 80028ee:	4619      	mov	r1, r3
 80028f0:	f04f 0c0a 	mov.w	ip, #10
 80028f4:	4620      	mov	r0, r4
 80028f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028fa:	3a30      	subs	r2, #48	; 0x30
 80028fc:	2a09      	cmp	r2, #9
 80028fe:	d903      	bls.n	8002908 <_svfiprintf_r+0x1a8>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0c5      	beq.n	8002890 <_svfiprintf_r+0x130>
 8002904:	9105      	str	r1, [sp, #20]
 8002906:	e7c3      	b.n	8002890 <_svfiprintf_r+0x130>
 8002908:	fb0c 2101 	mla	r1, ip, r1, r2
 800290c:	4604      	mov	r4, r0
 800290e:	2301      	movs	r3, #1
 8002910:	e7f0      	b.n	80028f4 <_svfiprintf_r+0x194>
 8002912:	ab03      	add	r3, sp, #12
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	462a      	mov	r2, r5
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <_svfiprintf_r+0x1f8>)
 800291a:	a904      	add	r1, sp, #16
 800291c:	4638      	mov	r0, r7
 800291e:	f3af 8000 	nop.w
 8002922:	1c42      	adds	r2, r0, #1
 8002924:	4606      	mov	r6, r0
 8002926:	d1d6      	bne.n	80028d6 <_svfiprintf_r+0x176>
 8002928:	89ab      	ldrh	r3, [r5, #12]
 800292a:	065b      	lsls	r3, r3, #25
 800292c:	f53f af2c 	bmi.w	8002788 <_svfiprintf_r+0x28>
 8002930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002932:	b01d      	add	sp, #116	; 0x74
 8002934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002938:	ab03      	add	r3, sp, #12
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	462a      	mov	r2, r5
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <_svfiprintf_r+0x1f8>)
 8002940:	a904      	add	r1, sp, #16
 8002942:	4638      	mov	r0, r7
 8002944:	f000 f87a 	bl	8002a3c <_printf_i>
 8002948:	e7eb      	b.n	8002922 <_svfiprintf_r+0x1c2>
 800294a:	bf00      	nop
 800294c:	08003026 	.word	0x08003026
 8002950:	08003030 	.word	0x08003030
 8002954:	00000000 	.word	0x00000000
 8002958:	080026a9 	.word	0x080026a9
 800295c:	0800302c 	.word	0x0800302c

08002960 <_printf_common>:
 8002960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002964:	4616      	mov	r6, r2
 8002966:	4699      	mov	r9, r3
 8002968:	688a      	ldr	r2, [r1, #8]
 800296a:	690b      	ldr	r3, [r1, #16]
 800296c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002970:	4293      	cmp	r3, r2
 8002972:	bfb8      	it	lt
 8002974:	4613      	movlt	r3, r2
 8002976:	6033      	str	r3, [r6, #0]
 8002978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800297c:	4607      	mov	r7, r0
 800297e:	460c      	mov	r4, r1
 8002980:	b10a      	cbz	r2, 8002986 <_printf_common+0x26>
 8002982:	3301      	adds	r3, #1
 8002984:	6033      	str	r3, [r6, #0]
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	0699      	lsls	r1, r3, #26
 800298a:	bf42      	ittt	mi
 800298c:	6833      	ldrmi	r3, [r6, #0]
 800298e:	3302      	addmi	r3, #2
 8002990:	6033      	strmi	r3, [r6, #0]
 8002992:	6825      	ldr	r5, [r4, #0]
 8002994:	f015 0506 	ands.w	r5, r5, #6
 8002998:	d106      	bne.n	80029a8 <_printf_common+0x48>
 800299a:	f104 0a19 	add.w	sl, r4, #25
 800299e:	68e3      	ldr	r3, [r4, #12]
 80029a0:	6832      	ldr	r2, [r6, #0]
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	42ab      	cmp	r3, r5
 80029a6:	dc26      	bgt.n	80029f6 <_printf_common+0x96>
 80029a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029ac:	1e13      	subs	r3, r2, #0
 80029ae:	6822      	ldr	r2, [r4, #0]
 80029b0:	bf18      	it	ne
 80029b2:	2301      	movne	r3, #1
 80029b4:	0692      	lsls	r2, r2, #26
 80029b6:	d42b      	bmi.n	8002a10 <_printf_common+0xb0>
 80029b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029bc:	4649      	mov	r1, r9
 80029be:	4638      	mov	r0, r7
 80029c0:	47c0      	blx	r8
 80029c2:	3001      	adds	r0, #1
 80029c4:	d01e      	beq.n	8002a04 <_printf_common+0xa4>
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	68e5      	ldr	r5, [r4, #12]
 80029ca:	6832      	ldr	r2, [r6, #0]
 80029cc:	f003 0306 	and.w	r3, r3, #6
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	bf08      	it	eq
 80029d4:	1aad      	subeq	r5, r5, r2
 80029d6:	68a3      	ldr	r3, [r4, #8]
 80029d8:	6922      	ldr	r2, [r4, #16]
 80029da:	bf0c      	ite	eq
 80029dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029e0:	2500      	movne	r5, #0
 80029e2:	4293      	cmp	r3, r2
 80029e4:	bfc4      	itt	gt
 80029e6:	1a9b      	subgt	r3, r3, r2
 80029e8:	18ed      	addgt	r5, r5, r3
 80029ea:	2600      	movs	r6, #0
 80029ec:	341a      	adds	r4, #26
 80029ee:	42b5      	cmp	r5, r6
 80029f0:	d11a      	bne.n	8002a28 <_printf_common+0xc8>
 80029f2:	2000      	movs	r0, #0
 80029f4:	e008      	b.n	8002a08 <_printf_common+0xa8>
 80029f6:	2301      	movs	r3, #1
 80029f8:	4652      	mov	r2, sl
 80029fa:	4649      	mov	r1, r9
 80029fc:	4638      	mov	r0, r7
 80029fe:	47c0      	blx	r8
 8002a00:	3001      	adds	r0, #1
 8002a02:	d103      	bne.n	8002a0c <_printf_common+0xac>
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a0c:	3501      	adds	r5, #1
 8002a0e:	e7c6      	b.n	800299e <_printf_common+0x3e>
 8002a10:	18e1      	adds	r1, r4, r3
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	2030      	movs	r0, #48	; 0x30
 8002a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a1a:	4422      	add	r2, r4
 8002a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a24:	3302      	adds	r3, #2
 8002a26:	e7c7      	b.n	80029b8 <_printf_common+0x58>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	4638      	mov	r0, r7
 8002a30:	47c0      	blx	r8
 8002a32:	3001      	adds	r0, #1
 8002a34:	d0e6      	beq.n	8002a04 <_printf_common+0xa4>
 8002a36:	3601      	adds	r6, #1
 8002a38:	e7d9      	b.n	80029ee <_printf_common+0x8e>
	...

08002a3c <_printf_i>:
 8002a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a40:	7e0f      	ldrb	r7, [r1, #24]
 8002a42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a44:	2f78      	cmp	r7, #120	; 0x78
 8002a46:	4691      	mov	r9, r2
 8002a48:	4680      	mov	r8, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	469a      	mov	sl, r3
 8002a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a52:	d807      	bhi.n	8002a64 <_printf_i+0x28>
 8002a54:	2f62      	cmp	r7, #98	; 0x62
 8002a56:	d80a      	bhi.n	8002a6e <_printf_i+0x32>
 8002a58:	2f00      	cmp	r7, #0
 8002a5a:	f000 80d8 	beq.w	8002c0e <_printf_i+0x1d2>
 8002a5e:	2f58      	cmp	r7, #88	; 0x58
 8002a60:	f000 80a3 	beq.w	8002baa <_printf_i+0x16e>
 8002a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a6c:	e03a      	b.n	8002ae4 <_printf_i+0xa8>
 8002a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a72:	2b15      	cmp	r3, #21
 8002a74:	d8f6      	bhi.n	8002a64 <_printf_i+0x28>
 8002a76:	a101      	add	r1, pc, #4	; (adr r1, 8002a7c <_printf_i+0x40>)
 8002a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a7c:	08002ad5 	.word	0x08002ad5
 8002a80:	08002ae9 	.word	0x08002ae9
 8002a84:	08002a65 	.word	0x08002a65
 8002a88:	08002a65 	.word	0x08002a65
 8002a8c:	08002a65 	.word	0x08002a65
 8002a90:	08002a65 	.word	0x08002a65
 8002a94:	08002ae9 	.word	0x08002ae9
 8002a98:	08002a65 	.word	0x08002a65
 8002a9c:	08002a65 	.word	0x08002a65
 8002aa0:	08002a65 	.word	0x08002a65
 8002aa4:	08002a65 	.word	0x08002a65
 8002aa8:	08002bf5 	.word	0x08002bf5
 8002aac:	08002b19 	.word	0x08002b19
 8002ab0:	08002bd7 	.word	0x08002bd7
 8002ab4:	08002a65 	.word	0x08002a65
 8002ab8:	08002a65 	.word	0x08002a65
 8002abc:	08002c17 	.word	0x08002c17
 8002ac0:	08002a65 	.word	0x08002a65
 8002ac4:	08002b19 	.word	0x08002b19
 8002ac8:	08002a65 	.word	0x08002a65
 8002acc:	08002a65 	.word	0x08002a65
 8002ad0:	08002bdf 	.word	0x08002bdf
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	1d1a      	adds	r2, r3, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	602a      	str	r2, [r5, #0]
 8002adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0a3      	b.n	8002c30 <_printf_i+0x1f4>
 8002ae8:	6820      	ldr	r0, [r4, #0]
 8002aea:	6829      	ldr	r1, [r5, #0]
 8002aec:	0606      	lsls	r6, r0, #24
 8002aee:	f101 0304 	add.w	r3, r1, #4
 8002af2:	d50a      	bpl.n	8002b0a <_printf_i+0xce>
 8002af4:	680e      	ldr	r6, [r1, #0]
 8002af6:	602b      	str	r3, [r5, #0]
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	da03      	bge.n	8002b04 <_printf_i+0xc8>
 8002afc:	232d      	movs	r3, #45	; 0x2d
 8002afe:	4276      	negs	r6, r6
 8002b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b04:	485e      	ldr	r0, [pc, #376]	; (8002c80 <_printf_i+0x244>)
 8002b06:	230a      	movs	r3, #10
 8002b08:	e019      	b.n	8002b3e <_printf_i+0x102>
 8002b0a:	680e      	ldr	r6, [r1, #0]
 8002b0c:	602b      	str	r3, [r5, #0]
 8002b0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b12:	bf18      	it	ne
 8002b14:	b236      	sxthne	r6, r6
 8002b16:	e7ef      	b.n	8002af8 <_printf_i+0xbc>
 8002b18:	682b      	ldr	r3, [r5, #0]
 8002b1a:	6820      	ldr	r0, [r4, #0]
 8002b1c:	1d19      	adds	r1, r3, #4
 8002b1e:	6029      	str	r1, [r5, #0]
 8002b20:	0601      	lsls	r1, r0, #24
 8002b22:	d501      	bpl.n	8002b28 <_printf_i+0xec>
 8002b24:	681e      	ldr	r6, [r3, #0]
 8002b26:	e002      	b.n	8002b2e <_printf_i+0xf2>
 8002b28:	0646      	lsls	r6, r0, #25
 8002b2a:	d5fb      	bpl.n	8002b24 <_printf_i+0xe8>
 8002b2c:	881e      	ldrh	r6, [r3, #0]
 8002b2e:	4854      	ldr	r0, [pc, #336]	; (8002c80 <_printf_i+0x244>)
 8002b30:	2f6f      	cmp	r7, #111	; 0x6f
 8002b32:	bf0c      	ite	eq
 8002b34:	2308      	moveq	r3, #8
 8002b36:	230a      	movne	r3, #10
 8002b38:	2100      	movs	r1, #0
 8002b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b3e:	6865      	ldr	r5, [r4, #4]
 8002b40:	60a5      	str	r5, [r4, #8]
 8002b42:	2d00      	cmp	r5, #0
 8002b44:	bfa2      	ittt	ge
 8002b46:	6821      	ldrge	r1, [r4, #0]
 8002b48:	f021 0104 	bicge.w	r1, r1, #4
 8002b4c:	6021      	strge	r1, [r4, #0]
 8002b4e:	b90e      	cbnz	r6, 8002b54 <_printf_i+0x118>
 8002b50:	2d00      	cmp	r5, #0
 8002b52:	d04d      	beq.n	8002bf0 <_printf_i+0x1b4>
 8002b54:	4615      	mov	r5, r2
 8002b56:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b5a:	fb03 6711 	mls	r7, r3, r1, r6
 8002b5e:	5dc7      	ldrb	r7, [r0, r7]
 8002b60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b64:	4637      	mov	r7, r6
 8002b66:	42bb      	cmp	r3, r7
 8002b68:	460e      	mov	r6, r1
 8002b6a:	d9f4      	bls.n	8002b56 <_printf_i+0x11a>
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d10b      	bne.n	8002b88 <_printf_i+0x14c>
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	07de      	lsls	r6, r3, #31
 8002b74:	d508      	bpl.n	8002b88 <_printf_i+0x14c>
 8002b76:	6923      	ldr	r3, [r4, #16]
 8002b78:	6861      	ldr	r1, [r4, #4]
 8002b7a:	4299      	cmp	r1, r3
 8002b7c:	bfde      	ittt	le
 8002b7e:	2330      	movle	r3, #48	; 0x30
 8002b80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b88:	1b52      	subs	r2, r2, r5
 8002b8a:	6122      	str	r2, [r4, #16]
 8002b8c:	f8cd a000 	str.w	sl, [sp]
 8002b90:	464b      	mov	r3, r9
 8002b92:	aa03      	add	r2, sp, #12
 8002b94:	4621      	mov	r1, r4
 8002b96:	4640      	mov	r0, r8
 8002b98:	f7ff fee2 	bl	8002960 <_printf_common>
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	d14c      	bne.n	8002c3a <_printf_i+0x1fe>
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	b004      	add	sp, #16
 8002ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002baa:	4835      	ldr	r0, [pc, #212]	; (8002c80 <_printf_i+0x244>)
 8002bac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002bb0:	6829      	ldr	r1, [r5, #0]
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002bb8:	6029      	str	r1, [r5, #0]
 8002bba:	061d      	lsls	r5, r3, #24
 8002bbc:	d514      	bpl.n	8002be8 <_printf_i+0x1ac>
 8002bbe:	07df      	lsls	r7, r3, #31
 8002bc0:	bf44      	itt	mi
 8002bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8002bc6:	6023      	strmi	r3, [r4, #0]
 8002bc8:	b91e      	cbnz	r6, 8002bd2 <_printf_i+0x196>
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	f023 0320 	bic.w	r3, r3, #32
 8002bd0:	6023      	str	r3, [r4, #0]
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	e7b0      	b.n	8002b38 <_printf_i+0xfc>
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	f043 0320 	orr.w	r3, r3, #32
 8002bdc:	6023      	str	r3, [r4, #0]
 8002bde:	2378      	movs	r3, #120	; 0x78
 8002be0:	4828      	ldr	r0, [pc, #160]	; (8002c84 <_printf_i+0x248>)
 8002be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002be6:	e7e3      	b.n	8002bb0 <_printf_i+0x174>
 8002be8:	0659      	lsls	r1, r3, #25
 8002bea:	bf48      	it	mi
 8002bec:	b2b6      	uxthmi	r6, r6
 8002bee:	e7e6      	b.n	8002bbe <_printf_i+0x182>
 8002bf0:	4615      	mov	r5, r2
 8002bf2:	e7bb      	b.n	8002b6c <_printf_i+0x130>
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	6826      	ldr	r6, [r4, #0]
 8002bf8:	6961      	ldr	r1, [r4, #20]
 8002bfa:	1d18      	adds	r0, r3, #4
 8002bfc:	6028      	str	r0, [r5, #0]
 8002bfe:	0635      	lsls	r5, r6, #24
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	d501      	bpl.n	8002c08 <_printf_i+0x1cc>
 8002c04:	6019      	str	r1, [r3, #0]
 8002c06:	e002      	b.n	8002c0e <_printf_i+0x1d2>
 8002c08:	0670      	lsls	r0, r6, #25
 8002c0a:	d5fb      	bpl.n	8002c04 <_printf_i+0x1c8>
 8002c0c:	8019      	strh	r1, [r3, #0]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	6123      	str	r3, [r4, #16]
 8002c12:	4615      	mov	r5, r2
 8002c14:	e7ba      	b.n	8002b8c <_printf_i+0x150>
 8002c16:	682b      	ldr	r3, [r5, #0]
 8002c18:	1d1a      	adds	r2, r3, #4
 8002c1a:	602a      	str	r2, [r5, #0]
 8002c1c:	681d      	ldr	r5, [r3, #0]
 8002c1e:	6862      	ldr	r2, [r4, #4]
 8002c20:	2100      	movs	r1, #0
 8002c22:	4628      	mov	r0, r5
 8002c24:	f7fd fae4 	bl	80001f0 <memchr>
 8002c28:	b108      	cbz	r0, 8002c2e <_printf_i+0x1f2>
 8002c2a:	1b40      	subs	r0, r0, r5
 8002c2c:	6060      	str	r0, [r4, #4]
 8002c2e:	6863      	ldr	r3, [r4, #4]
 8002c30:	6123      	str	r3, [r4, #16]
 8002c32:	2300      	movs	r3, #0
 8002c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c38:	e7a8      	b.n	8002b8c <_printf_i+0x150>
 8002c3a:	6923      	ldr	r3, [r4, #16]
 8002c3c:	462a      	mov	r2, r5
 8002c3e:	4649      	mov	r1, r9
 8002c40:	4640      	mov	r0, r8
 8002c42:	47d0      	blx	sl
 8002c44:	3001      	adds	r0, #1
 8002c46:	d0ab      	beq.n	8002ba0 <_printf_i+0x164>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	079b      	lsls	r3, r3, #30
 8002c4c:	d413      	bmi.n	8002c76 <_printf_i+0x23a>
 8002c4e:	68e0      	ldr	r0, [r4, #12]
 8002c50:	9b03      	ldr	r3, [sp, #12]
 8002c52:	4298      	cmp	r0, r3
 8002c54:	bfb8      	it	lt
 8002c56:	4618      	movlt	r0, r3
 8002c58:	e7a4      	b.n	8002ba4 <_printf_i+0x168>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4632      	mov	r2, r6
 8002c5e:	4649      	mov	r1, r9
 8002c60:	4640      	mov	r0, r8
 8002c62:	47d0      	blx	sl
 8002c64:	3001      	adds	r0, #1
 8002c66:	d09b      	beq.n	8002ba0 <_printf_i+0x164>
 8002c68:	3501      	adds	r5, #1
 8002c6a:	68e3      	ldr	r3, [r4, #12]
 8002c6c:	9903      	ldr	r1, [sp, #12]
 8002c6e:	1a5b      	subs	r3, r3, r1
 8002c70:	42ab      	cmp	r3, r5
 8002c72:	dcf2      	bgt.n	8002c5a <_printf_i+0x21e>
 8002c74:	e7eb      	b.n	8002c4e <_printf_i+0x212>
 8002c76:	2500      	movs	r5, #0
 8002c78:	f104 0619 	add.w	r6, r4, #25
 8002c7c:	e7f5      	b.n	8002c6a <_printf_i+0x22e>
 8002c7e:	bf00      	nop
 8002c80:	08003037 	.word	0x08003037
 8002c84:	08003048 	.word	0x08003048

08002c88 <memcpy>:
 8002c88:	440a      	add	r2, r1
 8002c8a:	4291      	cmp	r1, r2
 8002c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c90:	d100      	bne.n	8002c94 <memcpy+0xc>
 8002c92:	4770      	bx	lr
 8002c94:	b510      	push	{r4, lr}
 8002c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c9e:	4291      	cmp	r1, r2
 8002ca0:	d1f9      	bne.n	8002c96 <memcpy+0xe>
 8002ca2:	bd10      	pop	{r4, pc}

08002ca4 <memmove>:
 8002ca4:	4288      	cmp	r0, r1
 8002ca6:	b510      	push	{r4, lr}
 8002ca8:	eb01 0402 	add.w	r4, r1, r2
 8002cac:	d902      	bls.n	8002cb4 <memmove+0x10>
 8002cae:	4284      	cmp	r4, r0
 8002cb0:	4623      	mov	r3, r4
 8002cb2:	d807      	bhi.n	8002cc4 <memmove+0x20>
 8002cb4:	1e43      	subs	r3, r0, #1
 8002cb6:	42a1      	cmp	r1, r4
 8002cb8:	d008      	beq.n	8002ccc <memmove+0x28>
 8002cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002cc2:	e7f8      	b.n	8002cb6 <memmove+0x12>
 8002cc4:	4402      	add	r2, r0
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	428a      	cmp	r2, r1
 8002cca:	d100      	bne.n	8002cce <memmove+0x2a>
 8002ccc:	bd10      	pop	{r4, pc}
 8002cce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002cd6:	e7f7      	b.n	8002cc8 <memmove+0x24>

08002cd8 <_free_r>:
 8002cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cda:	2900      	cmp	r1, #0
 8002cdc:	d044      	beq.n	8002d68 <_free_r+0x90>
 8002cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ce2:	9001      	str	r0, [sp, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8002cea:	bfb8      	it	lt
 8002cec:	18e4      	addlt	r4, r4, r3
 8002cee:	f000 f913 	bl	8002f18 <__malloc_lock>
 8002cf2:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <_free_r+0x94>)
 8002cf4:	9801      	ldr	r0, [sp, #4]
 8002cf6:	6813      	ldr	r3, [r2, #0]
 8002cf8:	b933      	cbnz	r3, 8002d08 <_free_r+0x30>
 8002cfa:	6063      	str	r3, [r4, #4]
 8002cfc:	6014      	str	r4, [r2, #0]
 8002cfe:	b003      	add	sp, #12
 8002d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d04:	f000 b90e 	b.w	8002f24 <__malloc_unlock>
 8002d08:	42a3      	cmp	r3, r4
 8002d0a:	d908      	bls.n	8002d1e <_free_r+0x46>
 8002d0c:	6825      	ldr	r5, [r4, #0]
 8002d0e:	1961      	adds	r1, r4, r5
 8002d10:	428b      	cmp	r3, r1
 8002d12:	bf01      	itttt	eq
 8002d14:	6819      	ldreq	r1, [r3, #0]
 8002d16:	685b      	ldreq	r3, [r3, #4]
 8002d18:	1949      	addeq	r1, r1, r5
 8002d1a:	6021      	streq	r1, [r4, #0]
 8002d1c:	e7ed      	b.n	8002cfa <_free_r+0x22>
 8002d1e:	461a      	mov	r2, r3
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	b10b      	cbz	r3, 8002d28 <_free_r+0x50>
 8002d24:	42a3      	cmp	r3, r4
 8002d26:	d9fa      	bls.n	8002d1e <_free_r+0x46>
 8002d28:	6811      	ldr	r1, [r2, #0]
 8002d2a:	1855      	adds	r5, r2, r1
 8002d2c:	42a5      	cmp	r5, r4
 8002d2e:	d10b      	bne.n	8002d48 <_free_r+0x70>
 8002d30:	6824      	ldr	r4, [r4, #0]
 8002d32:	4421      	add	r1, r4
 8002d34:	1854      	adds	r4, r2, r1
 8002d36:	42a3      	cmp	r3, r4
 8002d38:	6011      	str	r1, [r2, #0]
 8002d3a:	d1e0      	bne.n	8002cfe <_free_r+0x26>
 8002d3c:	681c      	ldr	r4, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	6053      	str	r3, [r2, #4]
 8002d42:	4421      	add	r1, r4
 8002d44:	6011      	str	r1, [r2, #0]
 8002d46:	e7da      	b.n	8002cfe <_free_r+0x26>
 8002d48:	d902      	bls.n	8002d50 <_free_r+0x78>
 8002d4a:	230c      	movs	r3, #12
 8002d4c:	6003      	str	r3, [r0, #0]
 8002d4e:	e7d6      	b.n	8002cfe <_free_r+0x26>
 8002d50:	6825      	ldr	r5, [r4, #0]
 8002d52:	1961      	adds	r1, r4, r5
 8002d54:	428b      	cmp	r3, r1
 8002d56:	bf04      	itt	eq
 8002d58:	6819      	ldreq	r1, [r3, #0]
 8002d5a:	685b      	ldreq	r3, [r3, #4]
 8002d5c:	6063      	str	r3, [r4, #4]
 8002d5e:	bf04      	itt	eq
 8002d60:	1949      	addeq	r1, r1, r5
 8002d62:	6021      	streq	r1, [r4, #0]
 8002d64:	6054      	str	r4, [r2, #4]
 8002d66:	e7ca      	b.n	8002cfe <_free_r+0x26>
 8002d68:	b003      	add	sp, #12
 8002d6a:	bd30      	pop	{r4, r5, pc}
 8002d6c:	2000010c 	.word	0x2000010c

08002d70 <sbrk_aligned>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	4e0e      	ldr	r6, [pc, #56]	; (8002dac <sbrk_aligned+0x3c>)
 8002d74:	460c      	mov	r4, r1
 8002d76:	6831      	ldr	r1, [r6, #0]
 8002d78:	4605      	mov	r5, r0
 8002d7a:	b911      	cbnz	r1, 8002d82 <sbrk_aligned+0x12>
 8002d7c:	f000 f8bc 	bl	8002ef8 <_sbrk_r>
 8002d80:	6030      	str	r0, [r6, #0]
 8002d82:	4621      	mov	r1, r4
 8002d84:	4628      	mov	r0, r5
 8002d86:	f000 f8b7 	bl	8002ef8 <_sbrk_r>
 8002d8a:	1c43      	adds	r3, r0, #1
 8002d8c:	d00a      	beq.n	8002da4 <sbrk_aligned+0x34>
 8002d8e:	1cc4      	adds	r4, r0, #3
 8002d90:	f024 0403 	bic.w	r4, r4, #3
 8002d94:	42a0      	cmp	r0, r4
 8002d96:	d007      	beq.n	8002da8 <sbrk_aligned+0x38>
 8002d98:	1a21      	subs	r1, r4, r0
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f000 f8ac 	bl	8002ef8 <_sbrk_r>
 8002da0:	3001      	adds	r0, #1
 8002da2:	d101      	bne.n	8002da8 <sbrk_aligned+0x38>
 8002da4:	f04f 34ff 	mov.w	r4, #4294967295
 8002da8:	4620      	mov	r0, r4
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
 8002dac:	20000110 	.word	0x20000110

08002db0 <_malloc_r>:
 8002db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db4:	1ccd      	adds	r5, r1, #3
 8002db6:	f025 0503 	bic.w	r5, r5, #3
 8002dba:	3508      	adds	r5, #8
 8002dbc:	2d0c      	cmp	r5, #12
 8002dbe:	bf38      	it	cc
 8002dc0:	250c      	movcc	r5, #12
 8002dc2:	2d00      	cmp	r5, #0
 8002dc4:	4607      	mov	r7, r0
 8002dc6:	db01      	blt.n	8002dcc <_malloc_r+0x1c>
 8002dc8:	42a9      	cmp	r1, r5
 8002dca:	d905      	bls.n	8002dd8 <_malloc_r+0x28>
 8002dcc:	230c      	movs	r3, #12
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	2600      	movs	r6, #0
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dd8:	4e2e      	ldr	r6, [pc, #184]	; (8002e94 <_malloc_r+0xe4>)
 8002dda:	f000 f89d 	bl	8002f18 <__malloc_lock>
 8002dde:	6833      	ldr	r3, [r6, #0]
 8002de0:	461c      	mov	r4, r3
 8002de2:	bb34      	cbnz	r4, 8002e32 <_malloc_r+0x82>
 8002de4:	4629      	mov	r1, r5
 8002de6:	4638      	mov	r0, r7
 8002de8:	f7ff ffc2 	bl	8002d70 <sbrk_aligned>
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	4604      	mov	r4, r0
 8002df0:	d14d      	bne.n	8002e8e <_malloc_r+0xde>
 8002df2:	6834      	ldr	r4, [r6, #0]
 8002df4:	4626      	mov	r6, r4
 8002df6:	2e00      	cmp	r6, #0
 8002df8:	d140      	bne.n	8002e7c <_malloc_r+0xcc>
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	4631      	mov	r1, r6
 8002dfe:	4638      	mov	r0, r7
 8002e00:	eb04 0803 	add.w	r8, r4, r3
 8002e04:	f000 f878 	bl	8002ef8 <_sbrk_r>
 8002e08:	4580      	cmp	r8, r0
 8002e0a:	d13a      	bne.n	8002e82 <_malloc_r+0xd2>
 8002e0c:	6821      	ldr	r1, [r4, #0]
 8002e0e:	3503      	adds	r5, #3
 8002e10:	1a6d      	subs	r5, r5, r1
 8002e12:	f025 0503 	bic.w	r5, r5, #3
 8002e16:	3508      	adds	r5, #8
 8002e18:	2d0c      	cmp	r5, #12
 8002e1a:	bf38      	it	cc
 8002e1c:	250c      	movcc	r5, #12
 8002e1e:	4629      	mov	r1, r5
 8002e20:	4638      	mov	r0, r7
 8002e22:	f7ff ffa5 	bl	8002d70 <sbrk_aligned>
 8002e26:	3001      	adds	r0, #1
 8002e28:	d02b      	beq.n	8002e82 <_malloc_r+0xd2>
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	442b      	add	r3, r5
 8002e2e:	6023      	str	r3, [r4, #0]
 8002e30:	e00e      	b.n	8002e50 <_malloc_r+0xa0>
 8002e32:	6822      	ldr	r2, [r4, #0]
 8002e34:	1b52      	subs	r2, r2, r5
 8002e36:	d41e      	bmi.n	8002e76 <_malloc_r+0xc6>
 8002e38:	2a0b      	cmp	r2, #11
 8002e3a:	d916      	bls.n	8002e6a <_malloc_r+0xba>
 8002e3c:	1961      	adds	r1, r4, r5
 8002e3e:	42a3      	cmp	r3, r4
 8002e40:	6025      	str	r5, [r4, #0]
 8002e42:	bf18      	it	ne
 8002e44:	6059      	strne	r1, [r3, #4]
 8002e46:	6863      	ldr	r3, [r4, #4]
 8002e48:	bf08      	it	eq
 8002e4a:	6031      	streq	r1, [r6, #0]
 8002e4c:	5162      	str	r2, [r4, r5]
 8002e4e:	604b      	str	r3, [r1, #4]
 8002e50:	4638      	mov	r0, r7
 8002e52:	f104 060b 	add.w	r6, r4, #11
 8002e56:	f000 f865 	bl	8002f24 <__malloc_unlock>
 8002e5a:	f026 0607 	bic.w	r6, r6, #7
 8002e5e:	1d23      	adds	r3, r4, #4
 8002e60:	1af2      	subs	r2, r6, r3
 8002e62:	d0b6      	beq.n	8002dd2 <_malloc_r+0x22>
 8002e64:	1b9b      	subs	r3, r3, r6
 8002e66:	50a3      	str	r3, [r4, r2]
 8002e68:	e7b3      	b.n	8002dd2 <_malloc_r+0x22>
 8002e6a:	6862      	ldr	r2, [r4, #4]
 8002e6c:	42a3      	cmp	r3, r4
 8002e6e:	bf0c      	ite	eq
 8002e70:	6032      	streq	r2, [r6, #0]
 8002e72:	605a      	strne	r2, [r3, #4]
 8002e74:	e7ec      	b.n	8002e50 <_malloc_r+0xa0>
 8002e76:	4623      	mov	r3, r4
 8002e78:	6864      	ldr	r4, [r4, #4]
 8002e7a:	e7b2      	b.n	8002de2 <_malloc_r+0x32>
 8002e7c:	4634      	mov	r4, r6
 8002e7e:	6876      	ldr	r6, [r6, #4]
 8002e80:	e7b9      	b.n	8002df6 <_malloc_r+0x46>
 8002e82:	230c      	movs	r3, #12
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	4638      	mov	r0, r7
 8002e88:	f000 f84c 	bl	8002f24 <__malloc_unlock>
 8002e8c:	e7a1      	b.n	8002dd2 <_malloc_r+0x22>
 8002e8e:	6025      	str	r5, [r4, #0]
 8002e90:	e7de      	b.n	8002e50 <_malloc_r+0xa0>
 8002e92:	bf00      	nop
 8002e94:	2000010c 	.word	0x2000010c

08002e98 <_realloc_r>:
 8002e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9c:	4680      	mov	r8, r0
 8002e9e:	4614      	mov	r4, r2
 8002ea0:	460e      	mov	r6, r1
 8002ea2:	b921      	cbnz	r1, 8002eae <_realloc_r+0x16>
 8002ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	f7ff bf81 	b.w	8002db0 <_malloc_r>
 8002eae:	b92a      	cbnz	r2, 8002ebc <_realloc_r+0x24>
 8002eb0:	f7ff ff12 	bl	8002cd8 <_free_r>
 8002eb4:	4625      	mov	r5, r4
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ebc:	f000 f838 	bl	8002f30 <_malloc_usable_size_r>
 8002ec0:	4284      	cmp	r4, r0
 8002ec2:	4607      	mov	r7, r0
 8002ec4:	d802      	bhi.n	8002ecc <_realloc_r+0x34>
 8002ec6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002eca:	d812      	bhi.n	8002ef2 <_realloc_r+0x5a>
 8002ecc:	4621      	mov	r1, r4
 8002ece:	4640      	mov	r0, r8
 8002ed0:	f7ff ff6e 	bl	8002db0 <_malloc_r>
 8002ed4:	4605      	mov	r5, r0
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d0ed      	beq.n	8002eb6 <_realloc_r+0x1e>
 8002eda:	42bc      	cmp	r4, r7
 8002edc:	4622      	mov	r2, r4
 8002ede:	4631      	mov	r1, r6
 8002ee0:	bf28      	it	cs
 8002ee2:	463a      	movcs	r2, r7
 8002ee4:	f7ff fed0 	bl	8002c88 <memcpy>
 8002ee8:	4631      	mov	r1, r6
 8002eea:	4640      	mov	r0, r8
 8002eec:	f7ff fef4 	bl	8002cd8 <_free_r>
 8002ef0:	e7e1      	b.n	8002eb6 <_realloc_r+0x1e>
 8002ef2:	4635      	mov	r5, r6
 8002ef4:	e7df      	b.n	8002eb6 <_realloc_r+0x1e>
	...

08002ef8 <_sbrk_r>:
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	4d06      	ldr	r5, [pc, #24]	; (8002f14 <_sbrk_r+0x1c>)
 8002efc:	2300      	movs	r3, #0
 8002efe:	4604      	mov	r4, r0
 8002f00:	4608      	mov	r0, r1
 8002f02:	602b      	str	r3, [r5, #0]
 8002f04:	f7fd fd3a 	bl	800097c <_sbrk>
 8002f08:	1c43      	adds	r3, r0, #1
 8002f0a:	d102      	bne.n	8002f12 <_sbrk_r+0x1a>
 8002f0c:	682b      	ldr	r3, [r5, #0]
 8002f0e:	b103      	cbz	r3, 8002f12 <_sbrk_r+0x1a>
 8002f10:	6023      	str	r3, [r4, #0]
 8002f12:	bd38      	pop	{r3, r4, r5, pc}
 8002f14:	20000114 	.word	0x20000114

08002f18 <__malloc_lock>:
 8002f18:	4801      	ldr	r0, [pc, #4]	; (8002f20 <__malloc_lock+0x8>)
 8002f1a:	f000 b811 	b.w	8002f40 <__retarget_lock_acquire_recursive>
 8002f1e:	bf00      	nop
 8002f20:	20000118 	.word	0x20000118

08002f24 <__malloc_unlock>:
 8002f24:	4801      	ldr	r0, [pc, #4]	; (8002f2c <__malloc_unlock+0x8>)
 8002f26:	f000 b80c 	b.w	8002f42 <__retarget_lock_release_recursive>
 8002f2a:	bf00      	nop
 8002f2c:	20000118 	.word	0x20000118

08002f30 <_malloc_usable_size_r>:
 8002f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f34:	1f18      	subs	r0, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bfbc      	itt	lt
 8002f3a:	580b      	ldrlt	r3, [r1, r0]
 8002f3c:	18c0      	addlt	r0, r0, r3
 8002f3e:	4770      	bx	lr

08002f40 <__retarget_lock_acquire_recursive>:
 8002f40:	4770      	bx	lr

08002f42 <__retarget_lock_release_recursive>:
 8002f42:	4770      	bx	lr

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr
