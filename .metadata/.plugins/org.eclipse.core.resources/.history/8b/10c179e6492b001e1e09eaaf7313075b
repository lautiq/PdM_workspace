/**
  ******************************************************************************
  * @file           : APIDebounce.c
  * @brief          : Implementaci칩n de funciones para el manejo de anti-rebote
  *                   utilizando una MEF (M치quina de Estados Finitos) y la BSP
  *                   (Board Support Package) para la lectura del bot칩n.
  *
  *
  ******************************************************************************
  * @attention
  *
  * Copyright (c) [13-07-2023] [Lauta]
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */


/* Includes ------------------------------------------------------------------*/
#include "API_debounce.h"
#include "API_delay.h"

/* Private defines -----------------------------------------------------------*/
#define DEBOUNCE_TIME_MS 40



typedef enum{
	init_error
}ErrorFlag_t;

/* Private variables ---------------------------------------------------------*/
// Variables para el anti-rebote
static debounceState_t currentState;
static delay_t debounceDelay;



/* Public functions ----------------------------------------------------------*/
/**
  * @brief  Inicializa la MEF de anti-rebote.
  * @retval None
  */
void debounceFSM_init()
{
	GPIO_PinState buttonState = BSP_PB_GetState(BUTTON_USER);
	if(buttonState == GPIO_PIN_RESET)
	{
		Error_Handler();
	}

	currentState = BUTTON_UP;
	delayInit(&debounceDelay, DEBOUNCE_TIME_MS);
}


/**
  * @brief  Actualiza la MEF de anti-rebote peri칩dicamente.
  * @retval None
  */
void debounceFSM_update()
{
	GPIO_PinState buttonState = BSP_PB_GetState(BUTTON_USER);

	switch(currentState){
	case BUTTON_UP:
		if (buttonState == GPIO_PIN_RESET)
		{
			currentState = BUTTON_FALLING;
			delayWrite(&debounceDelay, DEBOUNCE_TIME);
		}
	break;

	case BUTTON_FALLING:
		if(delayRead(&debounceDelay))
		{
			currentState = BUTTON_DOWN;
		}
	break;

	case BUTTON_DOWN:
		if(buttonState == GPIO_PIN_SET)
		{
			currentState = BUTTON_RAISING;
			delayWrite(&debounceDelay, DEBOUNCE_TIME);
		}
	break;

	case BUTTON_RAISING:
		if(delayRead(&debounceDelay))
		{
			currentState = BUTTON_UP;
		}
	break;

	default:
		currentState = BUTTON_UP;
	break;

	}
}


void error_Handler()
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LED_Toggle(LED_BUILTIN);
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}






