/*
 * API_debounce.c
 *
 *  Created on: Jul 13, 2023
 *      Author: lauta
 */


#include "API_debounce.h"
#include "API_delay.h"

#define DEBOUNCE_TIME 40
typedef enum{
	init_error
}ErrorFlag_t;


static debounceState_t currentState;
static delay_t debounceDelay;



//Debe cargar el estado inicial.

void debounceFSM_init()
{
	if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) != 1 )
	{
		ErrorFlag_t ErrorFlag=init_error;
		ErrorHandler(ErrorFlag);
	}

	currentState = BUTTON_UP;

	delayInit(&debounceDelay, DEBOUNCE_TIME);

}


// debe leer entradas, resolver logica de transicion de estados y actualizar salidas.
void debounceFSM_update()
{
	GPIO_PinState buttonState = BSP_PB_GetState(USER_BUTTON_PIN);

	switch(currentState){
	case BUTTON_UP:
		if (buttonState == GPIO_PIN_RESET)
		{
			currentState = BUTTON_FALLING;
			delayWrite(&debounceDelay, DEBOUNCE_TIME);
		}
	break;

	case BUTTON_FALLING:
		if(delayRead(&debounceDelay))
		{
			currentState = BUTTON_DOWN;
			buttonPressed();
		}
	break;

	case BUTTON_DOWN:
		if(buttonState == GPIO_PIN_SET)
		{
			currentState = BUTTON_RAISING;
			delayWrite(&debounceDelay, DEBOUNCE_TIME);
		}
	break;

	case BUTTON_RAISING:
		if(delayRead(&debounceDelay))
		{
			currentState = BUTTON_UP;
			buttonReleased();
		}
	break;

	default:
		currentState = BUTTON_UP;
	break;

	}
}


void buttonPressed()
{
	BSP_LED_TOGGLE(LED1);
}

void buttonReleased()
{
	BSP_LED_TOGGLE(LED3);
}













